<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ru-RU">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch004.xhtml</title>
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body epub:type="bodymatter">
<section id="анимации-с-пользовательским-взаимодействием" class="level1" data-number="4">
<h1 data-number="4">4. Анимации с пользовательским взаимодействием</h1>
<div class="text-container text-container--module">
<p>В четвёртом разделе мы научимся добавлять анимации при клике, прокрутке страницы, движении колеса мыши. Рассмотрим разные примеры таких анимаций и поговорим, какими возможностями обладает JS для управления анимацией.</p>
</div>
<section id="добавление-анимации-по-клику" class="level2" data-number="4.1">
<h2 data-number="4.1">4.1. Добавление анимации по клику</h2>
<div class="text-container text-container--module">
<p>Общепринятая практика применения анимаций с помощью JavaScript: добавлять класс с анимацией к элементу при наступлении события, например, клика. Добавлять оформление с помощью JS не стоит. Важно разделять то, что относится к оформлению (CSS) и логике (JS). Поэтому событие будет являться неким триггером, когда у элемента меняется оформление.</p>
<p>Такая анимация похожа на использование переходов при наведении. Есть исходное состояние элемента и класс-модификатор.</p>
<p>К примеру, когда мы нажимаем на кнопку открытия модального окна, у этого окна к элементу с классом <code>modal</code> добавляется второй класс — <code>modal--open</code>, и анимация проигрывается. Когда кликаем на кнопку закрытия, класс убирается и анимация снова срабатывает.</p>
<figure>
<img src="../media/file70.gif" alt="Пример модального окна с анимацией появления" />
<figcaption aria-hidden="true">Пример модального окна с анимацией появления</figcaption>
</figure>
<p>Как и в CSS-анимациях, элемент может появляться медленнее, закрытие происходит быстрее.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.modal</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* оформление */</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: <span class="fu">scale(</span><span class="dv">1.15</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: transform <span class="dv">0.2</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">,</span>  opacity <span class="dv">0.2</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="fu">.modal--open</span> {</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: <span class="fu">scale(</span><span class="dv">1</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: transform <span class="dv">0.4</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">,</span>  opacity <span class="dv">0.4</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p><em>(см. 4.20. Анимация плавного появления модального окна)</em></p>
<p>Аналогичным способом можно анимировать вложенные элементы и псевдоэлементы. Например, можем сделать анимированную всплывающую подсказку при клике на <code>span</code> с классом <code>has-tooltip</code>. Сам текст подсказки будет храниться в data-атрибуте элемента и станет добавляться в свойство <code>content</code> псевдоэлемента <code>::after</code>. Аналогично мы поступили в прошлом модуле в примере с карточками товаров.</p>
<p>Изначально псевдоэлемент скрыт. При клике на элемент с классом <code>has-tooltip</code> ему же добавляется второй класс <code>animated-tooltip</code>. Для этого класса в стилях описывается анимация появления всплывающей подсказки. При повторном клике на элемент класс <code>animated-tooltip</code> удаляется, анимация срабатывает повторно.</p>
<p><em>(см. 4.21. Анимация появления всплывающей подсказки)</em></p>
<p>На этом же принципе будут основаны и более сложные анимации, которые мы разберём чуть позднее.</p>
</div>
</section>
<section id="события-анимации" class="level2" data-number="4.2">
<h2 data-number="4.2">4.2. События анимации</h2>
<div class="text-container text-container--module">
<p>Для работы с анимациями есть ряд событий, которые помогают в их обработке.</p>
<p>Для CSS-переходов <code>transition</code>:</p>
<ul>
<li><code>transitionstart</code> — событие начала проигрывания анимации;</li>
<li><code>transitionrun</code> — событие процесса проигрывания анимации;</li>
<li><code>transitioncancel</code> — событие прерывания проигрывания анимации;</li>
<li><code>transitionend</code> — событие окончания проигрывания анимации.</li>
</ul>
<p>Для покадровых CSS-анимаций <code>animation</code>:</p>
<ul>
<li><code>animationstart</code> — событие начала проигрывания анимации;</li>
<li><code>animationiteration</code> — событие проигрывания цикла анимации;</li>
<li><code>animationcancel</code> — событие прерывания проигрывания анимации;</li>
<li><code>animationend</code> — событие окончания проигрывания анимации.</li>
</ul>
<p>Если наступили события <code>transitioncancel</code> или <code>animationcancel</code>, то <code>transitionend</code> или <code>animationend</code> уже не наступят. Это может произойти если, например, во время анимации элемент был удалён из DOM или имя анимации было заменено на другое.</p>
<p>Эти события позволяют выполнить какие-то действия до, во время или после воспроизведения анимации. Например, можно до начала анимации элемента добавить класс со специальным оформлением его родителю, а по окончании анимации элемента удалить класс у родителя. Или можно делать что-то, пока анимация воспроизводится. В данном курсе мы чаще будем использовать событие окончания анимации.</p>
<p>К примеру, мы можем показать пользователю нажатые им кнопки. Для этого опишем для кнопки состояние <code>active</code> и второй класс <code>btn--pushed</code>.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.btn</span> {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* оформление кнопки */</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: opacity <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="fu">.btn</span><span class="in">:active</span> {</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">0.2</span><span class="op">;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="fu">.btn--pushed</span> {</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>   <span class="kw">opacity</span>: <span class="dv">0.8</span><span class="op">;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>   <span class="kw">background-color</span>: <span class="cn">purple</span><span class="op">;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Как только пользователь нажал на кнопку, срабатывает анимация перехода. Когда она закончится, на кнопку добавится класс <code>btn--pushed</code>.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>btn<span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&#39;transitionend&#39;</span><span class="op">,</span> <span class="kw">function</span>(){</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  btn<span class="op">.</span><span class="at">classList</span><span class="op">.</span><span class="fu">add</span>(<span class="st">&#39;btn--pushed&#39;</span>)<span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<p>Теперь рассмотрим пример модального окна с анимацией. При открытии оно появляется сверху, а при закрытии съезжает вниз.</p>
<p>За анимации будут отвечать два разных класса:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.modal-in</span> {</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">animation</span>: modal-in <span class="dv">0.5</span><span class="dt">s</span> <span class="dv">ease-out</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="fu">.modal-out</span> {</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">animation</span>: modal-out <span class="dv">0.5</span><span class="dt">s</span> <span class="dv">ease-in</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="im">@keyframes</span> modal-in {</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>  <span class="dv">from</span> {</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">transform</span>: translateY(<span class="dv">-150</span><span class="dt">%</span>)<span class="op">;</span> </span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">opacity</span>: <span class="dv">0</span><span class="op">;</span> </span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>  <span class="dv">to</span> {</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">transform</span>: translateY(<span class="dv">0</span><span class="dt">%</span>)<span class="op">;</span> </span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    <span class="kw">opacity</span>: <span class="dv">1</span><span class="op">;</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a><span class="im">@keyframes</span> modal-out {</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>  <span class="dv">from</span> {</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>    <span class="kw">transform</span>: translateY(<span class="dv">0</span><span class="dt">%</span>)<span class="op">;</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>    <span class="kw">opacity</span>: <span class="dv">1</span><span class="op">;</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>  <span class="dv">to</span> {</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>    <span class="kw">transform</span>: translateY(<span class="dv">150</span><span class="dt">%</span>)<span class="op">;</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>    <span class="kw">opacity</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Отметим, что у модального окна есть затемнение всего экрана, которое не должно двигаться. При открытии окна мы сначала видим часть с затемнением. Затем контентная часть окна перемещается сверху вниз. При закрытии окна сначала проигрывается анимация контентной части, и сразу после пропадает затемнение. Скрывать окно можно и быстрее, без анимации. Но в учебных целях рассмотрим пример с анимацией в обе стороны.</p>
<p><em>(см. 4.22. Усложнённая анимация открытия модального окна)</em></p>
<p>Важный момент: сначала указывается слушатель события окончания анимации, только после этого добавляется класс с анимацией. В противном случае мы не сможем отловить окончание анимации. Чтобы анимация сработала повторно, после её окончания слушатель обязательно нужно удалить.</p>
</div>
</section>
<section id="анимация-открытия-и-закрытия-меню" class="level2" data-number="4.3">
<h2 data-number="4.3">4.3. Анимация открытия и закрытия меню</h2>
<div class="text-container text-container--module">
<p>Анимация меню обычно состоит из двух частей: анимации «бургера» и самого меню. В нашем примере мы будем использовать популярное в современном дизайне полноэкранное меню. Весь первый экран занимает <code>header</code>, у которого есть две части:</p>
<ul>
<li>верхняя с логотипом, кнопкой меню и навигацией;</li>
<li>нижняя с приветственным заголовком.</li>
</ul>
<p>У верхней части есть класс <code>menu</code>, он отвечает за отображение меню. У этого класса есть модификатор <code>menu--open</code>, который добавляется, когда меню открыто, и удаляется, когда закрыто. Анимация «бургера» и меню будет включаться по классу <code>menu--open</code>.</p>
<p>Большая часть работы приходится на стили, JavaScript только переключает класс <code>menu--open</code> при клике на «бургер».</p>
<figure>
<img src="../media/file71.gif" alt="Анимация меню" />
<figcaption aria-hidden="true">Анимация меню</figcaption>
</figure>
<p>Меню может быть сдвинуто в любую из сторон с помощью <code>transform: translate</code> или сжато с помощью <code>transform: scale</code>. Время открытия меню может быть дольше, чтобы показать анимацию. Закрытие будет происходить быстрее.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.main-nav</span> {</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: translateY(<span class="dv">-100</span><span class="dt">%</span>)<span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: transform <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span> </span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a> <span class="fu">.menu--open</span> <span class="fu">.main-nav</span> {</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: translateY(<span class="dv">0</span><span class="dt">%</span>)<span class="op">;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: transform <span class="dv">0.2</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>} </span></code></pre></div>
<p>Открывшееся меню будет позиционировано поверх имеющихся элементов, поэтому важно, чтобы кнопка «бургера» осталась доступной. Для этого её можно изначально позиционировать слоем выше. В нашем примере мы оставили ещё и логотип компании.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.menu__logo-link</span> {</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">position</span>: <span class="dv">relative</span><span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">z-index</span>: <span class="dv">110</span><span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="fu">.burger</span> {</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">position</span>: <span class="dv">relative</span><span class="op">;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">z-index</span>: <span class="dv">110</span><span class="op">;</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="fu">.main-nav</span> {</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">position</span>: <span class="dv">fixed</span><span class="op">;</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">top</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">bottom</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">left</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>  <span class="kw">right</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>  <span class="kw">z-index</span>: <span class="dv">90</span><span class="op">;</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Между значениями <code>z-index</code> можно оставить некоторый зазор на случай появления ещё каких-то элементов в дальнейшем.</p>
<p>После открытия меню можно добавить поочерёдное появление пунктов навигации. Первый пункт может появиться сразу же после окончания анимации открытия меню, а остальные — с задержкой с небольшим шагом. Пока у нас три элемента, однако нужно подумать о том, что их может стать больше. Поэтому для третьего и всех последующих элементов задержка будет одинаковая. Закрываться меню должно быстро, так что обратная анимация не требуется.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.main-nav__item</span> {</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: opacity <span class="dv">0.2</span><span class="dt">s</span> <span class="dv">ease</span> <span class="dv">0</span><span class="dt">s</span><span class="op">;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="fu">.menu--open</span> <span class="fu">.main-nav__item</span> {</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">1</span><span class="op">;</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="fu">.menu--open</span> <span class="fu">.main-nav__item</span><span class="in">:nth-child(1)</span> {</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition-delay</span>: <span class="dv">0.3</span><span class="dt">s</span><span class="op">;</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="fu">.menu--open</span> <span class="fu">.main-nav__item</span><span class="in">:nth-child(2)</span> {</span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition-delay</span>: <span class="dv">0.45</span><span class="dt">s</span><span class="op">;</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a><span class="fu">.menu--open</span> <span class="fu">.main-nav__item</span><span class="in">:nth-child(n+3)</span> {</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition-delay</span>: <span class="dv">0.6</span><span class="dt">s</span><span class="op">;</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>} </span></code></pre></div>
<p>Остаётся анимация «бургера». Она может быть любой, от простого перехода одного цвета в другой до каких-то сложных манипуляций. В нашем случае мы используем четыре вложенных элемента: второй и третий создают среднюю линию, первый и четвёртый — верхнюю и нижнюю соответственно.</p>
<p>При открытии меню первая и четвёртая линии сжимаются к центру и исчезают. Вторая и третья линии поворачиваются на 45 градусов, создают крестик и меняют цвет на белый.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.burger__line</span> {</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: transform <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease-in-out</span><span class="op">,</span> background-color <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease-in-out</span><span class="op">;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="fu">.menu--open</span> <span class="fu">.burger__line</span> {</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">background-color</span>: <span class="cn">#ffffff</span><span class="op">;</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="fu">.menu--open</span> <span class="fu">.burger__line</span><span class="in">:nth-child(1)</span> {</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: scaleX(<span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="fu">.menu--open</span> <span class="fu">.burger__line</span><span class="in">:nth-child(2)</span> {</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: <span class="fu">rotate(</span><span class="dv">45</span><span class="dt">deg</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="fu">.menu--open</span> <span class="fu">.burger__line</span><span class="in">:nth-child(3)</span> {</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: <span class="fu">rotate(</span><span class="dv">-45</span><span class="dt">deg</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a><span class="fu">.menu--open</span> <span class="fu">.burger__line</span><span class="in">:nth-child(4)</span> {</span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: scaleX(<span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
</div>
</section>
<section id="бесконечный-слайдер-изображений" class="level2" data-number="4.4">
<h2 data-number="4.4">4.4. Бесконечный слайдер изображений</h2>
<div class="text-container text-container--module">
<p>Далее рассмотрим два примера слайдера: бесконечный с простой анимацией и стандартный (незацикленный) слайдер с более сложной анимацией.</p>
<figure>
<img src="../media/file72.gif" alt="Бесконечный слайдер изображений" />
<figcaption aria-hidden="true">Бесконечный слайдер изображений</figcaption>
</figure>
<p>Каждый слайд имеет обёртку, текущий слайд имеет второй класс <code>slider-item--current</code>. При клике на кнопки «Вперёд» и «Назад» происходит перемещение этого класса и анимация слайдов. Самая простая анимация — <code>fade</code>, то есть плавное появление (изменение прозрачности).</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.slider-item</span> {</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: opacity <span class="dv">0.5</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="fu">.slider-item--current</span> {</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">1</span><span class="op">;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Большая часть работы ложится на JavaScript. Создаётся переменная <code>counter</code>, которая будет хранить номер текущего слайда. А у кнопок «Вперёд» и «Назад» будут разные колбэки в слушателя события клика.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> sliderBox <span class="op">=</span> <span class="bu">document</span><span class="op">.</span><span class="fu">querySelector</span>(<span class="st">&#39;.slider&#39;</span>)<span class="op">;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> slides <span class="op">=</span> sliderBox<span class="op">.</span><span class="fu">querySelectorAll</span>(<span class="st">&#39;.slider-item&#39;</span>)<span class="op">;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> btnPrev <span class="op">=</span> sliderBox<span class="op">.</span><span class="fu">querySelector</span>(<span class="st">&#39;.slider-btn--prev&#39;</span>)<span class="op">;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> btnNext <span class="op">=</span> sliderBox<span class="op">.</span><span class="fu">querySelector</span>(<span class="st">&#39;.slider-btn--next&#39;</span>)<span class="op">;</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> counter <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span></code></pre></div>
<p>При клике на кнопку «Вперёд» у предыдущего слайда убираем класс <code>slider-item--current</code>. Затем увеличиваем счётчик на единицу, находим номер текущего слайда и добавляем класс <code>slider-item--current</code> на текущий слайд. Чтобы слайдер был бесконечным, добавляем проверку счётчика, чтобы после последнего слайда в разметке снова шёл первый.</p>
<p>То же самое делаем при клике на кнопку «Назад». Разница лишь в том, что счётчик уменьшается на единицу, а проверку делаем при переходе от первого слайда к последнему в разметке.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>btnNext<span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&#39;click&#39;</span><span class="op">,</span> <span class="kw">function</span>() {</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  slides[counter]<span class="op">.</span><span class="at">classList</span><span class="op">.</span><span class="fu">toggle</span>(<span class="st">&#39;slider-item--current&#39;</span>)<span class="op">;</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  counter<span class="op">++;</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (counter <span class="op">&gt;=</span> slides<span class="op">.</span><span class="at">length</span>) {</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    counter <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>  slides[counter]<span class="op">.</span><span class="at">classList</span><span class="op">.</span><span class="fu">toggle</span>(<span class="st">&#39;slider-item--current&#39;</span>)<span class="op">;</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>btnPrev<span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&#39;click&#39;</span><span class="op">,</span> <span class="kw">function</span>() {</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>  slides[counter]<span class="op">.</span><span class="at">classList</span><span class="op">.</span><span class="fu">toggle</span>(<span class="st">&#39;slider-item--current&#39;</span>)<span class="op">;</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>  counter<span class="op">--;</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (counter <span class="op">&lt;</span> <span class="dv">0</span>) {</span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>    counter <span class="op">=</span> slides<span class="op">.</span><span class="at">length</span> <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>  slides[counter]<span class="op">.</span><span class="at">classList</span><span class="op">.</span><span class="fu">toggle</span>(<span class="st">&#39;slider-item--current&#39;</span>)<span class="op">;</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
</div>
</section>
<section id="анимация-изображений-и-подписи-слайдера" class="level2" data-number="4.5">
<h2 data-number="4.5">4.5. Анимация изображений и подписи слайдера</h2>
<div class="text-container text-container--module">
<p>В случае со стандартным (незацикленным) слайдером и более сложной анимацией основа будет та же. То есть текущий слайд будет иметь класс <code>slider-item--current</code>, по которому включается анимация появления слайда и его текста.</p>
<p>Сам слайд может появляться с любой стороны: сбоку или сверху.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.slider-item</span> {</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: translateX(<span class="dv">100</span><span class="dt">%</span>)<span class="op">;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: transform <span class="dv">0.5</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="fu">.slider-item--current</span> {</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: translateX(<span class="dv">0</span><span class="dt">%</span>)<span class="op">;</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: transform <span class="dv">0.5</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Далее с небольшой задержкой и сдвигом или проявлением появятся линии заголовка.</p>
<figure>
<img src="../media/file73.gif" alt="Анимация слайдера" />
<figcaption aria-hidden="true">Анимация слайдера</figcaption>
</figure>
<div class="sourceCode" id="cb13"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.slider-title-line</span> {</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">display</span>: <span class="dv">block</span><span class="op">;</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: translateX(<span class="dv">50</span><span class="dt">px</span>)<span class="op">;</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: transform <span class="dv">0.4</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">,</span> opacity <span class="dv">0.4</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="fu">.slider-title-line</span><span class="in">:nth-child(1)</span> {</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition-delay</span>: <span class="dv">0.3</span><span class="dt">s</span><span class="op">;</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="fu">.slider-title-line</span><span class="in">:nth-child(2)</span> {</span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition-delay</span>: <span class="dv">0.4</span><span class="dt">s</span><span class="op">;</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a><span class="fu">.slider-title-line</span><span class="in">:nth-child(3)</span> {</span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition-delay</span>: <span class="dv">0.5</span><span class="dt">s</span><span class="op">;</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="fu">.slider-item--current</span> <span class="fu">.slider-title-line</span> {</span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: translateX(<span class="dv">0</span><span class="dt">px</span>)<span class="op">;</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">1</span><span class="op">;</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>В JavaScript также будем использовать <code>counter</code>. Можно добавить новую переменную <code>maxStep</code> и хранить в ней максимальное количество слайдов. У слушателей событий клика на кнопки «Вперёд» и «Назад» будут разные колбэки.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>btnNext<span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&quot;click&quot;</span><span class="op">,</span> nextBtnHandler)<span class="op">;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>btnPrev<span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&quot;click&quot;</span><span class="op">,</span> prevBtnHandler)<span class="op">;</span></span></code></pre></div>
<p>Так как слайдер незацикленный, кнопки «Вперёд» и «Назад» нужно блокировать на первом и последнем слайде, добавляя им атрибут <code>disabled</code>. Для этого напишем две вспомогательные функции:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">isFirst</span>(counter) {</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (counter <span class="op">===</span> <span class="dv">0</span>) {</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>    btnPrev<span class="op">.</span><span class="fu">setAttribute</span>(<span class="st">&quot;disabled&quot;</span><span class="op">,</span> <span class="st">&quot;disabled&quot;</span>)<span class="op">;</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  } <span class="cf">else</span> {</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>    btnPrev<span class="op">.</span><span class="fu">removeAttribute</span>(<span class="st">&quot;disabled&quot;</span><span class="op">,</span> <span class="st">&quot;disabled&quot;</span>)<span class="op">;</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">isLast</span>(counter) {</span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (counter <span class="op">===</span> maxStep) {</span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>    btnNext<span class="op">.</span><span class="fu">setAttribute</span>(<span class="st">&quot;disabled&quot;</span><span class="op">,</span> <span class="st">&quot;disabled&quot;</span>)<span class="op">;</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>  } <span class="cf">else</span> {</span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>    btnNext<span class="op">.</span><span class="fu">removeAttribute</span>(<span class="st">&quot;disabled&quot;</span><span class="op">,</span> <span class="st">&quot;disabled&quot;</span>)<span class="op">;</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Чтобы при перелистывании картинок вперёд предыдущий слайд не уезжал и оставался зафиксированным, добавим инлайн <code>transform: translate (0%)</code>. Также добавляем текущему слайду класс <code>slider-item--current</code>.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">nextBtnHandler</span>() {</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>  slides[counter]<span class="op">.</span><span class="at">classList</span><span class="op">.</span><span class="fu">remove</span>(<span class="st">&quot;slider-item--current&quot;</span>)<span class="op">;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>  slides[counter]<span class="op">.</span><span class="fu">setAttribute</span>(<span class="st">&quot;style&quot;</span><span class="op">,</span> <span class="st">&quot;transform: translate(0%)&quot;</span>)<span class="op">;</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>  counter<span class="op">++;</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">isLast</span>(counter)<span class="op">;</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">isFirst</span>(counter)<span class="op">;</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>  slides[counter]<span class="op">.</span><span class="at">classList</span><span class="op">.</span><span class="fu">add</span>(<span class="st">&quot;slider-item--current&quot;</span>)<span class="op">;</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>При перелистывании назад перемещаем класс <code>slider-item--current</code> и убираем инлайновые стили у предыдущего элемента.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">prevBtnHandler</span>() {</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  slides[counter]<span class="op">.</span><span class="at">classList</span><span class="op">.</span><span class="fu">remove</span>(<span class="st">&quot;slider-item--current&quot;</span>)<span class="op">;</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>  counter<span class="op">--;</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">isLast</span>(counter)<span class="op">;</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">isFirst</span>(counter)<span class="op">;</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>  slides[counter]<span class="op">.</span><span class="at">classList</span><span class="op">.</span><span class="fu">add</span>(<span class="st">&quot;slider-item--current&quot;</span>)<span class="op">;</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>  slides[counter]<span class="op">.</span><span class="fu">removeAttribute</span>(<span class="st">&quot;style&quot;</span>)<span class="op">;</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
</div>
</section>
<section id="аккордеон-с-поочерёдным-переключением-вкладок" class="level2" data-number="4.6">
<h2 data-number="4.6">4.6. Аккордеон с поочерёдным переключением вкладок</h2>
<div class="text-container text-container--module">
<p>Аккордеон является одним из стандартных компонентов. Его можно делать по-разному. Например, без какого-либо JavaScript можно сделать аккордеон с помощью тегов <a href="https://developer.mozilla.org/ru/docs/Web/HTML/Element/details">details + summary</a>.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;details&gt;</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;summary&gt;</span>Заголовок<span class="kw">&lt;/summary&gt;</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;content&quot;</span><span class="kw">&gt;</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    скрытый контент</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/div&gt;</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/details&gt;</span></span></code></pre></div>
<p>При клике на текст в <code>summary</code> разворачивается скрытый контент. Такой способ удобен, если не нужна анимация раскрытия. Под капотом браузер меняет состояние скрытого контента с <code>display: none</code> на <code>display: block</code> и обратно.</p>
<p>Как вы помните из первых модулей, никаких анимаций тут сделать не получится. Поэтому используют обычные <code>div</code> и кнопку для заголовка. Остальное будут выполнять стили и JS.</p>
<figure>
<img src="../media/file74.gif" alt="Аккордеон" />
<figcaption aria-hidden="true">Аккордеон</figcaption>
</figure>
<div class="sourceCode" id="cb19"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;accordeon__item&quot;</span><span class="kw">&gt;</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;button</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;accordeon__title&quot;</span> <span class="er">type</span><span class="ot">=</span><span class="st">&quot;button&quot;</span><span class="kw">&gt;</span>Заголовок<span class="kw">&lt;/button&gt;</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;accordeon__descr&quot;</span><span class="kw">&gt;</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>    Скрытый текст</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/div&gt;</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span></code></pre></div>
<p>Открытая вкладка будет иметь класс <code>accordeon__title--active</code>. По нему происходит анимация псевдоэлемента со стрелкой.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.accordeon__title</span><span class="in">::after</span> {</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: <span class="fu">rotate(</span><span class="dv">90</span><span class="dt">deg</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: transform <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a><span class="fu">.accordeon__title--active</span><span class="in">::after</span> {</span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transform</span>: <span class="fu">rotate(</span><span class="dv">180</span><span class="dt">deg</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: transform <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Для текста вкладки добавляем класс <code>accordeon__descr--visible</code>.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.accordeon__descr</span> {</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: opacity <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">,</span> max-height <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a><span class="fu">.accordeon__descr--visible</span> {</span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">1</span><span class="op">;</span></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Изначально высота вкладки равна нулю. Для анимации используется свойство <code>max-height</code>, так как значение <code>height: auto</code> не анимируется: нет точного числа, ведь в каждой вкладке может быть любое количество текста. Его будем получать с помощью JS. При использовании <code>max-height</code> контент будет открыт ровно настолько, чтобы показать весь текст.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>clickedDescr<span class="op">.</span><span class="at">style</span><span class="op">.</span><span class="at">maxHeight</span> <span class="op">=</span> clickedDescr<span class="op">.</span><span class="at">scrollHeight</span> <span class="op">+</span> <span class="st">&quot;px&quot;</span><span class="op">;</span> </span></code></pre></div>
<p>Сами вкладки могут открываться независимо друг от друга, а могут и по очереди: то есть когда открыта вкладка, остальные сворачиваются. В демо по ссылке ниже рассмотрим вариант, когда открыта всегда только одна вкладка аккордеона.</p>
</div>
</section>
<section id="табы-с-анимацией-переключения" class="level2" data-number="4.7">
<h2 data-number="4.7">4.7. Табы с анимацией переключения</h2>
<div class="text-container text-container--module">
<p>Табы являются стандартным элементом и часто встречаются на страницах сайтов. Основной подход к ним рассмотрим далее.</p>
<figure>
<img src="../media/file75.gif" alt="Табы с анимацией переключения" />
<figcaption aria-hidden="true">Табы с анимацией переключения</figcaption>
</figure>
<p>Табы состоят из двух частей: блока кнопок-заголовков и блока контента каждой вкладки. Чтобы сопоставить вкладку контенту, для первой можно добавить data-атрибут, а для второго — идентификатор.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;tabs&quot;</span><span class="kw">&gt;</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;tablinks&quot;</span><span class="kw">&gt;</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;button</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;tablink tablink-active&quot;</span> <span class="er">data-item</span><span class="ot">=</span><span class="st">&quot;item-1&quot;</span><span class="kw">&gt;</span>Вкладка 1<span class="kw">&lt;/button&gt;</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;button</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;tablink&quot;</span> <span class="er">data-item</span><span class="ot">=</span><span class="st">&quot;item-2&quot;</span><span class="kw">&gt;</span>Вкладка 2<span class="kw">&lt;/button&gt;</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/div&gt;</span></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;div</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;tabcontents&quot;</span><span class="kw">&gt;</span></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;div</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;item-1&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;tabcontent tabcontent-active&quot;</span><span class="kw">&gt;</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a>      /* контент вкладки 1 */</span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/div&gt;</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;div</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;item-2&quot;</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;tabcontent&quot;</span><span class="kw">&gt;</span></span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a>      /* контент вкладки 2 */</span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/div&gt;</span></span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/div&gt;</span></span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span></code></pre></div>
<p>Открытая вкладка имеет второй класс <code>tablinks-active</code>, а её контент — <code>tabcontent-active</code>. Эти классы будем добавлять при клике на кнопку. За счёт их изменения можно описать любую анимацию. Самое простое — анимация появления контента вкладки.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.tabcontent</span> {</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: opacity <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="fu">.tabcontent-active</span> {</span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">1</span><span class="op">;</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: opacity <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Можно проявить фантазию и использовать примеры из первых двух модулей, добавляя любые другие анимации как кнопке-переключателю, так и самому контенту.</p>
</div>
</section>
<section id="задание-1-2" class="level2" data-number="4.8">
<h2 data-number="4.8">4.8. Задание 1</h2>
<div class="text-container text-container--module">
<p>Вам прислали вёрстку главной страницы премиальных загородных домов. Нужно добавить анимацию открытия меню с выездом справа налево, сделать анимацию кнопки «бургера» из трёх горизонтальных линий в крестик и поочерёдное появление элементов меню. При закрытии меню элементы поочерёдно скрываются, затем меню сворачивается, а «бургер» возвращается в исходный вид.</p>
<p>Также нужно добавить анимацию переключения слайдов: с выездом слайда справа налево и плавным появлением текста после.</p>
<p>При клике по кнопке «Связаться» появляется затемнение, затем модальное окно выезжает сверху вниз. Когда пользователь нажимает на крестик в окне, окно уезжает вниз, после этого пропадает затемнение.</p>
<p>Добавьте анимацию для переключения вкладок раздела «Работы» таким образом, чтобы при клике на вкладку текст появлялся слева направо, а изображение — справа налево.</p>
<p>Сделайте плавное открытие аккордеона в разделе «Частые вопросы».</p>
</div>
</section>
<section id="эталонное-решение-задания-7" class="level2" data-number="4.9">
<h2 data-number="4.9">4.9. Эталонное решение задания</h2>
<div class="text-container text-container--module">
<section id="шаг-1-39" class="level3" data-number="4.9.1">
<h3 data-number="4.9.1">Шаг №1</h3>
<p>Рассмотрим, как можно было выполнить это задание пошагово.</p>
</section>
<section id="шаг-2-23" class="level3" data-number="4.9.2">
<h3 data-number="4.9.2">Шаг №2</h3>
<p>Добавим открытие меню при клике на «бургер». За открытие меню отвечает класс <code>menu--open</code>, добавляемый шапке. Указываем относительно него, какие будут переходы. Чтобы появление элементов было пошаговым, указываем верный тайминг.</p>
<p>При открытом меню можно убирать у страницы вертикальную прокрутку, добавляя <code>body</code> инлайново <code>overflow: hidden</code>.</p>
</section>
<section id="шаг-3-23" class="level3" data-number="4.9.3">
<h3 data-number="4.9.3">Шаг №3</h3>
<p>Когда меню открывается, можно настроить анимацию «бургера», которая также происходит при смене класса <code>menu--open</code>.</p>
<p>Верхняя часть шапки готова. Теперь дело за слайдером.</p>
</section>
<section id="шаг-4-17" class="level3" data-number="4.9.4">
<h3 data-number="4.9.4">Шаг №4</h3>
<p>Слайды появляются за счёт переключения класса <code>slider__item--current</code>. Заголовок и текст слайда также получают анимацию перехода от этого класса.</p>
</section>
<section id="шаг-5-13" class="level3" data-number="4.9.5">
<h3 data-number="4.9.5">Шаг №5</h3>
<p>Кнопка открытия модального окна <code>slider__modal-btn</code> позиционируется поверх слайдера.</p>
</section>
<section id="шаг-6-4" class="level3" data-number="4.9.6">
<h3 data-number="4.9.6">Шаг №6</h3>
<p>Задача с табами несколько проще, чем мы разбирали. Тут нет такой сложной анимации для кнопок табов, достаточно добавить плавность при наведении и, возможно, анимацию псевдоэлемента линии.</p>
<p>Анимация текста и картинки также добавляется по классу открытого таба <code>tab-content__item--active</code>. Не забываем добавлять обычную плавность перехода для самой кнопки <code>tab-content__link</code>.</p>
</section>
<section id="шаг-7-3" class="level3" data-number="4.9.7">
<h3 data-number="4.9.7">Шаг №7</h3>
<p>Анимация аккордеона самая простая: плавно меняем высоту блока с ответом. Можно не делать одновременное открытие только одного элемента. Анимация происходит за счёт переключения класса <code>faq__item--open</code>.</p>
<p>Важно не забыть про анимацию псевдоэлемента со стрелкой.</p>
</section>
<section id="шаг-8-2" class="level3" data-number="4.9.8">
<h3 data-number="4.9.8">Шаг №8</h3>
<p>Мы добавили все необходимые по заданию анимации.</p>
</section>
</div>
</section>
<section id="событие-прокрутки" class="level2" data-number="4.10">
<h2 data-number="4.10">4.10. Событие прокрутки</h2>
<div class="text-container text-container--module">
<p>JavaScript следит за всем, что происходит в окне браузера, в том числе за прокруткой. Мы можем сказать ему, что делать, если страницу прокрутили. Для этого будем слушать событие <code>scroll</code>: оно срабатывает каждый раз, когда страницу прокручивают, даже если её сдвинули всего на один пиксель.</p>
<p>Чтобы отслеживать прокрутку на сайте, добавим обработчик событий окну браузера.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="bu">window</span><span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&#39;scroll&#39;</span><span class="op">,</span> <span class="kw">function</span> () {</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>  <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="st">&#39;Страница прокручена&#39;</span>)<span class="op">;</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<p>Важно, чтобы все манипуляции с прокруткой выполнялись после того, как страница полностью отрисована. Для этого нужно слушать на документе событие <code>load</code> и в функцию-колбэк передавать всё, что нужно выполнить после.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="bu">document</span><span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&quot;load&quot;</span><span class="op">,</span> <span class="kw">function</span>() {</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">// манипуляции с прокруткой</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<p>Чтобы манипулировать прокруткой и местоположением элементов при ней, нужно познакомиться с системой координат страницы.</p>
<p>Отсчёт координаты элемента происходит относительно:</p>
<ol type="1">
<li>Окна браузера.</li>
<li>Всего документа.</li>
</ol>
<p>Начало отсчёта в обоих случаях ведётся из левого верхнего угла.</p>
<p>При открытии страницы, пока прокрутка не произошла, левый верхний угол области просмотра браузера совмещён с левым верхним углом документа. В этот момент системы координат совпадают. Пользователь видит верхнюю часть страницы, которая оказалась в области просмотра. Но далее есть продолжение документа, пока оно не видно и попадёт в область просмотра уже при прокрутке страницы.</p>
<figure>
<img src="../media/file76.svg" alt="Отсчёт координат" />
<figcaption aria-hidden="true">Отсчёт координат</figcaption>
</figure>
<p>Во время прокрутки координаты элементов меняются относительно окна, потому что они двигаются вверх или вниз. Относительно документа координаты остаются без изменений. Отметим, что такое поведение характерно для элементов с <code>position</code>: <code>static</code>, <code>relative</code> или <code>absolute</code>. Для типов позиционирования <code>fixed</code> и <code>sticky</code> поведение будет отличаться.</p>
</div>
</section>
<section id="на-какое-количество-пикселей-прокрутили-страницу" class="level2" data-number="4.11">
<h2 data-number="4.11">4.11. На какое количество пикселей прокрутили страницу</h2>
<div class="text-container text-container--module">
<p>Как узнать, на сколько пикселей пользователь прокрутил страницу сайта по вертикали? Достаточно просто. В этом нам поможет специальное свойство окна браузера — <code>pageYOffset</code>.</p>
<p>Допустим, мы находимся в самом верху документа. Тогда если мы введём:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="bu">window</span><span class="op">.</span><span class="at">pageYOffset</span>)<span class="op">;</span></span></code></pre></div>
<p>… то консоль выведет 0.</p>
<p>Если же мы решим прокрутить страницу, предположим, на 150px, то при вводе получим 150. Пролистаем на 500px, консоль выведет 500 — и так далее.</p>
<p>Ниже на иллюстрации показан пример страницы без прокрутки и с прокруткой в 200px.</p>
<figure>
<img src="../media/file77.svg" alt="pageYOffset" />
<figcaption aria-hidden="true">pageYOffset</figcaption>
</figure>
<p>Мы также можем узнать, на сколько пикселей пользователь прокрутил страницу по горизонтали. Для этого используем свойство <code>pageXOffset</code>.</p>
<p>Другое название свойства — <code>scrollX</code>:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="bu">window</span><span class="op">.</span><span class="at">pageXOffset</span> <span class="op">===</span> <span class="bu">window</span><span class="op">.</span><span class="at">scrollX</span><span class="op">;</span> <span class="co">// всегда верно</span></span></code></pre></div>
<p>Для кроссбраузерной совместимости используйте <code>window.pageXOffset</code> вместо <code>window.scrollX</code>, так как <code>window.scrollX</code> не поддерживается в IE9-11.</p>
</div>
</section>
<section id="размер-документа-и-области-просмотра" class="level2" data-number="4.12">
<h2 data-number="4.12">4.12. Размер документа и области просмотра</h2>
<div class="text-container text-container--module">
<p>Для работы с прокруткой нам часто требуется узнать полный размер документа и размер области просмотра. Эти данные мы будем использовать для разных ситуаций, их рассмотрим позднее.</p>
<section id="как-узнать-размер-документа" class="level3" data-number="4.12.1">
<h3 data-number="4.12.1">Как узнать размер документа</h3>
<p>Корневым элементом документа является тег <code>&lt;html&gt;</code>. Чтобы его найти, используется свойство <code>documentElement</code> для объекта <code>document</code>.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="bu">document</span><span class="op">.</span><span class="at">documentElement</span> <span class="co">// вернёт только для чтения &lt;html&gt; для HTML-документов</span></span></code></pre></div>
<p>Методы <code>offsetWidth</code> и <code>offsetHeight</code> возвращают ширину элемента, включая <code>border</code> и <code>padding</code>, но не включая <code>margin</code>.</p>
<figure>
<img src="../media/file78.png" alt="offsetWidth и offsetHeight" />
<figcaption aria-hidden="true">offsetWidth и offsetHeight</figcaption>
</figure>
<div class="sourceCode" id="cb30"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="bu">document</span><span class="op">.</span><span class="at">documentElement</span><span class="op">.</span><span class="at">offsetHeight</span>  <span class="co">// вернёт высоту документа</span></span></code></pre></div>
<p>Также есть методы <code>scrollHeight</code> и <code>scrollWidth</code>. Они возвращают реальный размер элемента, даже если его видно не полностью из-за полосы прокрутки.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="bu">document</span><span class="op">.</span><span class="at">documentElement</span><span class="op">.</span><span class="at">scrollHeight</span> <span class="co">// тоже вернёт высоту документа</span></span></code></pre></div>
<p>С помощью этих данных мы можем выполнить одну из типичных задач: сделать прилипающую шапку. Она появится после пролистывания страницы вниз на какое-то количество пикселей. Можно ориентироваться не только на конкретное число, но и, например, на высоту первого блока текста. После его прочтения шапка будет зафиксирована наверху страницы. К ней также можно добавить часть, появляющуюся при прокрутке наверх (backscroll — обратная прокрутка).</p>
<p>Чтобы реализовать такой функционал, нужно найти высоту первого блока и сравнивать высоту прокрутки с высотой блока. Когда высота прокрутки больше или равна высоте блока, добавляем шапке второй класс, допустим, <code>header--fixed</code>. Этот класс зафиксирует шапку наверху страницы:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.header--fixed</span> {</span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">width</span>: <span class="dv">100</span><span class="dt">%</span><span class="op">;</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">position</span>: <span class="dv">fixed</span><span class="op">;</span></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">top</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">left</span>: <span class="dv">0</span><span class="op">;</span></span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Чтобы понять, что страница прокручена вверх, введём переменную <code>delta</code>. В ней будем хранить разницу значений предыдущей и текущей прокрутки. Если <code>delta</code> меньше нуля, то страница прокручена вверх.</p>
<p>Изначально часть шапки, которая появляется при прокрутке вверх, не видно. Но когда высота прокрутки больше высоты блока и пользователь прокрутил страницу наверх, мы добавляем этой части шапки второй класс, который делает её видимой.</p>
<p><em>(см. 4.28. Фиксированная шапка с прокруткой вверх)</em></p>
</section>
<section id="как-узнать-размер-области-просмотра" class="level3" data-number="4.12.2">
<h3 data-number="4.12.2">Как узнать размер области просмотра</h3>
<p>В этом нам помогут свойства <code>clientWidth</code> и <code>clientHeight</code> для корневого элемента документа.</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="bu">document</span><span class="op">.</span><span class="at">documentElement</span><span class="op">.</span><span class="at">clientWidth</span> <span class="co">// вернёт ширину области просмотра без учёта ширины полосы прокрутки.</span></span></code></pre></div>
<p>С помощью таких данных мы можем создать простой индикатор выполнения (progress bar), который показывает, насколько мы пролистали страницу вниз. Когда пользователь открывает страницу, процент прочтения равен нулю, при пролистывании страницы до конца — 100%. По мере прокрутки индикатор показывает прогресс прочтения.</p>
<p><em>(см. 4.29. Прогресс бар)</em></p>
</section>
</div>
</section>
<section id="как-узнать-координаты-и-размер-элемента" class="level2" data-number="4.13">
<h2 data-number="4.13">4.13. Как узнать координаты и размер элемента</h2>
<div class="text-container text-container--module">
<p>Вычислить данные параметры относительно области просмотра несложно. Для этого есть метод <code>element.getBoundingClientRect()</code>. Значения могут быть дробными.</p>
<figure>
<img src="../media/file79.jpg" alt="getBoundingClientRect" />
<figcaption aria-hidden="true">getBoundingClientRect</figcaption>
</figure>
<p>Метод возвращает нам объект, содержащий несколько <code>read-only</code>-свойств:</p>
<ul>
<li><p>x и y — X и Y-координаты левого верхнего угла элемента относительно окна;</p></li>
<li><p>width и height — ширина и высота элемента с учётом рамок и внутренних отступов;</p></li>
<li><p>top и bottom — Y-координата верхней и нижней границы элемента;</p></li>
<li><p>left и right — X-координата левой и правой границы элемента.</p></li>
</ul>
<p>При этом <code>left = x</code>, а <code>top = y</code>.</p>
<p>Координаты правой и нижней границ элемента могут быть вычислены:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a>right <span class="op">=</span> x <span class="op">+</span> width</span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a>bottom <span class="op">=</span> y <span class="op">+</span> height</span></code></pre></div>
<p>Чтобы найти ширину элемента, можно использовать:</p>
<ul>
<li><p><code>element.getBoundingClientRect().width</code> — вернёт дробное значение ширины элемента, включая <code>padding</code> и <code>border</code>.</p></li>
<li><p><code>element.offsetWidth</code> — вернёт целочисленную ширину элемента, включая <code>padding</code> и <code>border</code>.</p></li>
<li><p><code>element.clientWidth</code> — вернёт целочисленную ширину элемента, включая <code>padding</code>, но не <code>border</code>, для строчных элементов вернёт <code>0</code>.</p></li>
</ul>
<p>То же самое для высоты. Рассмотрим пример:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.box</span> {</span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">height</span>: <span class="dv">50</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">padding</span>: <span class="dv">10</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">border</span>: <span class="dv">5</span><span class="dt">px</span> <span class="dv">solid</span> <span class="cn">red</span><span class="op">;</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<figure>
<img src="../media/file80.jpg" alt="box" />
<figcaption aria-hidden="true">box</figcaption>
</figure>
<p>Для этого элемента получим такой результат:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(box<span class="op">.</span><span class="at">offsetHeight</span>)<span class="op">;</span> <span class="co">// вернёт 80</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(box<span class="op">.</span><span class="fu">getBoundingClientRect</span>()<span class="op">.</span><span class="at">height</span>)<span class="op">;</span>  <span class="co">// вернёт 80</span></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(box<span class="op">.</span><span class="at">clientHeight</span>)<span class="op">;</span>  <span class="co">// вернёт 70</span></span></code></pre></div>
<p>Таким образом, <code>element.offsetWidth</code> равен <code>element.getBoundingClientRect().width</code>, но только в том случае, когда не применяются трансформации.</p>
<p>Рассмотрим пример с трансформацией масштаба:</p>
<pre><code>.box {
width: 100px; 
height: 100px;
transform: scale(0.5); 
}

box.getBoundingClientRect().width // вернёт 50 
box.offsetWidth // вернёт 100</code></pre>
<p>Ознакомиться с другими метриками элемента можно <a href="https://docs.microsoft.com/en-us/previous-versions/hh781509(v=vs.85)">в статье</a> или <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements">на MDN</a>.</p>
<p>В качестве примера рассмотрим демонстрацию вычисления положения элемента <code>.box</code> при прокрутке страницы:</p>
<p><em>(см. 4.30. Метод getBoundingClientRect)</em></p>
<p>Если мы знаем положение элемента при прокрутке, то мы можем анимировать его появление на экране, добавляя класс с анимацией при появлении элемента снизу области просмотра. Можно и убирать класс, когда элемент прокручен наверх за область просмотра.</p>
<p><em>(см. 4.31. Анимация появления элементов при прокрутке страницы)</em></p>
<p>Можно даже менять фоновый цвет страницы, добавляя <code>body</code> второй класс с определённым цветом при появлении нужного блока.</p>
<p>Можно не зависеть от появления каких-либо элементов и менять с каким-то шагом цвет по цветовому кругу. Для этого удобно воспользоваться <a href="https://ru.wikipedia.org/wiki/HSL">цветовой моделью HSL</a>, где первый параметр hue отвечает за тон цвета. Измеряется он в градусах от нуля до 360. Исходный жёлтый цвет имеет запись hsl (53deg 98% 65%), что равнозначно #fde74c или rgb (253, 233, 78). При прокрутке вниз тон увеличивается на <code>colorStep</code>, а при прокрутке наверх — уменьшается.</p>
<p>Реализацию обоих подходов посмотрите в шагах демо ниже:</p>
<p><em>(см. 4.32. Анимация смены цвета фона при прокрутке страницы)</em></p>
</div>
</section>
<section id="методы-окна-для-прокрутки-страницы" class="level2" data-number="4.14">
<h2 data-number="4.14">4.14. Методы окна для прокрутки страницы</h2>
<div class="text-container text-container--module">
<section id="методы-window.scroll-и-window.scrollto" class="level3" data-number="4.14.1">
<h3 data-number="4.14.1">Методы window.scroll () и window.scrollTo ()</h3>
<p>Оба метода делают одно и то же действие: позволяют прокрутить страницу до указанных координат:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="bu">window</span><span class="op">.</span><span class="fu">scrollTo</span>(Х<span class="op">,</span> Y)<span class="op">;</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="bu">window</span><span class="op">.</span><span class="fu">scroll</span>(Х<span class="op">,</span> Y)<span class="op">;</span></span></code></pre></div>
<p>Координата Х указывает, куда нужно прокрутить страницу по горизонтали, а координата Y — куда нужно прокрутить страницу по вертикали. Когда браузер выполнит инструкцию, указанная точка окажется в левом верхнем углу окна. Координаты задаются в пикселях, но указывать единицы измерения не нужно:</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Прокрутит страницу на 100px вправо и на 50px вниз</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a><span class="bu">window</span><span class="op">.</span><span class="fu">scrollTo</span>(<span class="dv">100</span><span class="op">,</span> <span class="dv">50</span>)<span class="op">;</span></span></code></pre></div>
<figure>
<img src="../media/file81.svg" alt="scrollTo" />
<figcaption aria-hidden="true">scrollTo</figcaption>
</figure>
<p>Если переданные координаты указывают на положение за пределами документа, браузер прокрутит страницу так далеко, как сможет, но увеличивать страницу не будет. Если страница помещается в окно целиком и полосы прокрутки нет, то браузер проигнорирует эту инструкцию.</p>
</section>
<section id="метод-window.scrollby" class="level3" data-number="4.14.2">
<h3 data-number="4.14.2">Метод window.scrollBy ()</h3>
<p>Этот метод позволяет прокрутить страницу на указанное количество пикселей.</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="bu">window</span><span class="op">.</span><span class="fu">scrollBy</span>(X<span class="op">,</span> Y)<span class="op">;</span></span></code></pre></div>
<p>Координата X показывает смещение по горизонтали, а Y — по вертикали (помним, что смещение задаётся в пикселях). Если значение больше нуля, значит, страница будет прокручена вправо и вниз. Если меньше — влево и вверх.</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Прокрутка на один экран вертикально вниз.</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a><span class="bu">window</span><span class="op">.</span><span class="fu">scrollBy</span>(<span class="dv">0</span><span class="op">,</span> <span class="bu">document</span><span class="op">.</span><span class="at">documentElement</span><span class="op">.</span><span class="at">clientHeight</span>)<span class="op">;</span></span></code></pre></div>
<p>Посмотрите небольшое демо, чтобы увидеть отличие между методами <code>scrollTo</code> и <code>scrollBy</code>. Нажатие на кнопку scrollBy можно делать многократно, таким образом «шагая» по странице ниже. Нажатие на кнопку scroll / scrollTo срабатывает один раз.</p>
<p><em>(см. 4.33. Методы прокрутки страницы)</em></p>
</section>
<section id="плавность-прокрутки" class="level3" data-number="4.14.3">
<h3 data-number="4.14.3">Плавность прокрутки</h3>
<p>По умолчанию автоматическая прокрутка в браузерах происходит мгновенно, скачком. Чтобы сделать её более плавной, можно использовать CSS-свойство <code>scroll-behavior</code> со значением <code>smooth</code>. Подробнее об этом свойстве вы можете узнать <a href="https://drafts.csswg.org/cssom-view/#propdef-scroll-behavior">из спецификации</a>. На начало 2022 года это свойство не поддерживается в Safari 15.2. Однако, судя по всему, оно <a href="https://caniuse.com/?search=scroll-behavior">будет добавлено</a> при ближайшем обновлении.</p>
<p>Можно настроить и сам метод, описав объект с тремя параметрами:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a><span class="bu">window</span><span class="op">.</span><span class="fu">scrollTo</span>({</span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a>        <span class="dt">top</span><span class="op">:</span> <span class="dv">100</span><span class="op">,</span></span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a>        <span class="dt">left</span><span class="op">:</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">behavior</span><span class="op">:</span> <span class="st">&quot;smooth&quot;</span></span>
<span id="cb42-5"><a href="#cb42-5" aria-hidden="true" tabindex="-1"></a>    })<span class="op">;</span></span></code></pre></div>
<p>или</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="bu">window</span><span class="op">.</span><span class="fu">scrollBy</span>({</span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a>        <span class="dt">top</span><span class="op">:</span> <span class="dv">100</span><span class="op">,</span></span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a>        <span class="dt">left</span><span class="op">:</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">behavior</span><span class="op">:</span> <span class="st">&quot;smooth&quot;</span></span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true" tabindex="-1"></a>    })<span class="op">;</span></span></code></pre></div>
<p>Где <code>top</code> — это то же, что и y-координата, <code>left</code> — то же, что и x-координата, а <code>behavior</code> — это строка, которая содержит <code>smooth</code>, <code>instant</code> либо <code>auto</code>. По умолчанию стоит <code>auto</code>.</p>
<p>На начало 2022 года плавность прокрутки не поддерживается в IE 11, Safari 15.1, а также в Safari и Google Chrome в IOS 15. Вместо этого можно использовать упомянутое выше CSS-свойство <code>scroll-behavior</code>.</p>
</section>
</div>
</section>
<section id="методы-элементов-для-прокрутки-страницы" class="level2" data-number="4.15">
<h2 data-number="4.15">4.15. Методы элементов для прокрутки страницы</h2>
<div class="text-container text-container--module">
<p>Для элемента работают те же методы, что и у <code>window</code>, только прокрутка срабатывает относительно координат внутри этого элемента.</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Прокрутит element на 100px вправо и на 50px вниз</span></span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true" tabindex="-1"></a>element<span class="op">.</span><span class="fu">scrollTo</span>(<span class="dv">100</span><span class="op">,</span> <span class="dv">50</span>)<span class="op">;</span></span>
<span id="cb44-3"><a href="#cb44-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb44-4"><a href="#cb44-4" aria-hidden="true" tabindex="-1"></a><span class="co">// Прокрутит element на 100px вниз</span></span>
<span id="cb44-5"><a href="#cb44-5" aria-hidden="true" tabindex="-1"></a>element<span class="op">.</span><span class="fu">scrollBy</span>(<span class="dv">0</span><span class="op">,</span> <span class="dv">100</span><span class="er">px</span>)<span class="op">;</span></span></code></pre></div>
<p>Отличным методом является <code>scrollIntoView</code>.</p>
<section id="метод-element.scrollintoview" class="level3" data-number="4.15.1">
<h3 data-number="4.15.1">Метод element.scrollIntoView ()</h3>
<p>Метод <code>element.scrollIntoView()</code> прокручивает текущий контейнер родителя элемента таким образом, чтобы пользователь видел элемент, на котором был вызван этот метод.</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a>element<span class="op">.</span><span class="fu">scrollIntoView</span>()<span class="op">;</span></span></code></pre></div>
<p>По умолчанию прокрутка резкая, а элемент оказывается в левом верхнем углу страницы. Однако мы можем перенастроить это поведение. Для этого нужно передать в метод объект с настройками <code>scrollIntoViewOptions</code>:</p>
<ul>
<li><code>behavior</code> — отвечает за плавность прокрутки, может принимать два значения: <code>auto</code> (стоит по умолчанию) или <code>smooth</code>.</li>
<li><code>block</code> — отвечает за вертикальное выравнивание, может принимать четыре значения: <code>start</code> (стоит по умолчанию), <code>center</code>, <code>end</code> или <code>nearest</code>.</li>
<li><code>inline</code> — отвечает за горизонтальное выравнивание, он может принимать четыре значения: <code>start</code>, <code>center</code>, <code>end</code> или <code>nearest</code> (стоит по умолчанию).</li>
</ul>
<div class="sourceCode" id="cb46"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true" tabindex="-1"></a>btn<span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&#39;click&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true" tabindex="-1"></a>    element<span class="op">.</span><span class="fu">scrollIntoView</span>({</span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true" tabindex="-1"></a>        <span class="dt">block</span><span class="op">:</span> <span class="st">&quot;center&quot;</span><span class="op">,</span> </span>
<span id="cb46-4"><a href="#cb46-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">behavior</span><span class="op">:</span> <span class="st">&quot;smooth&quot;</span></span>
<span id="cb46-5"><a href="#cb46-5" aria-hidden="true" tabindex="-1"></a>    })<span class="op">;</span></span>
<span id="cb46-6"><a href="#cb46-6" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<p>Область может не точно прокручиваться, если после элемента остаётся мало контента.</p>
<p>Для повышения производительности можно использовать функцию <code>throttle</code>, подробнее о ней можно прочитать <a href="https://doka.guide/js/throttle/">здесь</a>.</p>
</section>
</div>
</section>
<section id="событие-wheel-и-горизонтальная-прокрутка" class="level2" data-number="4.16">
<h2 data-number="4.16">4.16. Событие wheel и горизонтальная прокрутка</h2>
<div class="text-container text-container--module">
<p>Как мы уже знаем, событие <code>scroll</code> срабатывает, когда происходит прокрутка c помощью колёсика мыши, кнопок клавиатуры или с помощью полосы прокрутки браузера. Кроме него есть ещё одно событие — <code>wheel</code>. Оно возникает только у мыши при прокрутке её колёсика. При этом необязательно, чтобы страница обладала полосами прокрутки, в отличие от <code>scroll</code>. Если страница может полностью помещаться на экране пользователя либо применено свойство <code>overflow: hidden</code>, тогда событие <code>scroll</code> не произойдёт, а <code>wheel</code> произойдёт.</p>
<p>У события <code>wheel</code> есть несколько полезных свойств:</p>
<ul>
<li><p><code>deltaMode</code> — позволяет узнать, в каких единицах будут измеряться величины прокрутки по осям X, Y, Z. Значение зависит от настроек пользователя и может быть <code>DOM_DELTA_PIXEL</code> (пиксели), <code>DOM_DELTA_LINE</code> (строки текста) или <code>DOM_DELTA_PAGE</code> (экраны).</p></li>
<li><p><code>deltaX</code>, <code>deltaY</code>, <code>deltaZ</code> — величины прокрутки по соответствующим осям. Их значение может отличаться в разных браузерах и при разных настройках операционной системы. В случае с осью Y, то есть вертикалью, за которую отвечает колесо мыши, значение <code>&gt;0</code> означает, что страница прокручена вниз, а <code>&lt;0</code> — что вверх.</p></li>
</ul>
<p>Событие колеса может сработать на любом элементе, для этого нужно добавить слушатель события и передать объект <code>Event</code>:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a>element<span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&#39;wheel&#39;</span><span class="op">,</span> <span class="kw">function</span>(<span class="bu">event</span>) {</span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true" tabindex="-1"></a>    evt<span class="op">.</span><span class="fu">preventDefault</span>()<span class="op">;</span></span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="bu">event</span><span class="op">.</span><span class="at">detlaY</span>)<span class="op">;</span> </span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<p>Чтобы событие <code>scroll</code> не генерировалось следом за <code>wheel</code>, не забываем <code>evt.preventDefault()</code>. И в функции-колбэке можно описать какой-либо набор действий.</p>
<p>Чаще всего важно, сделано ли движение колеса мыши вверх или вниз. Это можно определить по знаку <code>deltaY</code>. А далее с нужным шагом менять, например, положение элемента с помощью CSS-свойства <code>transform</code>.</p>
<p>Рассмотрим простой пример изменения масштаба элемента, когда на нём произошло событие колеса мыши.</p>
<p><em>(см. 4.35. Зум элемента при движении колеса мыши)</em></p>
<p>Аналогично этому примеру мы можем сделать горизонтальную прокрутку серии элементов, которые не помещаются по ширине в область просмотра. Чтобы не появлялась горизонтальная полоса прокрутки, используем <code>overflow: hidden</code>.</p>
<p><em>(см. 4.36. Горизонтальная полоса прокрутки)</em></p>
</div>
</section>
<section id="задание-2-2" class="level2" data-number="4.17">
<h2 data-number="4.17">4.17. Задание 2</h2>
<div class="text-container text-container--module">
<p>Пришло время поработать над второй страницей сайта Green House.</p>
<p>Добавим:</p>
<ul>
<li>индикатор выполнения (progress bar) при чтении страницы;</li>
<li>появление фиксированной шапки после прокрутки страницы на 400 и более пикселей;</li>
<li>появление под фиксированной шапкой блока «Акция» при обратной прокрутке;</li>
<li>плавное появление элементов, когда половина высоты элемента видна при прокрутке;</li>
<li>горизонтальную прокрутку блока с отзывами.</li>
</ul>
</div>
</section>
<section id="эталонное-решение-задания-8" class="level2" data-number="4.18">
<h2 data-number="4.18">4.18. Эталонное решение задания</h2>
<div class="text-container text-container--module">
<section id="шаг-1-40" class="level3" data-number="4.18.1">
<h3 data-number="4.18.1">Шаг №1</h3>
<p>Готовый пример эталонной реализации.</p>
<p>Разберём по шагам, как добавить анимацию элементам.</p>
</section>
<section id="шаг-2-24" class="level3" data-number="4.18.2">
<h3 data-number="4.18.2">Шаг №2</h3>
<p>Рассмотрим пошагово, как можно выполнить это задание.</p>
<p>Начнём с индикатора выполнения. Он уже есть в разметке и состоит из двух блоков. <code>progress-bar</code> — белый фоновый блок, <code>progress-bar__value</code> — меняющий размер зелёный блок.</p>
</section>
<section id="шаг-3-24" class="level3" data-number="4.18.3">
<h3 data-number="4.18.3">Шаг №3</h3>
<p>Весь индикатор выполнения позиционирован сверху страницы. У <code>progress-bar__value</code> будем менять значение <code>transform: scale()</code>, не забудем про плавность.</p>
</section>
<section id="шаг-4-18" class="level3" data-number="4.18.4">
<h3 data-number="4.18.4">Шаг №4</h3>
<p>В начале значение <code>scale</code> равно нулю, а при прокрутке будем его вычислять, код JS будет почти такой же, для удобства работы подключать будем модули.</p>
<p>Отлично, прогресс чтения виден.</p>
</section>
<section id="шаг-5-14" class="level3" data-number="4.18.5">
<h3 data-number="4.18.5">Шаг №5</h3>
<p>Далее добавим оформление фиксированной шапке.</p>
<p>Шапке будем добавлять класс <code>header--fixed</code>, не забываем сделать появление плавным за счёт анимации или перехода.</p>
</section>
<section id="шаг-6-5" class="level3" data-number="4.18.6">
<h3 data-number="4.18.6">Шаг №6</h3>
<p>Теперь добавим логику по аналогии с задачей из демо о фиксированной шапке.</p>
<p>Чтобы страница не «дёргалась» после позиционирования шапки, добавим <code>body</code> внутренний отступ на высоту этой шапки, так как нам не нужно привязываться к первому блоку.</p>
</section>
<section id="шаг-7-4" class="level3" data-number="4.18.7">
<h3 data-number="4.18.7">Шаг №7</h3>
<p>Теперь займёмся прокруткой вверх. Элементу <code>backscroll-header</code> будем добавлять класс <code>backscroll-header--show</code> при прокрутке наверх.</p>
</section>
<section id="шаг-8-3" class="level3" data-number="4.18.8">
<h3 data-number="4.18.8">Шаг №8</h3>
<p>Опишем анимацию появления в <code>backscroll-header--show</code>.</p>
<p>Готово, шапка и индикатор выполнения работают, как нам нужно.</p>
</section>
<section id="шаг-9-2" class="level3" data-number="4.18.9">
<h3 data-number="4.18.9">Шаг №9</h3>
<p>Теперь возьмёмся за плавное появление блоков «О компании». Так как в блоках картинка и текст меняются местами, то для второй группы был добавлен класс-модификатор <code>content__block--inverted</code>.</p>
</section>
<section id="шаг-10-2" class="level3" data-number="4.18.10">
<h3 data-number="4.18.10">Шаг №10</h3>
<p>Для анимации появления добавим ещё один класс-модификатор для текстового блока <code>content__text-wrap--animated</code> и картинки <code>content__image--animated</code>. Укажем состояния «до» и «после». Так как у элемента с <code>content__block--inverted</code> расположение другое, то допишем эту ситуацию отдельно.</p>
</section>
<section id="шаг-11-1" class="level3" data-number="4.18.11">
<h3 data-number="4.18.11">Шаг №11</h3>
<p>Теперь добавим немного логики с помощью JavaScript, как мы делали в демо о прокрутке. Учтём, что блок должен появиться наполовину с помощью функции <code>isHalfVisible</code> и добавим класс с анимацией. Так как по заданию анимация появляется один раз, то ветку <code>else</code> не добавляем.</p>
<p>Готово!</p>
</section>
<section id="шаг-12-1" class="level3" data-number="4.18.12">
<h3 data-number="4.18.12">Шаг №12</h3>
<p>Теперь горизонтальная прокрутка, только индикатор выполнения нам уже не пригодится. Остальное аналогично примеру.</p>
</section>
<section id="шаг-13" class="level3" data-number="4.18.13">
<h3 data-number="4.18.13">Шаг №13</h3>
<p>Не забудем добавить в стили <code>overflow-x</code> для секции.</p>
<p>Вот теперь всё готово!</p>
</section>
</div>
</section>
<section id="тест-по-материалам-модуля-4" class="level2" data-number="4.19">
<h2 data-number="4.19">4.19. Тест по материалам модуля 4</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Какое событие помогает выполнить какие-то действия после того, как анимация перехода была проиграна до конца?</strong></li>
</ol>
<ul>
<li>transitionstart.</li>
<li>transitionrun.</li>
<li>transitioncancel.</li>
<li>transitionend.</li>
</ul>
<ol start="2" type="1">
<li><strong>Какое событие поможет определить начало анимации с помощью CSS-свойства animation?</strong></li>
</ol>
<ul>
<li>animationstart.</li>
<li>animationiteration.</li>
<li>animationcancel.</li>
<li>animationend.</li>
</ul>
<ol start="3" type="1">
<li><strong>Правильно ли записан код, который вызывает функцию someFunction после окончания анимации, добавляемой классом ‘animate’ к некоторому элементу?</strong></li>
</ol>
<div class="sourceCode" id="cb48"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true" tabindex="-1"></a>element<span class="op">.</span><span class="at">classList</span><span class="op">.</span><span class="fu">add</span>(<span class="st">&#39;animate&#39;</span>)<span class="op">;</span></span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true" tabindex="-1"></a>element<span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&#39;animationend&#39;</span><span class="op">,</span> someFunction)<span class="op">;</span></span></code></pre></div>
<ul>
<li>Да.</li>
<li>Нет.</li>
</ul>
<ol start="4" type="1">
<li><strong>Какие свойства хранят значение, на сколько была прокручена страница по вертикали?</strong></li>
</ol>
<ul>
<li>window.pageYOffset.</li>
<li>window.pageXOffset.</li>
<li>window.scrollY.</li>
<li>window.scrollHeight.</li>
</ul>
<ol start="5" type="1">
<li><strong>Как узнать высоту области просмотра окна браузера?</strong></li>
</ol>
<ul>
<li>document.documentElement.clientHeight.</li>
<li>document.documentElement.scrollHeight.</li>
<li>document.documentElement.offsetHeight.</li>
</ul>
<ol start="6" type="1">
<li><strong>Для страницы с большой публикацией какое значение будет больше?</strong></li>
</ol>
<ul>
<li>document.documentElement.clientHeight.</li>
<li>document.documentElement.scrollHeight.</li>
</ul>
<ol start="7" type="1">
<li><strong>Выберите все верные утверждения для свойств метода getBoundingClientRect.</strong></li>
</ol>
<ul>
<li>left равно x.</li>
<li>right равно left + width.</li>
<li>bottom равно y + height.</li>
<li>top равно y.</li>
</ul>
<ol start="8" type="1">
<li><strong>Какое значение будет максимальным для элемента с рамкой и внутренними отступами по всем четырём сторонам?</strong></li>
</ol>
<ul>
<li>element.offsetHeight.</li>
<li>element.clientHeight.</li>
</ul>
<ol start="9" type="1">
<li><strong>Страница только что открыта и ещё не прокручена вниз. Какой метод позволяет прокрутить страницу дальше всех по вертикали?</strong></li>
</ol>
<ul>
<li>window.scroll(300, 200).</li>
<li>window.scrollBy(300, 400).</li>
<li>window.scrollTo(200, 300).</li>
</ul>
<ol start="10" type="1">
<li><strong>Какое событие помогает обработать прокрутку колесом мыши, когда в браузере нет полос прокрутки?</strong></li>
</ol>
<ul>
<li>scroll.</li>
<li>wheel.</li>
</ul>
</div>
</section>
<section id="тест-по-материалам-модуля-4-ответы" class="level2" data-number="4.20">
<h2 data-number="4.20">4.19. Тест по материалам модуля 4 (Ответы)</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Какое событие помогает выполнить какие-то действия после того, как анимация перехода была проиграна до конца?</strong></li>
</ol>
<ul>
<li>transitionend.</li>
</ul>
<ol start="2" type="1">
<li><strong>Какое событие поможет определить начало анимации с помощью CSS-свойства animation?</strong></li>
</ol>
<ul>
<li>animationstart.</li>
</ul>
<ol start="3" type="1">
<li><strong>Правильно ли записан код, который вызывает функцию someFunction после окончания анимации, добавляемой классом ‘animate’ к некоторому элементу?</strong></li>
</ol>
<div class="sourceCode" id="cb49"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true" tabindex="-1"></a>element<span class="op">.</span><span class="at">classList</span><span class="op">.</span><span class="fu">add</span>(<span class="st">&#39;animate&#39;</span>)<span class="op">;</span></span>
<span id="cb49-2"><a href="#cb49-2" aria-hidden="true" tabindex="-1"></a>element<span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&#39;animationend&#39;</span><span class="op">,</span> someFunction)<span class="op">;</span></span></code></pre></div>
<ul>
<li>Да.</li>
</ul>
<ol start="4" type="1">
<li><strong>Какие свойства хранят значение, на сколько была прокручена страница по вертикали?</strong></li>
</ol>
<ul>
<li>window.pageYOffset.</li>
<li>window.scrollY.</li>
</ul>
<ol start="5" type="1">
<li><strong>Как узнать высоту области просмотра окна браузера?</strong></li>
</ol>
<ul>
<li>document.documentElement.clientHeight.</li>
</ul>
<ol start="6" type="1">
<li><strong>Для страницы с большой публикацией какое значение будет больше?</strong></li>
</ol>
<ul>
<li>document.documentElement.scrollHeight.</li>
</ul>
<ol start="7" type="1">
<li><strong>Выберите все верные утверждения для свойств метода getBoundingClientRect.</strong></li>
</ol>
<ul>
<li>left равно x.</li>
<li>right равно left + width.</li>
<li>bottom равно y + height.</li>
<li>top равно y.</li>
</ul>
<ol start="8" type="1">
<li><strong>Какое значение будет максимальным для элемента с рамкой и внутренними отступами по всем четырём сторонам?</strong></li>
</ol>
<ul>
<li>element.offsetHeight.</li>
</ul>
<ol start="9" type="1">
<li><strong>Страница только что открыта и ещё не прокручена вниз. Какой метод позволяет прокрутить страницу дальше всех по вертикали?</strong></li>
</ol>
<ul>
<li>window.scrollBy(300, 400).</li>
</ul>
<ol start="10" type="1">
<li><strong>Какое событие помогает обработать прокрутку колесом мыши, когда в браузере нет полос прокрутки?</strong></li>
</ol>
<ul>
<li>wheel.</li>
</ul>
</div>
</section>
<section id="анимация-плавного-появления-модального-окна" class="level2" data-number="4.21">
<h2 data-number="4.21">4.20. Анимация плавного появления модального окна</h2>
<div class="text-container text-container--module">
<section id="шаг-1-41" class="level3" data-number="4.21.1">
<h3 data-number="4.21.1">Шаг №1</h3>
<p>Анимация модального окна. Далее рассмотрим пошагово её создание.</p>
</section>
<section id="шаг-2-25" class="level3" data-number="4.21.2">
<h3 data-number="4.21.2">Шаг №2</h3>
<p>Рассмотрим исходное состояние: есть разметка и подготовлены стили. Для открытия и закрытия модального окна у него будет переключаться класс <code>.modal--open</code>.</p>
</section>
<section id="шаг-3-25" class="level3" data-number="4.21.3">
<h3 data-number="4.21.3">Шаг №3</h3>
<p>Допишем переключение классов: найдём кнопки и модальное окно, добавим слушатели событий кнопкам и напишем callback-функцию с переключением классов.</p>
<p>Отлично! Теперь окно открывается и закрывается. Можно добавить анимацию.</p>
</section>
<section id="шаг-4-19" class="level3" data-number="4.21.4">
<h3 data-number="4.21.4">Шаг №4</h3>
<p>Добавим переход для свойств <code>transform</code> и <code>opacity</code>, появление будет происходить 0,3 секунды, а закрытие быстрее — 0,1 секунды.</p>
<p>Готово! Модальное окно открывается с простой анимацией.</p>
</section>
</div>
</section>
<section id="анимация-появления-всплывающей-подсказки" class="level2" data-number="4.22">
<h2 data-number="4.22">4.21. Анимация появления всплывающей подсказки</h2>
<div class="text-container text-container--module">
<section id="шаг-1-42" class="level3" data-number="4.22.1">
<h3 data-number="4.22.1">Шаг №1</h3>
<p>Анимация всплывающей подсказки (tooltip). Далее пошагово рассмотрим её создание.</p>
</section>
<section id="шаг-2-26" class="level3" data-number="4.22.2">
<h3 data-number="4.22.2">Шаг №2</h3>
<p>В разметке у элемента с классом <code>has-tooltip</code> есть data-атрибут с текстом подсказки. Она будет появляться при клике на текст и скрываться при повторном клике.</p>
</section>
<section id="шаг-3-26" class="level3" data-number="4.22.3">
<h3 data-number="4.22.3">Шаг №3</h3>
<p>Чтобы подсказка была скрыта, ей задаётся прозрачность <code>opacity: 0</code>. <code>pointer-events</code> делает подсказку неуловимой для мыши, а <code>transform</code> задаёт небольшое смещение.</p>
</section>
<section id="шаг-4-20" class="level3" data-number="4.22.4">
<h3 data-number="4.22.4">Шаг №4</h3>
<p>За счёт второго класса <code>animated-tooltip</code> псевдоэлемент будет плавно появляться сверху вниз. Добавим свойства для этого перехода.</p>
</section>
<section id="шаг-5-15" class="level3" data-number="4.22.5">
<h3 data-number="4.22.5">Шаг №5</h3>
<p>Найдём все элементы с классом <code>has-tooltip</code> и для каждого добавим слушатель событий с колбэком переключения класса <code>animated-tooltip</code>.</p>
<p>Готово! Анимация работает для каждой всплывающей подсказки.</p>
</section>
</div>
</section>
<section id="усложнённая-анимация-открытия-модального-окна" class="level2" data-number="4.23">
<h2 data-number="4.23">4.22. Усложнённая анимация открытия модального окна</h2>
<div class="text-container text-container--module">
<section id="шаг-1-43" class="level3" data-number="4.23.1">
<h3 data-number="4.23.1">Шаг №1</h3>
<p>Усложнённая анимация открытия модального окна. Далее пошагово рассмотрим её создание.</p>
</section>
<section id="шаг-2-27" class="level3" data-number="4.23.2">
<h3 data-number="4.23.2">Шаг №2</h3>
<p>Рассмотрим пример чуть более интересного появления модального окна.</p>
<p>За затемнение отвечает элемент с классом <code>modal</code>, за анимируемое окно — элемент с классом <code>modal-wrapper</code>.</p>
</section>
<section id="шаг-3-27" class="level3" data-number="4.23.3">
<h3 data-number="4.23.3">Шаг №3</h3>
<p>За открытие и закрытие всего окна отвечает класс <code>modal--open</code>, который будет добавляться к <code>modal</code>.</p>
<p>За анимацию будут отвечать два дополнительных класса, <code>modal-in</code> и <code>modal-out</code>, с разными анимациями движения элемента. Они будут добавлены к <code>modal-wrap</code>.</p>
</section>
<section id="шаг-4-21" class="level3" data-number="4.23.4">
<h3 data-number="4.23.4">Шаг №4</h3>
<p>Найдём все элементы. Добавим кнопкам обработчики событий. На этот раз у кнопок будут разные колбэки, так как действия при открытии и закрытии будут разными.</p>
<p>Сами функции распишем отдельно.</p>
</section>
<section id="шаг-5-16" class="level3" data-number="4.23.5">
<h3 data-number="4.23.5">Шаг №5</h3>
<p>Как происходит открытие? Одновременно появляется затемнение и начинается анимация движения окна. Запишем это как смену классов у <code>modal</code> и <code>modalWindow</code>. И подпишемся на событие окончания анимации <code>modalWindow</code>. После её окончания выполним функцию <code>animateIn</code>. Распишем её на следующем шаге.</p>
</section>
<section id="шаг-6-6" class="level3" data-number="4.23.6">
<h3 data-number="4.23.6">Шаг №6</h3>
<p>По окончании анимации у <code>modalWindow</code> нужно удалить класс <code>modal-in</code> и отписаться от слушателя события.</p>
<p>Отлично! Анимация срабатывает, и класс с анимацией удаляется.</p>
</section>
<section id="шаг-7-5" class="level3" data-number="4.23.7">
<h3 data-number="4.23.7">Шаг №7</h3>
<p>В <code>modalCloseHandler</code> самым простым было бы убрать класс <code>modal--open</code> у <code>modal</code>. Но нам нужно сначала увидеть, как <code>modalWindow</code> уезжает вниз. Поэтому подпишемся на событие окончания анимации <code>modalWindow</code> и добавим класс <code>modal-out</code> с анимацией. Функцию <code>animateOut</code> распишем далее.</p>
</section>
<section id="шаг-8-4" class="level3" data-number="4.23.8">
<h3 data-number="4.23.8">Шаг №8</h3>
<p>Как только анимация закончится, удаляем класс <code>modal-out</code> у <code>modalWindow</code> и скрываем всё модальное окно вместе с затемнением, удаляя класс <code>modal--open</code> у <code>modal</code>. Отписываемся от события.</p>
<p>Готово!</p>
</section>
</div>
</section>
<section id="анимация-открытия-и-закрытия-меню-1" class="level2" data-number="4.24">
<h2 data-number="4.24">4.23. Анимация открытия и закрытия меню</h2>
<div class="text-container text-container--module">
<section id="шаг-1-44" class="level3" data-number="4.24.1">
<h3 data-number="4.24.1">Шаг №1</h3>
<p>Анимация открытия и закрытия меню. Далее пошагово рассмотрим её создание.</p>
</section>
<section id="шаг-2-28" class="level3" data-number="4.24.2">
<h3 data-number="4.24.2">Шаг №2</h3>
<p>Рассмотрим разметку. Весь экран занимает <code>header</code>, у которого есть две части:</p>
<ul>
<li>верхняя с логотипом, кнопкой меню и навигацией,</li>
<li>нижняя с приветственным заголовком.</li>
</ul>
<p>У верхней части есть класс <code>menu</code>, отвечающий за отображение меню. У него есть модификатор <code>menu--open</code>, который добавляется, когда меню открыто, и удаляется, когда закрыто. На него и будем ориентироваться.</p>
</section>
<section id="шаг-3-28" class="level3" data-number="4.24.3">
<h3 data-number="4.24.3">Шаг №3</h3>
<p>Добавим немного JavaScript для переключения класса <code>menu--open</code> при нажатии на кнопку «бургера».</p>
<p>Больше тут ничего не добавится. Переходим к работе со стилями.</p>
</section>
<section id="шаг-4-22" class="level3" data-number="4.24.4">
<h3 data-number="4.24.4">Шаг №4</h3>
<p>Для начала добавим открытие самого меню за счёт класса <code>.menu--open</code>. Сейчас меню скрыто, заменим <code>dispay: none</code> на анимацию открытия.</p>
<p>Отлично, теперь меню можно открыть с нужным эффектом, но не закрыть, ведь кнопка «бургера» оказалась под навигацией.</p>
</section>
<section id="шаг-5-17" class="level3" data-number="4.24.5">
<h3 data-number="4.24.5">Шаг №5</h3>
<p>Добавим для кнопки «бургера» и логотипа <code>z-index</code> больше, чем для <code>menu</code>, чтобы эти элементы оказались сверху.</p>
<p>Отдельно для кнопки поменяем цвет линий на белый, иначе их не видно.</p>
</section>
<section id="шаг-6-7" class="level3" data-number="4.24.6">
<h3 data-number="4.24.6">Шаг №6</h3>
<p>Теперь можем сделать анимацию линий «бургера». У нас четыре линии. Первая (верхняя) и четвёртая (нижняя) будут сжиматься. Вторая и третья расположены одинаково (это средние линии), они будут поворачиваться на 45 градусов в разные стороны. Чтобы анимация была плавной, не забываем добавить <code>transition</code>.</p>
</section>
<section id="шаг-7-6" class="level3" data-number="4.24.7">
<h3 data-number="4.24.7">Шаг №7</h3>
<p>Теперь добавим поочерёдное появление элементов внутри меню. Сначала их нужно скрыть, сделав прозрачными. Добавляем правила для появления.</p>
<p>Чтобы элементы появлялись по очереди, расставляем для них задержку с одинаковым шагом в 0,15 секунды. Если элементов будет больше трёх, указываем <code>(n+3)</code>, то есть для третьего, четвёртого, пятого и так далее.</p>
</section>
<section id="шаг-8-5" class="level3" data-number="4.24.8">
<h3 data-number="4.24.8">Шаг №8</h3>
<p>Обычно скрывать меню стоит быстрее, чем показывать. Поэтому не стоит делать обратную анимацию. Нужно только позаботиться о том, чтобы при скрытии не было видно, как пункты пропадают. Для этого скорректируем переход для трансформации, сбросив её анимацию при закрытии меню.</p>
<p>Готово!</p>
</section>
</div>
</section>
<section id="бесконечный-слайдер-изображений-1" class="level2" data-number="4.25">
<h2 data-number="4.25">4.24. Бесконечный слайдер изображений</h2>
<div class="text-container text-container--module">
<section id="шаг-1-45" class="level3" data-number="4.25.1">
<h3 data-number="4.25.1">Шаг №1</h3>
<p>Бесконечный слайдер изображений. Далее пошагово рассмотрим его создание.</p>
</section>
<section id="шаг-2-29" class="level3" data-number="4.25.2">
<h3 data-number="4.25.2">Шаг №2</h3>
<p>Рассмотрим задачу создания бесконечного слайдера изображений. Переход между слайдами будет с плавным изменением прозрачности.</p>
</section>
<section id="шаг-3-29" class="level3" data-number="4.25.3">
<h3 data-number="4.25.3">Шаг №3</h3>
<p>За анимацию будет отвечать класс слайда <code>slider-item--current</code>. Он будет добавляться к текущему слайду. Для него указываем переход прозрачности.</p>
</section>
<section id="шаг-4-23" class="level3" data-number="4.25.4">
<h3 data-number="4.25.4">Шаг №4</h3>
<p>Найдём все элементы и сохраним в переменные. Переменная <code>counter</code> будет счётчиком слайдов. Добавим кнопкам обработчики события клика.</p>
</section>
<section id="шаг-5-18" class="level3" data-number="4.25.5">
<h3 data-number="4.25.5">Шаг №5</h3>
<p>При клике на кнопку «Вперёд» у прошлого слайда убираем класс <code>slider-item--current</code>. Затем увеличиваем счётчик и находим номер текущего слайда. Добавляем класс <code>slider-item--current</code> на текущий слайд.</p>
<p>Чтобы слайдер был бесконечным, добавляем проверку счётчика, чтобы после последнего слайда в разметке снова шёл первый.</p>
</section>
<section id="шаг-6-8" class="level3" data-number="4.25.6">
<h3 data-number="4.25.6">Шаг №6</h3>
<p>То же самое делаем при клике на кнопку «Назад». Разница лишь в том, что счётчик уменьшается на единицу, а проверку делаем при переходе от первого слайда к последнему в разметке.</p>
<p>Слайдер плавно перелистывается в обе стороны.</p>
</section>
</div>
</section>
<section id="анимация-изображений-и-подписи-слайдера-1" class="level2" data-number="4.26">
<h2 data-number="4.26">4.25. Анимация изображений и подписи слайдера</h2>
<div class="text-container text-container--module">
<section id="шаг-1-46" class="level3" data-number="4.26.1">
<h3 data-number="4.26.1">Шаг №1</h3>
<p>Анимация изображений и подписи слайдера. Далее пошагово рассмотрим её создание.</p>
</section>
<section id="шаг-2-30" class="level3" data-number="4.26.2">
<h3 data-number="4.26.2">Шаг №2</h3>
<p>В карточке слайда добавился заголовок, состоящий из трёх строк <code>.slider-title-line</code>. Кнопкам будет добавляться состояние <code>disabled</code>, когда пользователь долистает до слайда с краю.</p>
</section>
<section id="шаг-3-30" class="level3" data-number="4.26.3">
<h3 data-number="4.26.3">Шаг №3</h3>
<p>Анимация будет добавляться к слайду и его элементам по классу <code>slider-item--current</code>. Сам слайд с картинкой будет выезжать справа налево за 0,5 секунды. А далее с небольшой задержкой и сдвигом появятся линии заголовка.</p>
</section>
<section id="шаг-4-24" class="level3" data-number="4.26.4">
<h3 data-number="4.26.4">Шаг №4</h3>
<p>Найдём все слайды, кнопки-переключатели. Определим счётчик <code>counter</code> и максимальное количество слайдов <code>maxStep</code>. Первому слайду добавим класс <code>slider-item--current</code>.</p>
<p>Кнопкам добавим слушатели событий клика. Колбэки напишем отдельными функциями. Они будут разные, так как действия при переключении вперёд и назад будут отличаться.</p>
</section>
<section id="шаг-5-19" class="level3" data-number="4.26.5">
<h3 data-number="4.26.5">Шаг №5</h3>
<p>Так как слайдер будет конечным, то кнопки «Вперёд» и «Назад» нужно будет блокировать, добавляя атрибут <code>disabled</code>. Для этого напишем две вспомогательные функции, которые будут принимать счётчик. Если текущий слайд первый, заблокируем кнопку «Назад». А если слайд последний, то кнопку «Вперёд».</p>
</section>
<section id="шаг-6-9" class="level3" data-number="4.26.6">
<h3 data-number="4.26.6">Шаг №6</h3>
<p>Убираем у текущего слайда класс <code>slider-item--current</code>. Чтобы слайд не уезжал направо и остался зафиксированным, добавим инлайн <code>transform: translate(0%)</code>.</p>
<p>Увеличиваем счётчик и проверяем, нужно ли блокировать кнопки.</p>
<p>Добавляем текущему слайду класс <code>slider-item--current</code>.</p>
<p>Отлично, анимация пролистывания вперёд готова.</p>
</section>
<section id="шаг-7-7" class="level3" data-number="4.26.7">
<h3 data-number="4.26.7">Шаг №7</h3>
<p>Теперь допишем пролистывание слайдера назад. У текущего слайда убираем класс <code>slider-item--current</code>. Уменьшаем счётчик на единицу, проверяем кнопки, добавляем класс <code>slider-item--current</code> текущему слайду, убираем инлайновые стили.</p>
<p>Отлично, анимация готова!</p>
</section>
</div>
</section>
<section id="аккордеон-с-поочерёдным-переключением-вкладок-1" class="level2" data-number="4.27">
<h2 data-number="4.27">4.26. Аккордеон с поочерёдным переключением вкладок</h2>
<div class="text-container text-container--module">
<section id="шаг-1-47" class="level3" data-number="4.27.1">
<h3 data-number="4.27.1">Шаг №1</h3>
<p>Аккордеон с поочерёдным переключением вкладок. Далее пошагово рассмотрим его создание.</p>
</section>
<section id="шаг-2-31" class="level3" data-number="4.27.2">
<h3 data-number="4.27.2">Шаг №2</h3>
<p>Рассмотрим пример аккордеона с поочерёдным переключением вкладок. Каждая вкладка состоит из кнопки-заголовка и открывающегося блока с каким-то контентом.</p>
</section>
<section id="шаг-3-31" class="level3" data-number="4.27.3">
<h3 data-number="4.27.3">Шаг №3</h3>
<p>Открытая вкладка будет иметь класс <code>accordeon__title--active</code>. По нему будет происходить анимация псевдоэлемента со стрелкой.</p>
<p>Для текста вкладки будет добавлен класс <code>accordeon__descr--visible</code>. Изначально высота вкладки равна нулю. Для анимации используется свойство <code>max-height</code>, так как значение <code>height: auto</code> не анимируется, ведь нет точного числа. При использовании <code>max-height</code> контент будет открыт ровно настолько, сколько текста будет во вкладке.</p>
</section>
<section id="шаг-4-25" class="level3" data-number="4.27.4">
<h3 data-number="4.27.4">Шаг №4</h3>
<p>Найдём все вкладки, для каждой добавим слушатель события клика.</p>
<p>В нём найдём открытую вкладку и её описание по вторым классам: <code>accordeon__title--active</code> и <code>accordeon__descr--visible</code>.</p>
</section>
<section id="шаг-5-20" class="level3" data-number="4.27.5">
<h3 data-number="4.27.5">Шаг №5</h3>
<p>Так как изначально открытых элементов нет, используем условия. В них убираем классы у открытого элемента.</p>
<p>Добавляем класс текущему элементу, по которому был сделан клик. Меняем инлайново высоту текстового описания вкладки, чтобы сработал переход.</p>
<p>Простая анимация аккордеона готова.</p>
</section>
</div>
</section>
<section id="табы-с-анимацией-переключения-1" class="level2" data-number="4.28">
<h2 data-number="4.28">4.27. Табы с анимацией переключения</h2>
<div class="text-container text-container--module">
<section id="шаг-1-48" class="level3" data-number="4.28.1">
<h3 data-number="4.28.1">Шаг №1</h3>
<p>Табы с анимацией переключения. Далее пошагово рассмотрим их создание.</p>
</section>
<section id="шаг-2-32" class="level3" data-number="4.28.2">
<h3 data-number="4.28.2">Шаг №2</h3>
<p>Табы состоят из блока кнопок-заголовков и блока контента каждой вкладки. Чтобы сопоставить вкладку контенту для кнопки добавим data-атрибут, а для блока с контентом — идентификатор.</p>
<p>Открытая вкладка имеет второй класс <code>tablinks-active</code>, а её контент — <code>tabcontent-active</code>, они будут добавляться при клике новым элементам.</p>
</section>
<section id="шаг-3-32" class="level3" data-number="4.28.3">
<h3 data-number="4.28.3">Шаг №3</h3>
<p>Добавим небольшую анимацию при наведении на кнопку вкладки. Используем псевдоэлемент <code>::before</code>, разворачивая его по размеру кнопки при наведении. Не забудем переопределить стили текста, чтобы он был хорошо виден.</p>
</section>
<section id="шаг-4-26" class="level3" data-number="4.28.4">
<h3 data-number="4.28.4">Шаг №4</h3>
<p>Добавим оформление активной кнопке, чтобы отличить её от других. Увеличим элемент по вертикали с помощью <code>scaleY</code> и добавим полосу с помощью того же псевдоэлемента <code>::before</code>.</p>
<p>Чтобы текст внутри кнопки не растягивался, добавим ему противоположную трансформацию. Такой приём — не всегда хорошая практика, ведь в общем случае не получится сделать так, чтобы во время анимации текст не трансформировался. Так как <code>timing-function</code> будет необратной к временной функции родителя, в процессе движения эти масштабирования не компенсируют друг друга.</p>
</section>
<section id="шаг-5-21" class="level3" data-number="4.28.5">
<h3 data-number="4.28.5">Шаг №5</h3>
<p>Напишем логику переключения вкладок, чтобы можно было удобнее «отладить» анимацию. Найдём все кнопки и контент вкладок, добавим слушатели события.</p>
<p>Получим из data-атрибута кнопки идентификатор блока контента.</p>
</section>
<section id="шаг-6-10" class="level3" data-number="4.28.6">
<h3 data-number="4.28.6">Шаг №6</h3>
<p>Уберём со всех кнопок и блоков с контентом вторые классы с <code>-active</code>. И добавим только для выбранной вкладки. Идентификатор блока контента находим с помощью переменной <code>country</code>.</p>
<p>Отлично, логика готова! Переключая табы, теперь можно видеть анимацию кнопок.</p>
</section>
<section id="шаг-7-8" class="level3" data-number="4.28.7">
<h3 data-number="4.28.7">Шаг №7</h3>
<p>Допишем анимацию для блоков контента. Она будет срабатывать каждый раз при открытии вкладки.</p>
<p>Отлично! Анимированные табы готовы.</p>
</section>
</div>
</section>
<section id="фиксированная-шапка-с-прокруткой-вверх" class="level2" data-number="4.29">
<h2 data-number="4.29">4.28. Фиксированная шапка с прокруткой вверх</h2>
<div class="text-container text-container--module">
<section id="шаг-1-49" class="level3" data-number="4.29.1">
<h3 data-number="4.29.1">Шаг №1</h3>
<p>Фиксированная шапка с прокруткой вверх появляется после первого блока текста.</p>
</section>
<section id="шаг-2-33" class="level3" data-number="4.29.2">
<h3 data-number="4.29.2">Шаг №2</h3>
<p>Решим следующую задачу: фиксированная шапка должна появляться, как только первый блок будет прокручен до конца. При прокрутке страницы вверх дополнительно появляется ещё одна шапка.</p>
<p>То есть в шапке есть две части: основная (<code>header__wrap</code>) и часть для прокрутки вверх (<code>header__backscrolled</code>).</p>
</section>
<section id="шаг-3-33" class="level3" data-number="4.29.3">
<h3 data-number="4.29.3">Шаг №3</h3>
<p>Для фиксированной шапки добавим второй класс <code>header--fixed</code>, который будет добавляться ко всему элементу <code>header</code>. Чтобы появление фиксированной шапки было плавным, добавим ей анимацию прозрачности. Вторая часть шапки тоже видна.</p>
</section>
<section id="шаг-4-27" class="level3" data-number="4.29.4">
<h3 data-number="4.29.4">Шаг №4</h3>
<p>Для второй части добавим анимацию перехода с помощью второго класса <code>header__backscrolled--show</code>. Он будет добавляться только при прокрутке вверх, делая эту часть видимой.</p>
</section>
<section id="шаг-5-22" class="level3" data-number="4.29.5">
<h3 data-number="4.29.5">Шаг №5</h3>
<p>Стили готовы, теперь напишем логику. Найдём элементы и запишем в переменные. Будем слушать событие прокрутки на всей странице.</p>
<p>Также нам понадобится высота первого блока <code>scrolledHeaderStart</code>.</p>
<p>Чтобы в дальнейшем вычислять, куда была сделана прокрутка (вверх или вниз), добавим переменную <code>scrollStarted</code>. В начале прокрутки нет, поэтому её значение равно нулю.</p>
</section>
<section id="шаг-6-11" class="level3" data-number="4.29.6">
<h3 data-number="4.29.6">Шаг №6</h3>
<p>При совершении прокрутки будем сохранять её величину в <code>scrollTop</code>.</p>
<p>Когда величина прокрутки будет равна высоте первого блока, нужно будет добавить класс <code>header--fixed</code> шапке, чтобы её зафиксировать. Если величина прокрутки меньше высоты первого экрана, то класс убирается.</p>
</section>
<section id="шаг-7-9" class="level3" data-number="4.29.7">
<h3 data-number="4.29.7">Шаг №7</h3>
<p>Когда шапка становится фиксированной, происходит смещение блоков. Чтобы этого избежать, добавим первому блоку отступ, равный высоте шапки.</p>
<p>Теперь сдвиг не видно.</p>
<p>Отлично, фиксированная шапка появляется так, как нужно.</p>
</section>
<section id="шаг-8-6" class="level3" data-number="4.29.8">
<h3 data-number="4.29.8">Шаг №8</h3>
<p>Теперь при прокрутке наверх будем показывать вторую часть шапки. Чтобы понять, что страницу прокрутили вверх, введём переменную <code>delta</code>. В ней будем хранить разницу значений предыдущей и текущей прокрутки. Если <code>delta</code> меньше нуля, прокрутка сделана вверх.</p>
</section>
<section id="шаг-9-3" class="level3" data-number="4.29.9">
<h3 data-number="4.29.9">Шаг №9</h3>
<p>Допишем условие: если высота прокрутки больше высоты первого блока и дельта меньше нуля, то показываем часть шапки, которая должна отображаться при прокрутке вверх. Иначе — скрываем её.</p>
<p>Готово! Фиксированная шапка с прокруткой вверх работает так, как нам нужно.</p>
</section>
</div>
</section>
<section id="прогресс-бар" class="level2" data-number="4.30">
<h2 data-number="4.30">4.29. Прогресс бар</h2>
<div class="text-container text-container--module">
<section id="шаг-1-50" class="level3" data-number="4.30.1">
<h3 data-number="4.30.1">Шаг №1</h3>
<p>Progress bar — индикатор выполнения.</p>
</section>
<section id="шаг-2-34" class="level3" data-number="4.30.2">
<h3 data-number="4.30.2">Шаг №2</h3>
<p>Решим следующую задачу: индикатор выполнения <code>.progressbar</code> зафиксирован наверху страницы и меняет значение ширины при прокрутке длинной страницы.</p>
</section>
<section id="шаг-3-34" class="level3" data-number="4.30.3">
<h3 data-number="4.30.3">Шаг №3</h3>
<p>С точки зрения производительности, менять ширину блока не рекомендуется. Будем применять трансформацию масштабирования по горизонтали <code>scaleX</code>. Чтобы изменения происходили плавно, добавим <code>transition</code>. Далее нам нужно будет вычислять значения scaleX <strong>от нуля до единицы</strong>.</p>
</section>
<section id="шаг-4-28" class="level3" data-number="4.30.4">
<h3 data-number="4.30.4">Шаг №4</h3>
<p>Найдём индикатор выполнения и будем слушать событие прокрутки страницы.</p>
</section>
<section id="шаг-5-23" class="level3" data-number="4.30.5">
<h3 data-number="4.30.5">Шаг №5</h3>
<p>Вычислим высоту области просмотра <code>windowHeight</code>.</p>
<p>При прокрутке страницы будем находить размер прокрутки <code>windowScroll</code>. Также будем вычислять коэффициент от нуля до единицы: сколько занимает прокрутка от высоты страницы. Значение округлим до двух знаков после запятой, более точными данными можно пренебречь. Полученное значение передадим в inline-стили для свойства <code>transform</code>.</p>
</section>
</div>
</section>
<section id="метод-getboundingclientrect" class="level2" data-number="4.31">
<h2 data-number="4.31">4.30. Метод getBoundingClientRect</h2>
<section id="шаг-1-51" class="level3 text-container text-container--module" data-number="4.31.1">
<h3 data-number="4.31.1">Шаг №1</h3>
<p>Прокрутка с <code>getBoundingClientRect</code>.</p>
</section>
</section>
<section id="анимация-появления-элементов-при-прокрутке-страницы" class="level2" data-number="4.32">
<h2 data-number="4.32">4.31. Анимация появления элементов при прокрутке страницы</h2>
<div class="text-container text-container--module">
<section id="шаг-1-52" class="level3" data-number="4.32.1">
<h3 data-number="4.32.1">Шаг №1</h3>
<p>Пример эталонной реализации.</p>
<p>Разберём по шагам, как добавить анимацию элементам.</p>
</section>
<section id="шаг-2-35" class="level3" data-number="4.32.2">
<h3 data-number="4.32.2">Шаг №2</h3>
<p>Сделаем несколько анимаций для появления элементов при прокрутке страницы. Первый экран пустой, остальные элементы расположены ниже. Анимировать будем элементы списка и два блока ниже.</p>
</section>
<section id="шаг-3-35" class="level3" data-number="4.32.3">
<h3 data-number="4.32.3">Шаг №3</h3>
<p>В стилях принцип тот же: с помощью второго класса и свойства <code>transition</code> описываем будущую анимацию. Пока второй класс не добавлен: элементы не видны.</p>
</section>
<section id="шаг-4-29" class="level3" data-number="4.32.4">
<h3 data-number="4.32.4">Шаг №4</h3>
<p>Дальше дело за JavaScript. Найдём все нужные элементы и запишем в переменные. Найдём высоту окна, будем её использовать далее для отслеживания положения элементов.</p>
<p>Добавляем слушатель события прокрутки страницы.</p>
</section>
<section id="шаг-5-24" class="level3" data-number="4.32.5">
<h3 data-number="4.32.5">Шаг №5</h3>
<p>Нам потребуется несколько вспомогательных функций. Первая определит, виден ли элемент частично, с помощью уже знакомого нам метода элемента <code>getBoundingClientRect</code>.</p>
<p>Когда верхняя координата плюс высота блока больше или равны нулю, элемент полностью или частично виден сверху страницы. Когда высота элемента плюс высота экрана больше или равны его нижней координате, блок частично или полностью виден снизу экрана.</p>
<p>Так как у <code>getBoundingClientRect</code> несколько методов, то условие можно было записать иначе.</p>
</section>
<section id="шаг-6-12" class="level3" data-number="4.32.6">
<h3 data-number="4.32.6">Шаг №6</h3>
<p>Добавим ещё одну вспомогательную функцию, определяющую, виден ли элемент полностью на экране. Таких функций можно написать ещё несколько, смотря когда мы хотим найти элемент и добавить ему анимацию.</p>
</section>
<section id="шаг-7-10" class="level3" data-number="4.32.7">
<h3 data-number="4.32.7">Шаг №7</h3>
<p>Теперь можно дописать функцию <code>scrolling</code> для появляющихся элементов списка. Переберём их в цикле и для каждого элемента списка, как только он станет частично виден, добавим класс с анимацией. Когда элемент не видно — убираем. Анимация работает.</p>
<p>Обратите внимание, что ветка <code>else</code> отвечает за повторное проигрывание анимации, если страница прокручивается вверх-вниз.</p>
</section>
<section id="шаг-8-7" class="level3" data-number="4.32.8">
<h3 data-number="4.32.8">Шаг №8</h3>
<p>Добавим анимацию для блока <code>firstBox</code>. Без ветки <code>else</code> анимация проигрывается при первом попадании элемента на экран и не повторяется далее. Прокрутите несколько раз страницу, чтобы увидеть результат.</p>
</section>
<section id="шаг-9-4" class="level3" data-number="4.32.9">
<h3 data-number="4.32.9">Шаг №9</h3>
<p>Можем добавлять анимацию, когда элемент стал полностью виден на экране. Ветка <code>else</code> помогает снова скрыть элемент, чтобы анимация проигралась повторно. Таким образом можно добавлять анимации появления для любых элементов.</p>
</section>
</div>
</section>
<section id="анимация-смены-цвета-фона-при-прокрутке-страницы" class="level2" data-number="4.33">
<h2 data-number="4.33">4.32. Анимация смены цвета фона при прокрутке страницы</h2>
<div class="text-container text-container--module">
<section id="шаг-1-53" class="level3" data-number="4.33.1">
<h3 data-number="4.33.1">Шаг №1</h3>
<p>Анимация смены цвета фона при прокрутке страницы может быть аналогична анимации появления элементов. В стилях определим исходное состояние <code>body</code> и второго класса с другими цветами. Чтобы смена цветов была плавной, не забываем <code>transition</code>.</p>
</section>
<section id="шаг-2-36" class="level3" data-number="4.33.2">
<h3 data-number="4.33.2">Шаг №2</h3>
<p>Воспользуемся теми же функциями, что и в прошлом демо. Ориентироваться можем на появление блоков <code>firstBox</code> и <code>secondBox</code>, меняя второй класс у тега <code>body</code> при их частичном или полном появлении.</p>
<p>Прокрутите страницу вниз, чтобы увидеть результат.</p>
</section>
<section id="шаг-3-36" class="level3" data-number="4.33.3">
<h3 data-number="4.33.3">Шаг №3</h3>
<p>Либо можно не зависеть от появления каких-либо элементов и менять с каким-то шагом цвет по цветовому кругу. Для этого удобно воспользоваться [цветовой моделью HSL][<a href="https://ru.wikipedia.org/wiki/HSL">https://ru.wikipedia.org/wiki/HSL</a>], где первый параметр <code>hue</code> отвечает за тон цвета. Измеряется в градусах от нуля до 360. Исходный жёлтый цвет имеет запись <strong>hsl (53deg 98% 65%)</strong>, что равнозначно #fde74c или rgb (253 233 78). При прокрутке вниз будем увеличивать тон на <code>colorStep</code>, а при прокрутке наверх — уменьшать. Если прокрутка равна нулю, то есть мы вернулись в верхнюю точку, цвет снова будет жёлтым.</p>
</section>
</div>
</section>
<section id="методы-прокрутки-страницы" class="level2" data-number="4.34">
<h2 data-number="4.34">4.33. Методы прокрутки страницы</h2>
<section id="шаг-1-54" class="level3 text-container text-container--module" data-number="4.34.1">
<h3 data-number="4.34.1">Шаг №1</h3>
<p>Пример применения методов <code>scrollTo</code> и <code>scrollBy</code>. Кликайте по кнопкам, чтобы понять, как эти методы работают.</p>
</section>
</section>
<section id="метод-прокрутки-страницы-scrollintoview" class="level2" data-number="4.35">
<h2 data-number="4.35">4.34. Метод прокрутки страницы scrollIntoView</h2>
<section id="шаг-1-55" class="level3 text-container text-container--module" data-number="4.35.1">
<h3 data-number="4.35.1">Шаг №1</h3>
<p>Метод <code>scrollIntoView</code> позволяет прокрутить страницу к элементу, чтобы он оказался наверху, в середине или внизу страницы. Проверьте это, кликая по каждой из кнопок.</p>
</section>
</section>
<section id="зум-элемента-при-движении-колеса-мыши" class="level2" data-number="4.36">
<h2 data-number="4.36">4.35. Зум элемента при движении колеса мыши</h2>
<section id="шаг-1-56" class="level3 text-container text-container--module" data-number="4.36.1">
<h3 data-number="4.36.1">Шаг №1</h3>
<p>Зум элемента <code>box</code> при движении колеса мыши внутри блока <code>wrap</code>. По знаку дельты <code>evt.deltaY</code> определяем направление и увеличиваем или уменьшаем значение масштаба <code>scale</code>.</p>
</section>
</section>
<section id="горизонтальная-полоса-прокрутки" class="level2" data-number="4.37">
<h2 data-number="4.37">4.36. Горизонтальная полоса прокрутки</h2>
<div class="text-container text-container--module">
<section id="шаг-1-57" class="level3" data-number="4.37.1">
<h3 data-number="4.37.1">Шаг №1</h3>
<p>В этом демо рассмотрим, как сделать горизонтальную прокрутку с помощью события <code>wheel</code>. В разметке есть серия элементов <code>scroller__item</code> внутри родителя <code>scroller__list</code>. Под ними добавим индикатор прокрутки <code>progress</code>. Атрибут <code>max</code> показывает максимальное значение, <code>value</code> — какова часть прогресса. Минимальное значение не указывается, оно равно нулю.</p>
</section>
<section id="шаг-2-37" class="level3" data-number="4.37.2">
<h3 data-number="4.37.2">Шаг №2</h3>
<p>В стилях уберём горизонтальную прокрутку у родителя <code>scroller</code>. Элементы будут прокручиваться за счёт трансформации сдвига по горизонтали для <code>scroller__list</code>. Остальное будет делать JavaScript.</p>
</section>
<section id="шаг-3-37" class="level3" data-number="4.37.3">
<h3 data-number="4.37.3">Шаг №3</h3>
<p>Найдём элементы и запишем в переменные. Найдём ширину экрана <code>sectionWidth</code> и ширину прокручиваемых элементов <code>listWidth</code>.</p>
<p>Введём дополнительные переменные: <code>progress</code> для значения <code>value</code> индикатора выполнения, <code>dist</code> для хранения значения смещения элементов, которое будем подставлять в <code>translateX()</code>, и шаг прокрутки <code>step</code> в 50px.</p>
<p>Сразу же рассчитаем максимальное значение прокрутки <code>maxDist</code> с запасом на один шаг, чтобы последний элемент был немного сдвинут от края контейнера, а не прижат к нему вплотную.</p>
</section>
<section id="шаг-4-30" class="level3" data-number="4.37.4">
<h3 data-number="4.37.4">Шаг №4</h3>
<p>Для секции добавим слушатель события прокрутки колеса мыши <code>wheel</code>, в колбэк <code>wheelHandler</code> передадим событие <code>evt</code>, выключим поведение по умолчанию, чтобы не происходило событие <code>scroll</code>.</p>
</section>
<section id="шаг-5-25" class="level3" data-number="4.37.5">
<h3 data-number="4.37.5">Шаг №5</h3>
<p>Так как весь блок с элементами будет смещаться налево, значение <code>dist</code> должно быть меньше либо равно нулю. Больше нуля значение быть не должно, так как это означает, что первый элемент сместится направо. Поэтому в условии учтём ещё несколько факторов:</p>
<ul>
<li><code>(evt.deltaY &gt; 0)</code> означает, что было сделано движение колеса мыши;</li>
<li><code>(listWidth + dist &gt; sectionWidth - step * 2)</code> означает, что мы не прокрутили элементы слишком далеко налево.</li>
</ul>
<p>Внутри функции будем в зависимости от направления прокрутки <code>evt.deltaY</code> увеличивать или уменьшать <code>dist</code> на шаг <code>step</code>.</p>
</section>
<section id="шаг-6-13" class="level3" data-number="4.37.6">
<h3 data-number="4.37.6">Шаг №6</h3>
<p>Теперь подставим значение сдвига в стили для элемента <code>list</code>.</p>
<p>Найдём новое значение прогресса <code>progress</code> в процентах и подставим в атрибут <code>value</code> нашего индикатора выполнения.</p>
<p>Готово! При прокрутке над секцией работает горизонтальная полоса прокрутки серии элементов.</p>
</section>
</div>
</section>
</section>
</body>
</html>
