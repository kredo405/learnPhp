<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ru-RU">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch002.xhtml</title>
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body epub:type="bodymatter">
<section id="css-анимации-по-ховеру" class="level1" data-number="2">
<h1 data-number="2">2. CSS анимации по ховеру</h1>
<div class="text-container text-container--module">
<p>Во втором разделе мы подробно рассмотрим CSS-свойство transition-timing-function и поговорим о часто встречающихся ошибках. После этого создадим более сложные анимационные переходы и сценарии анимации.</p>
</div>
<section id="свойство-transition-timing-function" class="level2" data-number="2.1">
<h2 data-number="2.1">2.1. Свойство transition-timing-function</h2>
<div class="text-container text-container--module">
<p>Свойство <code>transition-timing-function</code> задаёт временную функцию, благодаря которой мы можем менять скорость выполнения анимации относительно времени её выполнения. Она определяет, как переходят свойства элемента HTML от одного значения к другому, к примеру, ускоряя их изменение. Суть данного свойства в изменении и контроле скорости анимации.</p>
<section id="графики-временных-функций" class="level3" data-number="2.1.1">
<h3 data-number="2.1.1">Графики временных функций</h3>
<section id="гладкие-временные-функции" class="level4" data-number="2.1.1.1">
<h4 data-number="2.1.1.1">Гладкие временные функции</h4>
<p>В CSS есть встроенные ключевые значения:</p>
<ul>
<li><p><strong>ease</strong> — начинается медленно, потом быстро, в конце опять медленно.</p></li>
<li><p><strong>ease-in</strong> — начинается медленно и постепенно ускоряется.</p></li>
<li><p><strong>ease-out</strong> — начинается быстро и постепенно останавливается.</p></li>
<li><p><strong>ease-in-out</strong> — начинается медленно, потом быстро, в конце опять медленно. От <code>ease</code> отличается скоростью.</p></li>
<li><p><strong>linear</strong> — всегда одна и та же скорость.</p></li>
</ul>
<p>По умолчанию свойство <code>transition-timing-function</code> имеет значение <code>ease</code>.</p>
<p><em>(см. 2.11. Свойство transition-timing-function. Гладкие временные функции)</em></p>
<p>Кроме этих значений временная функция может быть описана с помощью кривых Безье cubic-bezier. Кривая Безье — это параметрическая кривая, которая используется для описания плавного изменения в декартовых системах координат.</p>
<p>Кривая Безье в CSS — это кубическая кривая Безье, то есть она описывается с помощью четырёх контрольных точек. Подробнее о кривых Безье в <a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%80%D0%B8%D0%B2%D0%B0%D1%8F_%D0%91%D0%B5%D0%B7%D1%8C%D0%B5">Википедии</a>.</p>
<p>Две из четырёх точек — фиксированные, они имеют координаты (0, 0) и (1, 1). Двум другим мы можем задать координаты <code>cubic-bezier(x1, y1, x2, y2)</code>.</p>
<figure>
<img src="../media/file51.png" alt="Координаты кривой Безье" />
<figcaption aria-hidden="true">Координаты кривой Безье</figcaption>
</figure>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function">Источник</a>.</p>
<p>Если отобразить кривую Безье как в декартовой системе координат, то на оси Х будет находиться шкала времени, а на оси Y — шкала прогресса. Исходя из этого, x1 и x2 могут принимать значения от нуля до единицы.</p>
<p>Со значениями y1 и y2 всё обстоит немного интереснее. Если передать в них значения больше единицы или меньше нуля — так, чтобы кривая выходила за пределы значения Y = 1, то можно получить эффект отскока или некоторой «резины» (bounce). То есть эффект, когда в процессе анимации прогресс будет больше своего конечного значения, после чего постепенно вернётся в конечное.</p>
<p>Например, для cubic-bezier (0.63,-1.15, 0.25, 1):</p>
<p><em>(см. 2.12. Свойство transition-timing-function. Кривая Безье)</em></p>
<p>На <a href="https://cubic-bezier.com">сайте</a> Леи Веру можно посмотреть отличия анимаций, к которым применяются разные кривые Безье, а также на визуальном редакторе реализовать и протестировать разные значения функции cubic-bezier и сравнить их со встроенными ключевыми значениями.</p>
<p>На <a href="https://easings.net">сайте</a> представлена коллекция стандартных функций (тайминг функций) и их реализаций в CSS в виде кубической кривой Безье.</p>
<p>Все стандартные значения <code>transition-timing-function</code> являются готовыми значениями функции cubic-bezier:</p>
<ul>
<li><p><code>ease</code> равносильно <code>cubic-bezier(0.25,0.1,0.25,1)</code>,</p></li>
<li><p><code>ease-in</code> равносильно <code>cubic-bezier(0.42,0,1,1)</code>,</p></li>
<li><p><code>ease-out</code> равносильно <code>cubic-bezier(0,0,0.58,1)</code>,</p></li>
<li><p><code>ease-in-out</code> равносильно <code>cubic-bezier(0.42,0,0.58,1)</code>,</p></li>
<li><p><code>linear</code> равносильно <code>cubic-bezier(0,0,1,1)</code>.</p></li>
</ul>
<figure>
<img src="../media/file52.png" alt="Кривая Безье" />
<figcaption aria-hidden="true">Кривая Безье</figcaption>
</figure>
</section>
<section id="ступенчатые-временные-функции" class="level4" data-number="2.1.1.2">
<h4 data-number="2.1.1.2">Ступенчатые временные функции</h4>
<p>Помимо встроенных ключевых значений и кривой Безье, в CSS есть и специальные функции:</p>
<ul>
<li><strong>steps (int, start|end)</strong> — указывает пошаговую функцию, у которой есть два параметра. Первый параметр обязательный — это целое положительное число. Он задаёт количество интервалов в нашей функции. Второй — необязательный, у него есть два значения: «start» или «end». Он указывает точку, в которой изменение значений происходит в пределах интервала. Если второй параметр не передан, то присваивается значение «end». Значение «start» реализует переход в начале каждого шага, а «end» — в конце каждого шага.</li>
</ul>
<figure>
<img src="../media/file53.png" alt="steps(4, end)" />
<figcaption aria-hidden="true">steps(4, end)</figcaption>
</figure>
<ul>
<li><strong>step-start</strong> — значение равносильно <code>steps(1, start)</code>. Свойство сразу принимает конечное значение.</li>
</ul>
<figure>
<img src="../media/file54.png" alt="steps(1, start)" />
<figcaption aria-hidden="true">steps(1, start)</figcaption>
</figure>
<ul>
<li><strong>step-end</strong> — значение равносильно <code>steps(1, end)</code>. Анимация всё заданное время находится в начальном состоянии, а затем сразу же переходит в конечное состояние.</li>
</ul>
<figure>
<img src="../media/file55.png" alt="steps(1, end)" />
<figcaption aria-hidden="true">steps(1, end)</figcaption>
</figure>
<p><em>(см. 2.13. Свойство transition-timing-function. Ступенчатые временные функции)</em></p>
<p>При работе с простыми переходами и анимацией вы, скорее всего, не будете использовать функции step.</p>
</section>
</section>
<section id="отладка-временных-функций-в-devtools" class="level3" data-number="2.1.2">
<h3 data-number="2.1.2">Отладка временных функций в DevTools</h3>
<p>Для просмотра, отладки и создания временных функций в Google Chrome есть встроенный конструктор. Его можно вызвать, нажав на иконку временной функции в отладчике.</p>
<figure>
<img src="../media/file56.png" alt="Встроенный конструктор" />
<figcaption aria-hidden="true">Встроенный конструктор</figcaption>
</figure>
<p>Важно помнить: при изменении значения <code>transition-timing-function</code> можно достичь разного восприятия анимации пользователем, хотя её продолжительность остаётся неизменной. Понимание кубический кривых Безье поможет вам при изучении CSS-анимации.</p>
</section>
</div>
</section>
<section id="частые-ошибки-при-создании-простых-анимаций" class="level2" data-number="2.2">
<h2 data-number="2.2">2.2. Частые ошибки при создании простых анимаций</h2>
<div class="text-container text-container--module">
<p>Даже опытные разработчики могут допускать ошибки при создании простых анимаций. Давайте разберём несколько примеров.</p>
<section id="свойство-transition-отсутствует-у-основного-селектора-элемента" class="level3" data-number="2.2.1">
<h3 data-number="2.2.1">Свойство transition отсутствует у основного селектора элемента</h3>
<p>Свойство <code>transition</code> должно быть указано как свойство именно HTML-элемента (если только это не предусмотрено дизайном). Мы не должны указывать его только в псевдоклассе или только в дополнительном классе, который добавляем с помощью JavaScript.</p>
<p>Неверно:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.link</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">1</span><span class="op">;</span> </span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="fu">.link</span><span class="in">:hover</span> {</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">0.6</span><span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: opacity <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span>  </span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Или:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.link</span> {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">1</span><span class="op">;</span> </span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="fu">.link.active</span> {</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">opacity</span>: <span class="dv">0.6</span><span class="op">;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: opacity <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span>  </span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Переход отработает только тогда, когда мы наведём курсор мыши на элемент или при помощи JS добавим дополнительный класс. Когда мы уберём курсор мыши с элемента или удалим дополнительный класс при помощи JS, его свойство (<code>opacity</code> в данном случае) мгновенно вернётся в исходное состояние, так как CSS-свойство <code>transition</code> было указанно в псевдоклассе или дополнительном классе соответственно.</p>
<p>В примере ниже для первой карточки <code>transition</code> указан только в псевдоклассе <code>:hover</code>. В тот момент, когда мы убираем курсор мыши, все свойства без задержек возвращаются в начальное состояние. Возникает ощущение, что что-то ломается.</p>
<figure>
<img src="../media/file57.gif" alt="Плохой пример наведения на карточку" />
<figcaption aria-hidden="true">Плохой пример наведения на карточку</figcaption>
</figure>
<p>Во второй карточке он указан в самом элементе, и анимация срабатывает и при наведении курсора, и при его отведении.</p>
<figure>
<img src="../media/file58.gif" alt="Хороший пример наведения на карточку" />
<figcaption aria-hidden="true">Хороший пример наведения на карточку</figcaption>
</figure>
<p>Посмотрите пошаговое демо с исправлением ошибки этого примера:</p>
<p><em>(см. 2.14. Ошибка отсутствия transition основного селектора элемента)</em></p>
</section>
<section id="делая-анимации-с-использованием-псевдокласса-hover-мы-не-должны-забывать-о-состоянии-focus" class="level3" data-number="2.2.2">
<h3 data-number="2.2.2">Делая анимации с использованием псевдокласса: hover, мы не должны забывать о состоянии: focus</h3>
<p>В HTML существует пять элементов, которые по умолчанию являются фокусируемыми:</p>
<ul>
<li><code>&lt;a&gt;</code> с атрибутом <code>href</code>,</li>
<li><code>&lt;button&gt;</code>,</li>
<li><code>&lt;input&gt;</code>,</li>
<li><code>&lt;select&gt;</code>,</li>
<li><code>&lt;textarea&gt;</code>.</li>
</ul>
<p>Но часто приходится анимировать элементы, у которых нет по умолчанию состояния фокуса. Яркий пример — карточки товаров. Например, при наведении в карточке показываются скрытые кнопки, ссылки или дополнительная информация. Пользователь, использующий мышку, их увидит. Но мы не должны забывать и о тех пользователях, которые пользуются клавиатурой — им тоже нужно попасть на этот элемент, нажимая Tab.</p>
<p>В данной задаче нам поможет <strong>tabindex</strong>. Он является глобальным атрибутом, который может применяться к большинству HTML-элементов с содержимым. <code>tabindex="0"</code> добавит элемент в последовательность выделения фокусом ввода по умолчанию, определяемую его положением в HTML-коде. Если вся информация доступна, не стоит без необходимости менять последовательность выделения фокусом.</p>
<p>Теперь на HTML-элемент мы сможем добавить псевдокласс <code>:focus-within</code>. Этот псевдокласс определяет стиль элемента, когда он сам или элементы внутри него получают фокус. Это отличается от <code>:focus</code>, который применяется непосредственно к самому элементу.</p>
<p>В примере ниже для первой карточки не указан <code>tabindex</code>. Для второй указан <code>tabindex</code> и псевдокласс <code>:focus</code>. Для третьей указан <code>tabindex</code> и псевдокласс <code>:focus-within</code>.</p>
<p><em>(см. 2.15. Ошибка анимирования элементов без состояния фокуса)</em></p>
<p>Мы всегда должны задумываться о тех тегах, которые мы используем в разметке. Например, с помощью CSS мы можем оформить тег <code>&lt;div&gt;</code> в виде кнопки. Мы даже можем заставить его вести себя так же, как кнопка, но это плохой пример. Лучше использовать предназначенный для этого тег <code>&lt;button&gt;</code>.</p>
</section>
<section id="анимации-с-изменением-размеров-или-положения-элемента-на-странице" class="level3" data-number="2.2.3">
<h3 data-number="2.2.3">Анимации с изменением размеров или положения элемента на странице</h3>
<p>Порой в анимациях мы меняем размеры элемента, изменяя CSS-свойства <code>border-radius</code>, <code>clip-path</code>, <code>transform: scale()</code>. Мы также можем менять положение элемента на странице, используя CSS-свойство <code>transform: translate()</code>. При таких манипуляциях с элементом нужно не забывать о том, что мы можем потерять состояние <code>:hover</code> из-за того, что элемент больше не будет находиться под курсором мыши. Это может вызвать неприятные для пользователя эффекты, как например, «дребезг»:</p>
<figure>
<img src="../media/file59.gif" alt="Дребезг при наведении" />
<figcaption aria-hidden="true">Дребезг при наведении</figcaption>
</figure>
<p>Такой эффект получается из-за того, что размер или местоположение элемента изменилось во время анимации. То есть элемент ушёл из-под курсора, и наведение больше не работает. Объект возвращается в исходное состояние, но снова оказывается под курсором, и <code>:hover</code> срабатывает. На экране курсор остаётся неподвижным, а элемент дёргается.</p>
<p>Чтобы такого не происходило, внутрь кнопки добавляется дополнительная обёртка в виде тега <code>&lt;span&gt;</code>. Она содержит всё оформление анимации. И когда пользователь наводит мышью на кнопку, меняется <code>&lt;span&gt;</code>, а сама кнопка остаётся неподвижной.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>  <span class="fu">.btn</span> span {</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">transform</span>: translateY(<span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">transition</span>: transform <span class="dv">0.3</span><span class="dt">s</span><span class="op">;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">.btn</span><span class="in">:hover</span> span {</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">transform</span>: translateY(<span class="dv">-10</span><span class="dt">px</span>)<span class="op">;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  }</span></code></pre></div>
<p>Либо вместо обёртки можно анимировать псевдоэлементы <code>::before</code> и <code>::after</code>. Посмотрите их применение на примерах ниже:</p>
<p><em>(см. 2.16. Ошибки при анимации размеров или положения элемента)</em></p>
</section>
<section id="влияние-анимации-элемента-на-окружающие-его-элементы" class="level3" data-number="2.2.4">
<h3 data-number="2.2.4">Влияние анимации элемента на окружающие его элементы</h3>
<p>Самые частые примеры, в которых допускают ошибки — поля форм или кнопки. У них может меняться толщина рамки при наведении или фокусе. Или рамка может изначально отсутствовать и добавляться при каком-то состоянии. Важно помнить, что толщина <code>border</code> влияет на размер элемента, поэтому для таких задач лучше использовать CSS-свойства <code>box-shadow</code> или <code>outline</code>. Либо можно изначально задавать <code>border</code> нужную толщину и линию прозрачного (transparent) цвета, а при наступлении состояния менять на нужный цвет.</p>
<p>Посмотрите пример с изменением толщины <code>border</code> и <code>box-shadow</code>:</p>
<p><em>(см. 2.17. Ошибка влияния анимации элемента на окружающие его элементы)</em></p>
</section>
</div>
</section>
<section id="примеры-анимаций-с-использованием-дочерних-элементов-и-псевдоэлементов" class="level2" data-number="2.3">
<h2 data-number="2.3">2.3. Примеры анимаций с использованием дочерних элементов и псевдоэлементов</h2>
<div class="text-container text-container--module">
<p>В этой главе мы посмотрим демонстрации анимаций с использованием дочерних элементов и псевдоэлементов. На примерах из первой главы покажем, как разнообразить анимацию, используя не только элемент-родитель, но и вложенные элементы и псевдоэлементы. Попробуем создать несложные сценарии анимации.</p>
<section id="анимации-кнопок-с-использованием-clip-path" class="level3" data-number="2.3.1">
<h3 data-number="2.3.1">Анимации кнопок с использованием clip-path</h3>
<p>Свойство <code>clip-path</code> создаёт ограниченную область — она определяет, какая часть элемента должна быть видимой, а какая — нет.</p>
<blockquote>
<p>В CSS 2.1 существует старое и довольно ограниченное свойство <code>clip</code>. Оно поддерживает только прямоугольные фигуры.</p>
</blockquote>
<p>В отличие от других свойств, при анимировании элементов с помощью <code>clip-path</code> мы должны указывать его начальное состояние.</p>
<p><em>(см. 2.18. Анимации кнопок с использованием clip-path)</em></p>
<p>Те же самые анимации мы можем сделать и с помощью <code>transform</code>. В данных анимациях мы будем использовать CSS-свойство <code>transform-origin</code>. Оно устанавливает координаты точки, относительно которой будет происходить трансформация элемента.</p>
<p><em>(см. 2.19. Анимации кнопок с использованием transform)</em></p>
<p>При обманчивой на первый взгляд схожести анимаций между ними есть одно существенное отличие: с помощью <code>clip-path</code> мы определяем видимую область блока, а с помощью <code>transform</code> можем менять размер <code>scale()</code>, положение <code>translate()</code> и так далее, но не можем ограничить область видимости.</p>
<p>В зависимости от того, какую задачу перед нами поставил дизайнер, мы выбираем инструменты для её выполнения. И ещё раз напоминаем вам о том, что важно помнить о доступности. В обоих блоках у нас установлен <code>tabindex="0"</code>, мы используем <code>focus-within</code>.</p>
<p><em>(см. 2.20. Сравнение анимации карточек с использованием clip-path и transform)</em></p>
<p>Помимо примеров выше, с помощью <code>clip-path</code> мы можем добиваться и других интересных эффектов.</p>
<p><em>(см. 2.21. Анимация карточки с использованием clip-path: circle())</em></p>
<p>На <a href="https://bennettfeely.com/clippy/">сайте</a> вы можете самостоятельно поэкспериментировать со всеми возможностями <code>clip-path</code>.</p>
<p>А вот ещё несколько примеров кнопок, с которыми вы можете столкнуться на практике.</p>
<p><em>(см. 2.22. Усложнённые анимации кнопок с использованием transform)</em></p>
<p>Подчёркивание кнопок и ссылок можно сделать немного интереснее:</p>
<p><em>(см. 2.23. Усложнённая анимация карточки товара инструментов)</em></p>
<p>А теперь попробуем сделать более интересные анимации с карточкой товара из первого раздела:</p>
<p><em>(см. 2.24. Анимация подчёркивания кнопок и ссылок)</em></p>
</section>
</div>
</section>
<section id="задание-1-1" class="level2" data-number="2.4">
<h2 data-number="2.4">2.4. Задание 1</h2>
<div class="text-container text-container--module">
<p>Вам прислали вёрстку карточек товара магазина обуви. Нужно добавить анимацию при наведении, в которой фоновый цвет карточки будет меняться на цвет круга внутри неё. Добавить наведение на кнопку. Анимации должны быть плавными.</p>
<p>Возможный итоговый вариант:</p>
<figure>
<img src="../media/file60.gif" alt="Эталонное решение задания второго модуля" />
<figcaption aria-hidden="true">Эталонное решение задания второго модуля</figcaption>
</figure>
</div>
</section>
<section id="эталонное-решение-задания-3" class="level2" data-number="2.5">
<h2 data-number="2.5">2.5. Эталонное решение задания</h2>
<div class="text-container text-container--module">
<section id="шаг-1-13" class="level3" data-number="2.5.1">
<h3 data-number="2.5.1">Шаг №1</h3>
<p>Результат выполнения задания. Рассмотрим его пошагово.</p>
</section>
<section id="шаг-2-5" class="level3" data-number="2.5.2">
<h3 data-number="2.5.2">Шаг №2</h3>
<p>В этой анимации участвуют три объекта:</p>
<ul>
<li>цветной круг, созданный с помощью псевдоэлемента <code>.shoes-card__img::before</code>;</li>
<li>картинка товара <code>.shoes-card__img img</code>;</li>
<li>кнопка «Купить» <code>.shoes-card__buy-btn</code>.</li>
</ul>
</section>
<section id="шаг-3-5" class="level3" data-number="2.5.3">
<h3 data-number="2.5.3">Шаг №3</h3>
<p>При наведении на карточку круг увеличивается в размере, заполняя её цветом, товар поворачивается на 25 градусов, а кнопка меняет фоновый цвет. Плюс при наведении на кнопку у неё появляется тень.</p>
<p>Допишем эти правила. Наведения работают верно, следующим шагом нужно дописать переходы.</p>
</section>
<section id="шаг-4-4" class="level3" data-number="2.5.4">
<h3 data-number="2.5.4">Шаг №4</h3>
<p>У круга и товара будет меняться свойство <code>transform</code>, у кнопки — тень и фоновый цвет. Достаточным будет время 0,3 секунды.</p>
<p>На этом можно было бы остановиться, но давайте ещё немного поработаем с переходами в следующем шаге.</p>
</section>
<section id="шаг-5-3" class="level3" data-number="2.5.5">
<h3 data-number="2.5.5">Шаг №5</h3>
<p>Сделаем время анимации круга и товара при наведении мыши больше (0,6 секунды), а при отведении — меньше (0,3 секунды).</p>
<p>При наведении на карточку фоновый цвет кнопки «Купить» будем менять с небольшой задержкой — за 0,2 секунды.</p>
<p>Готово!</p>
</section>
</div>
</section>
<section id="задание-2-1" class="level2" data-number="2.6">
<h2 data-number="2.6">2.6. Задание 2</h2>
<div class="text-container text-container--module">
<p>В этом задании вам предстоит добавить анимации при наведении и фокусе для нескольких ссылок. Исходное состояние ссылок уже готово, его менять не нужно. А вот состояния наведения и фокуса вам нужно продумать самостоятельно. А также добавить плавность для анимаций.</p>
<p>Вот несколько подсказок, которые помогут вам в работе с элементами:</p>
<ol type="1">
<li><p>У первой ссылки при наведении и фокусе появляются два псевдоэлемента с символами «[» и «]». Используйте прозрачность и <code>transform: translateX()</code>.</p></li>
<li><p>У второй ссылки при наведении и фокусе снизу появляется псевдоэлемент с фоновым цветом #d88f0d. Используйте прозрачность и <code>transform: translateY()</code>.</p></li>
<li><p>У третьей ссылки используйте data-атрибут и псевдоэлемент, чтобы показать скрытый текст при наведении. Для смещения элементов используйте <code>clip-path</code> или <code>transform: translateY()</code>.</p></li>
<li><p>У четвёртой ссылки меняйте положение и прозрачность двух псевдоэлементов.</p></li>
<li><p>У пятой ссылки для создания обеих рамок используйте псевдоэлементы. Для анимации используйте прозрачность, <code>transform: translateY()</code> и <code>transform: translateX()</code>.</p></li>
</ol>
<p>Возможный итоговый вариант:</p>
<figure>
<img src="../media/file61.gif" alt="Эталонное решение задания" />
<figcaption aria-hidden="true">Эталонное решение задания</figcaption>
</figure>
</div>
</section>
<section id="эталонное-решение-задания-4" class="level2" data-number="2.7">
<h2 data-number="2.7">2.7. Эталонное решение задания</h2>
<div class="text-container text-container--module">
<section id="шаг-1-14" class="level3" data-number="2.7.1">
<h3 data-number="2.7.1">Шаг №1</h3>
<p>Эталонное решение. Далее рассмотрим шаги его создания.</p>
</section>
<section id="шаг-2-6" class="level3" data-number="2.7.2">
<h3 data-number="2.7.2">Шаг №2</h3>
<p>Создадим для первой ссылки два псевдоэлемента с символами «[» и «]». Изначально они полностью прозрачны и сдвинуты к тексту с помощью <code>translateX()</code>.</p>
<p>При наведении и фокусе псевдоэлементы становятся полностью непрозрачными и сдвигаются к сторонам ссылки.</p>
</section>
<section id="шаг-3-6" class="level3" data-number="2.7.3">
<h3 data-number="2.7.3">Шаг №3</h3>
<p>Для второй ссылки потребуется один позиционированный псевдоэлемент шириной 100%, высотой 4px и фоновым цветом #d88f0d. Изначально он полностью прозрачен и сдвинут ниже с помощью <code>translateY()</code>.</p>
<p>При наведении и фокусе псевдоэлемент становится полностью непрозрачным и сдвигается наверх.</p>
</section>
<section id="шаг-4-5" class="level3" data-number="2.7.4">
<h3 data-number="2.7.4">Шаг №4</h3>
<p>Для третьей ссылки потребуются дополнительная обёртка в виде тега <code>span</code> и data-атрибут <code>data-hover</code> для хранения появляющегося текста <code>hovered</code>. Этот текст будет позиционирован ниже <code>span</code>.</p>
<p>При наведении и фокусе <code>span</code> сдвигается наверх с помощью <code>transform: translateY</code>, текст псевдоэлемента становится видим.</p>
</section>
<section id="шаг-5-4" class="level3" data-number="2.7.5">
<h3 data-number="2.7.5">Шаг №5</h3>
<p>У четвёртой ссылки создадим два позиционированных псевдоэлемента шириной 45px, высотой 2px, фоновым цветом как у текста и прозрачностью 0,2. Изначально псевдоэлементы развёрнуты на 90 градусов и расположены вертикально.</p>
<p>При наведении и фокусе псевдоэлементы сдвигаются, поворачиваются и становятся непрозрачными.</p>
</section>
<section id="шаг-6" class="level3" data-number="2.7.6">
<h3 data-number="2.7.6">Шаг №6</h3>
<p>У пятой ссылки также есть два псевдоэлемента равного ей размера и с рамкой. У первого псевдоэлемента рамка тёмного цвета и изначально не смещена. У второго рамка цвета текста, а сам псевдоэлемент прозрачный и сдвинут по диагонали направо и вверх.</p>
<p>При наведении и фокусе первый псевдоэлемент уезжает по диагонали вниз и влево и становится прозрачным, а второй псевдоэлемент становится непрозрачным и занимает его место.</p>
</section>
</div>
</section>
<section id="задание-3-1" class="level2" data-number="2.8">
<h2 data-number="2.8">2.8. Задание 3</h2>
<div class="text-container text-container--module">
<p>В этом задании вам предстоит добавить анимации при наведении и фокусе для нескольких кнопок. Исходное состояние уже готово, его менять не нужно. А вот состояния наведения и фокуса вам нужно продумать самостоятельно. Также необходимо добавить плавность для анимаций.</p>
<p>Вот несколько подсказок, которые помогут вам в работе с элементами:</p>
<ol type="1">
<li><p>Для первой кнопки потребуется дополнительная обёртка и data-атрибут, который будет добавлен в псевдоэлемент. При наведении и фокусе обёртка и псевдоэлемент сдвигаются направо с помощью <code>transform: translateX</code>. Для фонового цвета псевдоэлемента используйте #d5e7fb.</p></li>
<li><p>У второй кнопки будет псевдоэлемент с фоновым цветом #d5e7fb. При наведении псевдоэлемент будет занимать 90% ширины кнопки, а при фокусе — 100%. Используйте <code>transform: scaleX</code> или <code>clip-path</code> и прозрачность.</p></li>
<li><p>У третьей кнопки псевдоэлемент меняет размер при изменении значения <code>transform: scaleY</code> или <code>clip-path</code>. А цвет текста меняется на белый.</p></li>
<li><p>У четвёртой кнопки два псевдоэлемента с цветами фона #9534F5 и #FD079B меняют размер при помощи <code>transform: scale(X, Y)</code> или <code>clip-path</code>. Цвет текста меняется на белый.</p></li>
<li><p>У пятой кнопки уже есть один псевдоэлемент с левой частью. Используйте второй псевдоэлемент для создания белого квадрата, повёрнутого на 45 градусов, чтобы создать стрелку. При наведении или фокусе на кнопке стрелка увеличивается в масштабе с помощью <code>transform: scale()</code>. Фоновый цвет меняется на #f58500.</p></li>
<li><p>Шестой кнопке потребуется дополнительная обёртка в виде тега <code>span</code> и псевдоэлемент со стрелкой. При наведении и фокусе <code>span</code> и псевдоэлемент вмещаются при помощи <code>transform: translateX</code>.</p></li>
</ol>
<p>Возможный итоговый вариант:</p>
<figure>
<img src="../media/file62.gif" alt="Эталонное решение задания" />
<figcaption aria-hidden="true">Эталонное решение задания</figcaption>
</figure>
</div>
</section>
<section id="эталонное-решение-задания-5" class="level2" data-number="2.9">
<h2 data-number="2.9">2.9. Эталонное решение задания</h2>
<div class="text-container text-container--module">
<section id="шаг-1-15" class="level3" data-number="2.9.1">
<h3 data-number="2.9.1">Шаг №1</h3>
<p>Эталонное решение. Далее рассмотрим шаги его создания.</p>
</section>
<section id="шаг-2-7" class="level3" data-number="2.9.2">
<h3 data-number="2.9.2">Шаг №2</h3>
<p>Для первой кнопки добавим дополнительную обёртку и data-атрибут <code>data-hover</code>. Создадим позиционированный псевдоэлемент <code>::before</code> с текстом data-атрибута.</p>
<p>При наведении и фокусе обёртка и псевдоэлемент сдвигаются направо с помощью <code>transform: translateX</code>.</p>
</section>
<section id="шаг-3-7" class="level3" data-number="2.9.3">
<h3 data-number="2.9.3">Шаг №3</h3>
<p>Второй кнопке добавим псевдоэлемент с фоновым цветом #d5e7fb. Изначально псевдоэлемент сжат к центру кнопки с помощью <code>transform: scaleX(0)</code> и прозрачен.</p>
<p>При наведении псевдоэлемент становится непрозрачным и занимает 90% ширины кнопки за счёт <code>transform: scaleX(90%)</code>. При фокусе — <code>transform: scaleX(100%)</code>.</p>
</section>
<section id="шаг-4-6" class="level3" data-number="2.9.4">
<h3 data-number="2.9.4">Шаг №4</h3>
<p>У третьей кнопки псевдоэлемент позиционирован и меняет масштаб с <code>transform: scaleY(0.15)</code> до <code>scaleY(1)</code> при наведении и фокусе. А цвет текста кнопки меняется на белый.</p>
</section>
<section id="шаг-5-5" class="level3" data-number="2.9.5">
<h3 data-number="2.9.5">Шаг №5</h3>
<p>У четвёртой кнопки есть два позиционированных псевдоэлемента высотой в половину кнопки. Оба сжаты при помощи <code>transform: scale(0.6, 0.1)</code>, но с разными точками трансформации <code>transform-origin</code>.</p>
<p>При наведении и фокусе псевдоэлементы меняют масштаб до <code>transform: scale(1, 1)</code>. Цвет текста меняется на белый.</p>
</section>
<section id="шаг-6-1" class="level3" data-number="2.9.6">
<h3 data-number="2.9.6">Шаг №6</h3>
<p>У пятой кнопки уже есть псевдоэлемент <code>::before</code> с левой частью. Добавим псевдоэлемент <code>::after</code> шириной и высотой 20px, получив квадрат. Повернём его на 45 градусов, сделав стрелку.</p>
<p>При наведении и фокусе увеличивается в масштабе с помощью <code>transform: scale(1.3)</code>. Фоновый цвет кнопки меняется на #f58500.</p>
</section>
<section id="шаг-7" class="level3" data-number="2.9.7">
<h3 data-number="2.9.7">Шаг №7</h3>
<p>Шестой кнопке потребуется дополнительная обёртка в виде тега <code>span</code>. Также добавим псевдоэлемент <code>::after</code> со стрелкой.</p>
<p>При наведении и фокусе <code>span</code> и псевдоэлемент вмещаются при помощи <code>transform: translateX()</code>.</p>
</section>
</div>
</section>
<section id="тест-по-материалам-модуля-2" class="level2" data-number="2.10">
<h2 data-number="2.10">2.10. Тест по материалам модуля 2</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Какое CSS-свойство помогает настроить изменение скорости выполнения анимации относительно её прогресса?</strong></li>
</ol>
<ul>
<li>transition-duration.</li>
<li>transition-timing-function.</li>
<li>transition-delay.</li>
</ul>
<ol start="2" type="1">
<li><strong>Какого стандартного значения временной функции не существует?</strong></li>
</ol>
<ul>
<li>ease-out.</li>
<li>step.</li>
<li>ease-in-out.</li>
<li>linear.</li>
<li>ease-out-in.</li>
</ul>
<ol start="3" type="1">
<li><strong>Какая из кривых Безье создаёт эффект отскока bounce?</strong></li>
</ol>
<ul>
<li>cubic-bezier(0.17,0.67,0.83,0.67).</li>
<li>cubic-bezier(0.25,0.67,0.98,0.09).</li>
<li>cubic-bezier(0.29,-1.38,0.67,1.56).</li>
<li>cubic-bezier(0.09,0.58,0.63,0.44).</li>
</ul>
<ol start="4" type="1">
<li><strong>Какой из примеров кода написан максимально правильно?</strong></li>
</ol>
<ul>
<li>Вариант 1.</li>
</ul>
<div class="sourceCode" id="cb4"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.button</span> {</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">background-color</span>: <span class="cn">purple</span><span class="op">;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: <span class="dv">0.5</span><span class="dt">s</span><span class="op">;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="fu">.button</span><span class="in">:hover</span> {</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">background-color</span>: <span class="cn">pink</span><span class="op">;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<ul>
<li>Вариант 2.</li>
</ul>
<div class="sourceCode" id="cb5"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.button</span> {</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">background-color</span>: <span class="cn">purple</span><span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: background-color <span class="dv">0.5</span><span class="dt">s</span> <span class="dv">linear</span><span class="op">;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="fu">.button</span><span class="in">:hover</span> {</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">background-color</span>: <span class="cn">pink</span><span class="op">;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: background-color <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">linear</span><span class="op">;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<ul>
<li>Вариант 3.</li>
</ul>
<div class="sourceCode" id="cb6"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.button</span> {</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">background-color</span>: <span class="cn">purple</span><span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="fu">.button</span><span class="in">:hover</span> {</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">background-color</span>: <span class="cn">pink</span><span class="op">;</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: background-color <span class="dv">0.5</span><span class="dt">s</span> <span class="dv">linear</span><span class="op">;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<ol start="5" type="1">
<li><strong>Какое значение атрибута поможет сделать нефокусируемый элемент фокусируемым и добавить его в последовательность выделения фокусом по порядку его расположения в коде?</strong></li>
</ol>
<ul>
<li>tabindex=“0”.</li>
<li>tabindex=“-1”.</li>
<li>tabindex=“5”.</li>
</ul>
<ol start="6" type="1">
<li><strong>Добавление какого свойства при наведении на элемент окажет влияние на окружающие элементы?</strong></li>
</ol>
<ul>
<li>outline.</li>
<li>border.</li>
<li>box-shadow.</li>
<li>Ни одно из перечисленных.</li>
</ul>
<ol start="7" type="1">
<li><strong>Какое свойство лучше всего подойдёт для анимирования движения элемента слева направо?</strong></li>
</ol>
<ul>
<li>margin.</li>
<li>position.</li>
<li>padding.</li>
<li>transform.</li>
</ul>
<ol start="8" type="1">
<li><strong>Какой псевдокласс помогает улучшить доступность и определить стиль элемента, когда вложенный в него элемент получает фокус?</strong></li>
</ol>
<ul>
<li>hover.</li>
<li>focus-in.</li>
<li>focus-within.</li>
<li>target.</li>
</ul>
</div>
</section>
<section id="тест-по-материалам-модуля-2-ответы" class="level2" data-number="2.11">
<h2 data-number="2.11">2.10. Тест по материалам модуля 2 (Ответы)</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Какое CSS-свойство помогает настроить изменение скорости выполнения анимации относительно её прогресса?</strong></li>
</ol>
<ul>
<li>transition-timing-function.</li>
</ul>
<ol start="2" type="1">
<li><strong>Какого стандартного значения временной функции не существует?</strong></li>
</ol>
<ul>
<li>ease-out-in.</li>
</ul>
<ol start="3" type="1">
<li><strong>Какая из кривых Безье создаёт эффект отскока bounce?</strong></li>
</ol>
<ul>
<li>cubic-bezier(0.29,-1.38,0.67,1.56).</li>
</ul>
<ol start="4" type="1">
<li><strong>Какой из примеров кода написан максимально правильно?</strong></li>
</ol>
<ul>
<li>Вариант 2.</li>
</ul>
<div class="sourceCode" id="cb7"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.button</span> {</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">background-color</span>: <span class="cn">purple</span><span class="op">;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: background-color <span class="dv">0.5</span><span class="dt">s</span> <span class="dv">linear</span><span class="op">;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="fu">.button</span><span class="in">:hover</span> {</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">background-color</span>: <span class="cn">pink</span><span class="op">;</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: background-color <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">linear</span><span class="op">;</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<ol start="5" type="1">
<li><strong>Какое значение атрибута поможет сделать нефокусируемый элемент фокусируемым и добавить его в последовательность выделения фокусом по порядку его расположения в коде?</strong></li>
</ol>
<ul>
<li>tabindex=“0”.</li>
</ul>
<ol start="6" type="1">
<li><strong>Добавление какого свойства при наведении на элемент окажет влияние на окружающие элементы?</strong></li>
</ol>
<ul>
<li>border.</li>
</ul>
<ol start="7" type="1">
<li><strong>Какое свойство лучше всего подойдёт для анимирования движения элемента слева направо?</strong></li>
</ol>
<ul>
<li>transform.</li>
</ul>
<ol start="8" type="1">
<li><strong>Какой псевдокласс помогает улучшить доступность и определить стиль элемента, когда вложенный в него элемент получает фокус?</strong></li>
</ol>
<ul>
<li>focus-within.</li>
</ul>
</div>
</section>
<section id="свойство-transition-timing-function.-гладкие-временные-функции" class="level2" data-number="2.12">
<h2 data-number="2.12">2.11. Свойство transition-timing-function. Гладкие временные функции</h2>
<section id="шаг-1-16" class="level3 text-container text-container--module" data-number="2.12.1">
<h3 data-number="2.12.1">Шаг №1</h3>
<p>Гладкие временные функции.</p>
</section>
</section>
<section id="свойство-transition-timing-function.-кривая-безье" class="level2" data-number="2.13">
<h2 data-number="2.13">2.12. Свойство transition-timing-function. Кривая Безье</h2>
<section id="шаг-1-17" class="level3 text-container text-container--module" data-number="2.13.1">
<h3 data-number="2.13.1">Шаг №1</h3>
<p>Кривая Безье в CSS.</p>
</section>
</section>
<section id="свойство-transition-timing-function.-ступенчатые-временные-функции" class="level2" data-number="2.14">
<h2 data-number="2.14">2.13. Свойство transition-timing-function. Ступенчатые временные функции</h2>
<section id="шаг-1-18" class="level3 text-container text-container--module" data-number="2.14.1">
<h3 data-number="2.14.1">Шаг №1</h3>
<p>Ступенчатые временные функции.</p>
</section>
</section>
<section id="ошибка-отсутствия-transition-основного-селектора-элемента" class="level2" data-number="2.15">
<h2 data-number="2.15">2.14. Ошибка отсутствия transition основного селектора элемента</h2>
<div class="text-container text-container--module">
<section id="шаг-1-19" class="level3" data-number="2.15.1">
<h3 data-number="2.15.1">Шаг №1</h3>
<p>В изначальном состоянии уже есть вёрстка и оформление карточки. При наведении на неё появляется тень. При наведении на кнопку «Купить» свойства этой кнопки тоже меняются.</p>
<p>Задача: сделать анимацию плавной.</p>
<p>Рассмотрим две ситуации: с ошибкой и без. Начнём с ошибок.</p>
</section>
<section id="шаг-2-8" class="level3" data-number="2.15.2">
<h3 data-number="2.15.2">Шаг №2</h3>
<p>Частой ошибкой является указание <code>transition</code> только у состояния наведения.</p>
<p>Наведите на карточку и кнопку.</p>
<p>Как видите, наведение срабатывает верно, но когда курсор убирается, смена состояний происходит мгновенно.</p>
</section>
<section id="шаг-3-8" class="level3" data-number="2.15.3">
<h3 data-number="2.15.3">Шаг №3</h3>
<p>Исправим ситуацию, правильно разместив переход в исходном состоянии карточки и кнопки.</p>
<p>Наведите на карточку и кнопку.</p>
<p>Теперь плавность изменения свойств работает и при наведении, и когда мышь уходит с кнопки или карточки.</p>
</section>
</div>
</section>
<section id="ошибка-анимирования-элементов-без-состояния-фокуса" class="level2" data-number="2.16">
<h2 data-number="2.16">2.15. Ошибка анимирования элементов без состояния фокуса</h2>
<div class="text-container text-container--module">
<section id="шаг-1-20" class="level3" data-number="2.16.1">
<h3 data-number="2.16.1">Шаг №1</h3>
<p>Рассмотрим ситуацию с карточкой товара, для которой добавили анимации её частей при наведении.</p>
<p>Попробуйте кликнуть в любую область демо и перейти на карточку нажатием Tab. Или попробуйте добраться Табом до кнопки.</p>
<p>Не получилось. Далее будем исправлять эту ситуацию.</p>
</section>
<section id="шаг-2-9" class="level3" data-number="2.16.2">
<h3 data-number="2.16.2">Шаг №2</h3>
<p>Чтобы можно было попасть на карточку Табом, добавим ей в разметке <code>tabindex</code>. Теперь карточку можно выбрать, но анимация не сработает. Обратите внимание, что с клавиатуры до кнопки пока не добраться.</p>
<p>Чтобы анимация сработала, добавим карточке к уже готовому наведению состояние фокуса.</p>
<p>Отлично! Карточка находится Табом, анимация срабатывает. Но при переходе Табом на кнопку фокус карточки теряется, анимация возвращает её в исходное состояние. Кнопку не нажать.</p>
</section>
<section id="шаг-3-9" class="level3" data-number="2.16.3">
<h3 data-number="2.16.3">Шаг №3</h3>
<p>Добавим <code>:focus-within</code> к уже имеющимся состояниям. Теперь можно «дотянуться» Табом и до кнопки, всё работает верно!</p>
</section>
</div>
</section>
<section id="ошибки-при-анимации-размеров-или-положения-элемента" class="level2" data-number="2.17">
<h2 data-number="2.17">2.16. Ошибки при анимации размеров или положения элемента</h2>
<section id="шаг-1-21" class="level3 text-container text-container--module" data-number="2.17.1">
<h3 data-number="2.17.1">Шаг №1</h3>
<p>Для большей наглядности раскомментируйте строчку с обводкой у правила для <code>.btn</code>. Попробуйте наводить на кнопки у границы элемента.</p>
</section>
</section>
<section id="ошибка-влияния-анимации-элемента-на-окружающие-его-элементы" class="level2" data-number="2.18">
<h2 data-number="2.18">2.17. Ошибка влияния анимации элемента на окружающие его элементы</h2>
<section id="шаг-1-22" class="level3 text-container text-container--module" data-number="2.18.1">
<h3 data-number="2.18.1">Шаг №1</h3>
<p>Демонстрация простого пользовательского взаимодействия по наведению курсора мыши.</p>
</section>
</section>
<section id="анимации-кнопок-с-использованием-clip-path-1" class="level2" data-number="2.19">
<h2 data-number="2.19">2.18. Анимации кнопок с использованием clip-path</h2>
<div class="text-container text-container--module">
<section id="шаг-1-23" class="level3" data-number="2.19.1">
<h3 data-number="2.19.1">Шаг №1</h3>
<p>Анимации кнопок с использованием псевдоэлементов и <code>clip-path</code> типа <code>polygon</code> и <code>inset</code>.</p>
</section>
<section id="шаг-2-10" class="level3" data-number="2.19.2">
<h3 data-number="2.19.2">Шаг №2</h3>
<p>Для анимации первой кнопки создаётся псевдоэлемент <code>::before</code> и анимируется свойство <code>clip-path</code> со значением <code>polygon</code>. Сначала элемент как бы сжат слева, а при наведении занимает размер кнопки.</p>
</section>
<section id="шаг-3-10" class="level3" data-number="2.19.3">
<h3 data-number="2.19.3">Шаг №3</h3>
<p>Для анимации второй кнопки псевдоэлемент сжимается в центре кнопки, а при наведении — занимает весь её размер.</p>
</section>
<section id="шаг-4-7" class="level3" data-number="2.19.4">
<h3 data-number="2.19.4">Шаг №4</h3>
<p>Для анимации третьей кнопки используются оба псевдоэлемента. Один расположен справа, другой — слева. <code>clip-path: inset</code> создаёт два встроенных прямоугольника, которые растягиваются по горизонтали к центру кнопки.</p>
</section>
<section id="шаг-5-6" class="level3" data-number="2.19.5">
<h3 data-number="2.19.5">Шаг №5</h3>
<p>У четвёртой кнопки анимируются оба псевдоэлемента. <code>::before</code> хранит прямоугольник, у которого нет фона, а только левая и правая линии рамки. Сам прямоугольник сжат к нижней грани кнопки, при наведении растягивается по её высоте.</p>
<p>Псевдоэлемент <code>::after</code> представляет собой прямоугольник, который имеет фоновый цвет и сжат у верхней грани кнопки. Он разворачивается с задержкой в 0,3 секунды после <code>::before</code>.</p>
</section>
</div>
</section>
<section id="анимации-кнопок-с-использованием-transform" class="level2" data-number="2.20">
<h2 data-number="2.20">2.19. Анимации кнопок с использованием transform</h2>
<div class="text-container text-container--module">
<section id="шаг-1-24" class="level3" data-number="2.20.1">
<h3 data-number="2.20.1">Шаг №1</h3>
<p>Анимации кнопок с использованием <code>transform</code> и <code>transform-origin</code>.</p>
</section>
<section id="шаг-2-11" class="level3" data-number="2.20.2">
<h3 data-number="2.20.2">Шаг №2</h3>
<p>Для первой кнопки создаётся псевдоэлемент <code>::before</code>, который сжат с помощью <code>transform: scaleX</code> к левой грани кнопки и разворачивается во всю её ширину при наведении.</p>
</section>
<section id="шаг-3-11" class="level3" data-number="2.20.3">
<h3 data-number="2.20.3">Шаг №3</h3>
<p>Для второй кнопки создаётся псевдоэлемент <code>::before</code>, который сжат с помощью <code>transform: scaleY</code> к центру кнопки и разворачивается во всю её высоту при наведении.</p>
</section>
<section id="шаг-4-8" class="level3" data-number="2.20.4">
<h3 data-number="2.20.4">Шаг №4</h3>
<p>Для третьей кнопки создаются два псевдоэлемента: первый сжат у левой грани кнопки, второй — у правой. При наведении они разворачиваются к центру кнопки наполовину со <code>scaleX(0.5)</code>.</p>
</section>
<section id="шаг-5-7" class="level3" data-number="2.20.5">
<h3 data-number="2.20.5">Шаг №5</h3>
<p>Для четвёртой кнопки создаются два псевдоэлемента. Первый — без фона и с вертикальными рамками. Он прижат к нижней грани кнопки и разворачивается с помощью <code>scaleY</code> во всю её высоту. Второй имеет фон и прижат к верхней грани кнопки. Он разворачивается с задержкой в 0,3 секунды также во всю высоту кнопки.</p>
</section>
</div>
</section>
<section id="сравнение-анимации-карточек-с-использованием-clip-path-и-transform" class="level2" data-number="2.21">
<h2 data-number="2.21">2.20. Сравнение анимации карточек с использованием clip-path и transform</h2>
<div class="text-container text-container--module">
<section id="шаг-1-25" class="level3" data-number="2.21.1">
<h3 data-number="2.21.1">Шаг №1</h3>
<p>Две аналогичные анимации карточек с использованием <code>clip-path</code> и <code>transform</code> с <code>tabindex</code>, <code>focus</code> и <code>focus-within</code>.</p>
</section>
<section id="шаг-2-12" class="level3" data-number="2.21.2">
<h3 data-number="2.21.2">Шаг №2</h3>
<p>Посмотрим на первую карточку — с анимацией с помощью <code>clip-path</code>. Здесь блок с текстом <code>article__content</code> ограничен прямоугольной областью по левой грани блока. При наведении область разворачивается на всю ширину блока-родителя, показывая содержимое <code>article__content</code>.</p>
</section>
<section id="шаг-3-12" class="level3" data-number="2.21.3">
<h3 data-number="2.21.3">Шаг №3</h3>
<p>Посмотрим на вторую карточку. Здесь сам блок <code>article__content</code> сдвигается за левую границу родителя и выезжает при наведении. Если присмотреться, то вы можете увидеть это небольшое отличие.</p>
</section>
</div>
</section>
<section id="анимация-карточки-с-использованием-clip-path-circle" class="level2" data-number="2.22">
<h2 data-number="2.22">2.21. Анимация карточки с использованием clip-path circle()</h2>
<section id="шаг-1-26" class="level3 text-container text-container--module" data-number="2.22.1">
<h3 data-number="2.22.1">Шаг №1</h3>
<p>Анимация карточки с использованием <code>clip-path: circle()</code>. Сначала текстовая область скрыта кругом (с радиусом равным нулю) в центре карточки. При наведении эта область увеличивается до круга радиусом более половины карточки. В нашем случае это 70%.</p>
</section>
</section>
<section id="усложнённые-анимации-кнопок-с-использованием-transform" class="level2" data-number="2.23">
<h2 data-number="2.23">2.22. Усложнённые анимации кнопок с использованием transform</h2>
<div class="text-container text-container--module">
<section id="шаг-1-27" class="level3" data-number="2.23.1">
<h3 data-number="2.23.1">Шаг №1</h3>
<p>Несколько примеров анимаций кнопок с применением псевдоэлементов, трансформации и линейных градиентов.</p>
</section>
<section id="шаг-2-13" class="level3" data-number="2.23.2">
<h3 data-number="2.23.2">Шаг №2</h3>
<p>Для первой кнопки создаётся псевдоэлемент с заливкой линейным градиентом из фиолетового в жёлтый. Элемент шире кнопки в 2,5 раза. При наведении блок смещается влево, мы видим его однотонную часть.</p>
</section>
<section id="шаг-3-13" class="level3" data-number="2.23.3">
<h3 data-number="2.23.3">Шаг №3</h3>
<p>Для второй кнопки используется тот же подход, но немного другой градиент, создающий эффект блика. Перемещение происходит также за счёт <code>transform: translateX</code>.</p>
</section>
<section id="шаг-4-9" class="level3" data-number="2.23.4">
<h3 data-number="2.23.4">Шаг №4</h3>
<p>У третьей кнопки внутри есть два тега <code>&lt;span&gt;</code> с фразами. Первый <code>&lt;span&gt;</code> сдвинут с помощью <code>translateY</code> за верхнюю грань кнопки и не виден. При наведении на кнопку первый <code>&lt;span&gt;</code> выезжает, а второй уезжает за нижнюю грань кнопки.</p>
</section>
<section id="шаг-5-8" class="level3" data-number="2.23.5">
<h3 data-number="2.23.5">Шаг №5</h3>
<p>У четвёртой кнопки происходит похожее перемещение, но теперь уже по горизонтали с помощью <code>transform: translateX()</code>. Изначально первый <code>&lt;span&gt;</code> сдвинут за левую грань кнопки и не виден. При наведении оба элемента сдвигаются направо.</p>
</section>
</div>
</section>
<section id="усложнённая-анимация-карточки-товара-инструментов" class="level2" data-number="2.24">
<h2 data-number="2.24">2.23. Усложнённая анимация карточки товара инструментов</h2>
<div class="text-container text-container--module">
<section id="шаг-1-28" class="level3" data-number="2.24.1">
<h3 data-number="2.24.1">Шаг №1</h3>
<p>Анимация будет такова: псевдоэлемент карточки <code>::before</code> меняет угол наклона. Изображение товара сдвигается и немного меняет масштаб. Описание товара также немного сдвигается. Появляется кнопка «Купить» и название бренда, которое добавлено с помощью псевдоэлемента <code>::after</code> для карточки.</p>
</section>
<section id="шаг-2-14" class="level3" data-number="2.24.2">
<h3 data-number="2.24.2">Шаг №2</h3>
<p>Начнём с псевдоэлемента <code>.tools-card::before</code>. Это прямоугольник, который сдвинули наверх <code>translateY(-60%)</code> и сделали параллелограммом вдоль вертикали с помощью <code>skewY(-10deg)</code>.</p>
<p>При наведении на карточку угол наклона <code>skewY(10deg)</code> меняется на противоположный, создавая нужный эффект.</p>
</section>
<section id="шаг-3-14" class="level3" data-number="2.24.3">
<h3 data-number="2.24.3">Шаг №3</h3>
<p>Картинка <code>tools-card__img</code> и описание <code>tools-card__content</code> изначально опущены на 50px и при наведении поднимаются выше. Картинка немного уменьшается.</p>
<p>Кнопка <code>tools-card__buy-btn</code> изначально прозрачная, её не видно. При наведении на карточку она поднимается наверх вместе с описанием и становится непрозрачной.</p>
</section>
<section id="шаг-4-10" class="level3" data-number="2.24.4">
<h3 data-number="2.24.4">Шаг №4</h3>
<p>Название бренда добавляется в псевдоэлемент <code>tools-card::after</code> с помощью data-атрибута <code>data-brand</code> из разметки. Изначально текст размыт с помощью фильтра <code>filter: blur(10px)</code>. При наведении на карточку фильтр снимается, текст становится виден.</p>
</section>
<section id="шаг-5-9" class="level3" data-number="2.24.5">
<h3 data-number="2.24.5">Шаг №5</h3>
<p>Псевдоэлемент карточки <code>::before</code> меняет угол наклона. Изображение товара сдвигается и немного меняет масштаб. Описание товара также немного сдвигается. Появляется кнопка «Купить» и название бренда, которое добавлено с помощью псевдоэлемента <code>::after</code> для карточки.</p>
</section>
</div>
</section>
<section id="анимация-подчёркивания-кнопок-и-ссылок" class="level2" data-number="2.25">
<h2 data-number="2.25">2.24. Анимация подчёркивания кнопок и ссылок</h2>
<div class="text-container text-container--module">
<section id="шаг-1-29" class="level3" data-number="2.25.1">
<h3 data-number="2.25.1">Шаг №1</h3>
<p>Пример наведения на кнопку с использованием псевдоэлементов.</p>
</section>
<section id="шаг-2-15" class="level3" data-number="2.25.2">
<h3 data-number="2.25.2">Шаг №2</h3>
<p>У первой и второй кнопки подчёркивание создаётся с помощью псевдоэлемента высотой в пару пикселей и шириной 100%. Оба псевдоэлемента сжимаются и скрываются с помощью <code>transform: scaleX(0)</code>. При этом у первой кнопки точка трансформации — левый край псевдоэлемента (<code>transform-origin: center</code>).</p>
<p>При наведении на кнопку псевдоэлемент разворачивается во всю ширину с помощью <code>transform: scaleX(1)</code>.</p>
</section>
<section id="шаг-3-15" class="level3" data-number="2.25.3">
<h3 data-number="2.25.3">Шаг №3</h3>
<p>У второй кнопки отличие только в том, что точка трансформации — это середина псевдоэлемента, то есть <code>transform-origin</code> имеет значение <code>center</code>. Изначально псевдоэлемент сжат и не виден, при наведении от центра разворачивается к краям.</p>
</section>
</div>
</section>
</section>
</body>
</html>
