<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ru-RU">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch001.xhtml</title>
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body epub:type="bodymatter">
<section id="основы-анимации" class="level1" data-number="1">
<h1 data-number="1">1. Основы анимации</h1>
<div class="text-container text-container--module">
<p>В первом разделе мы затронем историю появления анимации в веб и познакомимся с основными её принципами. Изучим CSS свойство transition и создадим простые анимации в CSS.</p>
</div>
<section id="история-анимации-в-вебе" class="level2" data-number="1.1">
<h2 data-number="1.1">1.1. История анимации в вебе</h2>
<div class="text-container text-container--module">
<p>История анимации насчитывает более 30 лет опыта использования разнообразных технологий, которые сменяли и улучшали друг друга. В этой главе мы расскажем про каждую из них. Начнём с истоков, с 1990-х годов.</p>
<section id="gif" class="level3" data-number="1.1.1">
<h3 data-number="1.1.1">GIF</h3>
<p>Текущий уровень развития анимаций в вебе обусловлен развитием и распространением «гифок».</p>
<p>GIF-файлы появились ещё в 1987 году, за несколько лет до самой Всемирной паутины или её подобия. GIF поддерживает 256 цветов максимум плюс два байта на канал прозрачности. Команда программистов в CompuServe во главе со Стивом Уилхайтом — основателем формата — построила GIF вокруг чего-то совершенно непохожего на современную анимационную технологию. Её основой стала <a href="https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%9B%D0%B5%D0%BC%D0%BF%D0%B5%D0%BB%D1%8F_%E2%80%94_%D0%97%D0%B8%D0%B2%D0%B0_%E2%80%94_%D0%92%D0%B5%D0%BB%D1%87%D0%B0">компрессия Лемпеля-Зива-Уэлча</a> или LZW.</p>
<p>«Гифки» представляют собой последовательность статических картинок — в точности, как кадры в мультиках либо кинофильмах.</p>
<p>15 июня 1987 года была опубликована первая «гифка», собственно, вот и она:</p>
<figure>
<img src="../media/file0.gif" alt="Первая «гифка»" />
<figcaption aria-hidden="true">Первая «гифка»</figcaption>
</figure>
<p>К тому времени, когда Всемирная паутина начала активно набирать обороты, GIF стал монополистом. В 1993 году появился передовой браузер Mosaic, он поддерживал два формата изображения: проверенный GIF и новый JPEG.</p>
<p>В те далёкие времена большая часть людей даже и не думала о том, как анимировать свой сайт. Всё, чего они хотели — немного оживить статичные веб-страницы, сделать их более динамичными и привлекательными.</p>
<p>Основное распространение «гифки» получили в рекламных баннерах. Анимированные объекты и сюжеты привлекали больше внимания потребителей к коммерческим предложениям, чем статичные изображения.</p>
</section>
<section id="adobe-flash-player" class="level3" data-number="1.1.2">
<h3 data-number="1.1.2">Adobe Flash Player</h3>
<p>Flash был создан американцем Джонатаном Гэйем ещё в 1996 году. Основанная им и его коллегами в 1993 году компания FutureWave Software планировала выйти на рынок графического ПО и занять на нём доминирующее положение. Первым продуктом компании стала SmartSketch. Следом за ней в 1996 году появился FutureSplash Animator — сервис для создания анимации. Несколькими месяцами позднее Macromedia выкупила компанию Джонатана Гэя и переименовала FutureSplash Animator в Macromedia Flash.</p>
<p>В последующие годы востребованность Flash только возрастала. Flash-контент создавали в программе Macromedia Flash и с помощью плеера Macromedia Flash Player добавляли на многие популярные веб-сайты и браузеры. С помощью плеера корректно отображались интерактивные веб-страницы, можно было загружать видеоролики и музыку. Пожалуй, к началу 2000-х большинство компьютеров поддерживали Flash в том или ином виде.</p>
<p>В 2005 году сама Macromedia была выкуплена компанией Adobe, а Macromedia Flash был в очередной раз переименован. На этот раз он стал называться Adobe Flash.</p>
<p>Закат Flash связывают с наступлением эпохи смартфонов. Сам Стив Джобс был против него, из-за чего в айфоны не была добавлена поддержка Flash. Более того, основатель Apple негативно высказывался и критиковал платформу в своём письме «<a href="https://habr.com/ru/post/387713/">Мысли о Flash</a>».</p>
<p>Причина заката Flash банальна и связана с крупными деньгами. Ещё до массового распространения смартфонов любители казуальных игр проводили своё время в социальных сетях и на сайтах-сборниках Flash-игр. Вся прибыль уходила именно этим площадкам и разработчикам игр. Однако крупным корпорациям, таким как Google и Apple, было выгодно отказаться от поддержки Flash в своих продуктах, чтобы полностью монополизировать рынок мобильных игр и получать деньги от микротранзакций и показа рекламы. Так они и поступили.</p>
<p>1 декабря 2015 года Adobe объявила о переименовании Adobe Flash в Adobe Animate при следующем крупном обновлении. Это стало первым шагом по прекращению поддержки Adobe Flash Player. В Adobe Animate добавили экспорт в JavaScript (с использованием библиотеки CreateJS) с проигрыванием в Canvas. Это и сейчас используется разработчиками.</p>
<p>Летом 2017 года Adobe заявила, что остановит поддержку Flash 31 декабря 2020 года. Теперь, если зайти на официальный <a href="https://www.adobe.com/ru/products/flashplayer/end-of-life-alternative.html">сайт компании</a>, можно увидеть надпись на английском языке «Мы удалили Flash. Поддержка Flash закончилась».</p>
<p>Adobe Flash Player имел важное значение для творчества. С его помощью любой желающий даже без особых навыков программирования мог создать графические и звуковые шоу, выпустить собственную игру или сделать анимацию.</p>
</section>
<section id="javascript" class="level3" data-number="1.1.3">
<h3 data-number="1.1.3">JavaScript</h3>
<p>В 1995 году на помощь разработчикам пришёл JavaScript. Он помог снять ограничения, которые на разработчиков накладывали HTML и CSS. Например, нужно всплывающее окно? Хочется динамически изменить порядок какой-то структуры? Ответ — JavaScript.</p>
</section>
<section id="canvas" class="level3" data-number="1.1.4">
<h3 data-number="1.1.4">Canvas</h3>
<p>Спецификация Canvas (как отдельной области на странице, внутри которой можно отображать графические объекты) была предложена в 2005 году компанией Apple для поддержки некоторых приложений внутри движка WebKit — на данный момент его используют браузеры Safari и Google Chrome. Рабочая группа W3C включила Canvas в Web Applications 1.0, который вошёл в стандарт HTML 5.0.</p>
<p>Canvas — это стандартный элемент HTML5, он является всего лишь контейнером для графики. Чтобы нарисовать какой-нибудь графический объект, в действительности необходимо использовать специальный скрипт — обычно JavaScript.</p>
<p>Canvas-анимации — отличный способ делать комплексные и красивые анимации. Взаимодействуя с пикселями, вы можете создавать сложные вещи и не терять в производительности. Это отличный выбор для сложных рисунков и взаимодействий.</p>
</section>
<section id="css-анимации" class="level3" data-number="1.1.5">
<h3 data-number="1.1.5">CSS-анимации</h3>
<p>Уже с середины 2000-х в W3C занимались включением анимации в CSS. Первая версия спецификации CSS-анимации увидела свет в 2009 году.</p>
<p>С помощью CSS-анимаций стали возможными переходы между исходным состоянием элемента и состоянием при наведении, нажатии или фокусе. Они также позволяют создавать более сложные эффекты, используя для этого наборы ключевых кадров.</p>
<p>С CSS-анимациями для решения большинства задач вам не понадобятся внешние библиотеки. У них отличная производительность. Также их можно с лёгкостью применять в адаптивной разработке, ведь их легко модифицировать через использование медиа-запросов.</p>
</section>
<section id="svg" class="level3" data-number="1.1.6">
<h3 data-number="1.1.6">SVG</h3>
<p>SVG (Scalable Vector Graphics) — это двухмерная векторная графика, дословно «масштабируемая векторная графика». В это же время SVG — текстовый формат, который можно легко править в блокноте или просто рисовать в векторных редакторах. Поэтому его можно использовать как изображение и в inline-формате. Элементы в нём трактуются браузером как DOM-элементы, с ними можно работать так же, как с любыми другими DOM-элементами, в том числе анимировать с помощью CSS и JavaScript.</p>
<p>В основу SVG легли языки разметки VML (Vector Markup Language — язык векторной разметки) и PGML (Precision Graphics Markup Language — язык разметки прецизионной графики). Разрабатывается с 1999 года. В 2001 году появилась версия 1.0, а 10 годами позже, в 2011, вышла версия 1.1 — она до сих пор остаётся актуальной. Сейчас активно разрабатывается версия 2.0.</p>
<p>У SVG-анимаций есть свой синтаксис — SMIL (The Synchronized Multimedia Integration Language). Он гораздо лучше подходит для создания SVG-анимаций, в отличие от CSS, потому что позволяет анимировать некоторые недоступные для CSS свойства.</p>
</section>
<section id="webgl" class="level3" data-number="1.1.7">
<h3 data-number="1.1.7">WebGL</h3>
<p>WebGL — Web Graphics Library (библиотека веб-графики). Первая спецификация была выпущена 3 марта 2011 года. Эта технология в основном используется для сложных эффектов и 3D. Также её можно использовать при создании анимаций для виртуальной реальности.</p>
</section>
<section id="итог" class="level3" data-number="1.1.8">
<h3 data-number="1.1.8">Итог</h3>
<p>Сейчас для создания анимированных веб-страниц разработчики в основном используют CSS-анимации и переходы или нативный JavaScript. Но для более сложных анимаций, где не хватает возможностей CSS и JS, применяются SVG-анимации, Canvas-анимации и WebGL.</p>
<p>На данном курсе мы разберём базовые подходы и возможности CSS-анимаций и посмотрим их переключение нативным JavaScript.</p>
</section>
</div>
</section>
<section id="применение-анимаций-в-вебе" class="level2" data-number="1.2">
<h2 data-number="1.2">1.2. Применение анимаций в вебе</h2>
<div class="text-container text-container--module">
<p>Любой интерфейс можно условно поделить на две составляющие. Первая — непосредственно функционал, <strong>что</strong> он делает. Вторая — детали, <strong>как</strong> он делает. Внимание к деталям — это именно то, что выделяет хорошие сайты на общем фоне.</p>
<section id="микровзаимодействия" class="level3" data-number="1.2.1">
<h3 data-number="1.2.1">Микровзаимодействия</h3>
<p>Процесс взаимодействия пользователя с сайтом состоит из небольших шагов — микровзаимодействий. Пользователь совершил действие — что-то произошло в ответ. Этот ответ со стороны интерфейса должен передать пользователю обратную связь. Он может показать, на что влияют действия, помочь понять, что происходит сейчас и что будет дальше. Каждое такое взаимодействие, простое, цельное и короткое по времени, — это маленький кирпичик. Но в совокупности все они определяют, насколько пользователю будет удобно и приятно работать с сайтом.</p>
<p>Если микровзаимодействия верно спроектированы и аккуратно реализованы, то пользователи получают позитивные эмоции и ощущение комфорта от использования сайта. Посетители могут даже не понимать, почему им нравится сайт, но эффект сохранится. Если пользователю нравится, как работает сайт, у него сформируются положительные представления о конкретном продукте или компании в целом. Но если сайт ему не понравился, то он изначально будет настроен негативно. Конечно, это не единственное, что определяет настроение пользователя, но это то, что под силу улучшить разработчику, и то, что действительно работает.</p>
<p>Микровзаимодействия должны быть ненавязчивыми. Основная их задача — информировать пользователя об изменениях на сайте в результате его действий. Поэтому они не должны быть броскими и перетягивать на себя внимание.</p>
<p>Сами по себе анимации здесь не являются целью. У них есть конкретные назначения в рамках взаимодействий с интерфейсом. Например, они могут сгладить переходы между разными состояниями элементов интерфейса и обеспечить непрерывность происходящего. Если элемент перемещается куда-то, меняется состав его внутренних подэлементов или появляется какой-то новый контент, анимации помогают показать процесс изменений и сообщить пользователю, что происходит. Они также могут быть задействованы для управления вниманием пользователя.</p>
<p>Чтобы качественно реализовать задуманное на практике, разработчику полезно не только изучить инструменты с технической стороны, но и познакомиться с общими принципами анимирования. Мы разберём их чуть позже в этом же модуле.</p>
<p>А пока рассмотрим разные ситуации и задачи, которые можно решать с помощью анимаций в интерфейсах.</p>
</section>
<section id="обратная-связь" class="level3" data-number="1.2.2">
<h3 data-number="1.2.2">Обратная связь</h3>
<p>Первая и самая простая ситуация — реакции на действия пользователя. Наведение курсора мыши на кнопку, всплывающие подсказки, правильно или неправильно заполненное поле адреса — пользователь может совершать самые разные действия на странице, и ему спокойнее, когда интерфейс оперативно даёт обратную связь.</p>
<p>Пара примеров:</p>
<figure>
<img src="../media/file1.gif" alt="Наведение на ссылку" />
<figcaption aria-hidden="true">Наведение на ссылку</figcaption>
</figure>
<p><a href="https://dribbble.com/shots/4856613-Link-Hover-Effect">Источник</a></p>
<p>Здесь интерактивный элемент меняет свой внешний вид, показывая, что с ним можно взаимодействовать.</p>
<figure>
<img src="../media/file2.gif" alt="Ввод электронной почты" />
<figcaption aria-hidden="true">Ввод электронной почты</figcaption>
</figure>
<p><a href="https://dribbble.com/shots/4779275-Email-validation-animation">Источник</a></p>
<p>А здесь пользователь получает обратную связь — введённый им email подходит.</p>
<p>Формально обратную связь можно дать и без анимаций, но они позволяют сгладить изменения состояний элементов интерфейса. Обратите внимание, что каждый элемент интерфейса в примерах воспринимается как единое целое. То есть как один компонент, меняющий своё состояние, а не как два разных, которые внезапно подменяют друг друга. Этот эффект достигается именно за счёт анимации, путём плавного изменения состояния.</p>
</section>
<section id="донесение-информации-о-происходящем" class="level3" data-number="1.2.3">
<h3 data-number="1.2.3">Донесение информации о происходящем</h3>
<p>Первое впечатление пользователя о веб-сайте очень важно, потому что оно почти мгновенно создаёт имидж бренда. С помощью предварительного загрузчика можно сформировать первое впечатление пользователя о сайте. Он поможет увлечь посетителя на время загрузки страницы.</p>
<p><a href="https://neilpatel.com/blog/loading-time/">Исследование Kissmetrics</a> показало, что пользователи не готовы ждать, пока загружается страница. Чем медленнее грузится сайт, тем выше уровень отказов.</p>
<p>60% опрошенных пользователей мобильных устройств подтвердили, что регулярно сталкиваются с одной из перечисленных ниже проблем:</p>
<ul>
<li><p>73% пользователей отмечают медленную загрузку страниц;</p></li>
<li><p>51% пользователей указывают на сбои и ошибки доступа к сайту;</p></li>
<li><p>45% пользователей говорят об ошибках функционала при доступе с мобильного устройства;</p></li>
<li><p>48% пользователей отмечают, что сайты плохо адаптированы для мобильных устройств, их сложно читать;</p></li>
<li><p>38% пользователей говорят о недоступности сайта с мобильного устройства.</p></li>
</ul>
<p>Как долго пользователи мобильных устройств готовы ждать?</p>
<ul>
<li><p>3% пользователей готовы ждать полной загрузки сайта около одной секунды;</p></li>
<li><p>15% пользователей ожидают загрузки в течение 16–20 секунд;</p></li>
<li><p>16% пользователей ждут около пяти секунд;</p></li>
<li><p>16% готовы ждать загрузки страницы 11–15 секунд;</p></li>
<li><p>20% пользователей готовы ждать больше 20 секунд, до полной загрузки сайта;</p></li>
<li><p>30% пользователей ждут загрузки не больше 6–10 секунд, а затем возвращаются в поиск.</p></li>
</ul>
<p>Одна дополнительная секунда во времени загрузки сайта снижает уровень конверсии на 7%.</p>
<p><a href="https://dribbble.com/shots/10037782-Loader-Ball-with-Physical-Interaction">Источник</a></p>
<p>Подобный предзагрузчик вполне может настроить пользователя на позитивный настрой ещё до полной загрузки.</p>
<p>Создавая предзагрузчик, нужно помнить, что красивый анимационный эффект может весить много. В итоге посетитель сайта сначала будет ждать, пока загрузится эта анимация, а потом ещё дожидаться, когда покажется нужная информация.</p>
<p>Анимации могут использоваться при построении каркасов страниц ещё до того, как загрузится контент:</p>
<p><a href="https://dribbble.com/shots/7056106-Skeleton-Loading-Animation">Источник</a></p>
<p>Или для визуализации прогресса при выполнении какой-либо долгой операции:</p>
<figure>
<img src="../media/file3.gif" alt="Анимация процесса загрузки" />
<figcaption aria-hidden="true">Анимация процесса загрузки</figcaption>
</figure>
<p><a href="https://neilpatel.com/blog/loading-time/">Источник</a></p>
<p>Обратите внимание, что здесь компоненты также остаются цельными, а изменение их состояния помогает пользователю понять, что происходит.</p>
</section>
<section id="управление-вниманием" class="level3" data-number="1.2.4">
<h3 data-number="1.2.4">Управление вниманием</h3>
<p>Движение всегда привлекает внимание. Если на статичной странице зашевелится какой-то элемент, вы моментально посмотрите на него. Если нужно привлечь внимание пользователя к уведомлению или блоку, требующему от пользователя совершения действия — анимация будет очень кстати.</p>
<figure>
<img src="../media/file4.gif" alt="Анимация иконки уведомления" />
<figcaption aria-hidden="true">Анимация иконки уведомления</figcaption>
</figure>
<p><a href="https://dribbble.com/shots/6202196-Short-story-of-a-Badge">Источник</a></p>
</section>
<section id="изменение-состояний-интерфейса" class="level3" data-number="1.2.5">
<h3 data-number="1.2.5">Изменение состояний интерфейса</h3>
<p>В век одностраничных приложений часто встречаются интерфейсы, которые сильно меняются в процессе работы с ними. Порой сложно понять, куда делись какие-то компоненты при изменении сетки страницы и что к чему относится. Но если сделать изменение структуры страницы анимированным, чтобы пользователь видел, откуда появились или куда передвинулись элементы, этой проблемы удастся избежать.</p>
<p><a href="https://dribbble.com/shots/6589017-Boosted-Boards-Page-Transition">Источник</a></p>
<p>В этом примере мы видим переход между двумя отличающимися по структуре страницами, но с лёгкостью можем понять, откуда что взялось, так как интерфейс меняется плавно.</p>
<p>Этот же подход можно применять к пошаговым операциям, например, к заполнению длинных форм, состоящих из нескольких секций. Движения помогают структурировать элементы и упрощают понимание происходящего.</p>
<p>Технически с помощью анимаций можно сделать интерфейс полностью бесшовным: весь сайт будет восприниматься как единое целое, а не как набор отдельных экранов.</p>
<p><a href="https://dribbble.com/shots/6250461-Settings-transition">Источник</a></p>
<p>В этом примере происходит бесшовный переход между двумя экранами. И такое бывает не только в мобильных приложениях, но и на сайтах.</p>
<p>Не стоит забывать и о визуализациях данных, например, на разного рода графиках и схемах. Там удобно анимировать переход от одного набора данных к другому для их сопоставления.</p>
<figure>
<img src="../media/file5.gif" alt="Пример видео — отображение данных на графике" />
<figcaption aria-hidden="true">Пример видео — отображение данных на графике</figcaption>
</figure>
<p><a href="https://dribbble.com/shots/3249998-Radar-Graph">Источник</a></p>
</section>
<section id="конструкторы-и-презентации-товаров-и-интерьеров" class="level3" data-number="1.2.6">
<h3 data-number="1.2.6">Конструкторы и презентации товаров и интерьеров</h3>
<p>В последние годы набрали популярность 3D-конструкторы для товаров. Они позволяют рассмотреть предмет с разных сторон, примерить на него разные опции:</p>
<p><a href="https://dribbble.com/shots/11275280-TRIUMPH-Motorcycle-customizer-page">Источник</a></p>
<p>Обратите внимание на цельность и бесшовность сайта в этом примере. Здесь также есть небольшие движения у всех интерактивных элементов: сочетаются разные ситуации, упомянутые выше. И как вы уже, вероятно, поняли, неважно, идёт ли речь о маленькой кнопке или обо всей странице — анимации в любом масштабе помогают пользователю понять, что происходит.</p>
<p>Ещё одна область применения анимаций в вебе — различные презентации. Есть вещи, которые сложно показать в виде статических картинок. Им нужно непосредственно движение или третье измерение, какие-то манипуляции в виртуальном пространстве. И здесь открывается широкий простор для творчества.</p>
<p>Например, если нужно показать интерьер какого-то помещения, уместно создание его 360° панорамы:</p>
<p><a href="https://dribbble.com/shots/11983739--360-Real-Estate-Website">Источник</a></p>
<p>Такой подход даёт более полное впечатление об интерьере. Это не набор разрозненных слайдов с фотографиями, а полноценное погружение в обстановку.</p>
</section>
<section id="сторителлинг" class="level3" data-number="1.2.7">
<h3 data-number="1.2.7">Сторителлинг</h3>
<p>Помимо презентации, используются анимационные истории — сторителлинг. Такой подход помогает увлечь пользователя, побудить к действию, представить сложную для восприятия информацию в наглядном виде, связать разрозненные факты в единую картину-историю.</p>
<p>Пара примеров:</p>
<ul>
<li><p><a href="https://www.xbox.com/en-US/consoles/xbox-series-x">Презентация Xbox Series X</a>,</p></li>
<li><p><a href="https://www.apple.com/airpods-max/">Презентация AirPods Max</a>.</p></li>
</ul>
<p>По мере прокрутки страницы нас всё больше и больше погружает в происходящее на сайте, мотивируя остаться подольше и досмотреть до конца.</p>
<p>Так с помощью анимации можно рассказывать полноценные истории. Чтобы эффективно общаться и достучаться до зрителя, важно иметь хорошую историю, которую можно рассказать, но главное — знать, как её рассказать.</p>
<p><a href="https://thebearandhisscarf.com/">Страница с историей «Медведь и его шарф»</a> от футбольного клуба «Брюгге».</p>
<p>Подобные проекты часто требуют от разработчика широкого кругозора и понимания. Нужно знать, что в теории можно сделать с помощью имеющихся инструментов, а что — нельзя, какие есть подходы к решению тех или иных задач, какие там могут быть подводные камни. Если вы нацелены на работу с подобными проектами, то для вас будут важны практика и эксперименты. Чем больше, тем лучше.</p>
</section>
<section id="декоративные-анимации" class="level3" data-number="1.2.8">
<h3 data-number="1.2.8">Декоративные анимации</h3>
<p>Когда речь заходит о лендингах, часто для завершения картины добавляют разного рода фоновые абстрактные анимации или какие-то анимированные иллюстрации. Они могут быть ненавязчивыми, лишь слегка дополняющими дизайн, а могут становиться центром внимания, той деталью, которая запомнится и надолго останется в голове пользователя. Здесь мы снова говорим о производимом впечатлении, только уже переводя разговор из плоскости комфорта в плоскость вау-эффекта.</p>
<p>Например, фоновые анимации с частицами часто применяются для ненавязчивого сопровождения основного контента:</p>
<p><a href="https://dribbble.com/shots/12121689-Home-page-design-for-Data-Science-AI-company">Источник</a></p>
<p>В то же время анимированная сцена может быть центром внимания и даже определять саму суть сайта:</p>
<p><a href="https://dribbble.com/shots/7889279--Studio-Web-Site">Источник</a></p>
<p>Каждый такой проект в каком-то смысле уникален, и у разработчика могут возникать самые разнообразные в техническом плане задачи. Пригодится и WebGL, и математика, и даже учебник по физике. Но важно понимать, что принципы построения анимаций будут неизменными, и задачи они будут решать всё те же, что и в повседневных интерфейсах. Разве что акценты при разработке будут слегка смещены с контента на визуальную составляющую.</p>
<p>Теперь, когда мы определились с вариантами анимаций, начнём рассматривать базовые технологии, которые помогут нам в разработке своих анимаций.</p>
</section>
</div>
</section>
<section id="физиология-восприятия-анимации.-понятие-fps." class="level2" data-number="1.3">
<h2 data-number="1.3">1.3. Физиология восприятия анимации. Понятие FPS.</h2>
<div class="text-container text-container--module">
<p>FPS (Frame Per Second) — единица измерения, которая показывает количество кадров, отображаемых за одну секунду. Большинство современных компьютеров имеют динамический FPS и могут воспроизводить до 60 FPS включительно.</p>
<p>Первый в истории человечества фильм, показанный в 1895 году, был снят братьями Люмьер с частотой 16 кадров в секунду. Этого было достаточно для плавного движения изображений. Цифра 16 FPS была получена экспериментально и не имела никакого научного обоснования.</p>
<p>Человек различает 10–12 FPS как отдельное изображение, но когда эта цифра становится больше, мы уже видим движение. Первым это исследовал и задокументировал психолог Макс Вертгеймер в 1910-х годах.</p>
<p>Возникающая иллюзия движения — заслуга нашего зрения. Оно инерционно: после каждой смены изображения глаз перестаёт видеть его не сразу, а через несколько миллисекунд. Количество миллисекунд зависит от яркости изображения: чем оно ярче, тем больше эта задержка. И чем выше частота смены кадров, тем плавнее кажется движение изображения.</p>
<section id="ключевые-значения-fps" class="level3" data-number="1.3.1">
<h3 data-number="1.3.1">Ключевые значения FPS</h3>
<p>В первых кинотеатрах не было фиксированного FPS, плёнка приводилась в движение путём вращения ручки киноаппарата. Поэтому фильмы, снятые в 16 FPS, демонстрировались в 18–20 FPS, а некоторые недобросовестные владельцы кинотеатров увеличивали частоту вплоть до 50–60 FPS, чтобы быстрее закончить сеанс.</p>
<p>В сентябре 1927 года Комитет номенклатуры и стандартов SMPTE принял 24 кадра в секунду за стандарт. Число 24 вывели математически: оно имеет больше всего целых делителей среди цифр в диапазоне от 15 до 24.</p>
<p>50 и 60 FPS стали стандартом после появления телевизоров. Кинескоп имеет частоту развёртки, равную частоте электрической сети. Так, значение для телевизора в Европе было 50 FPS, в США — 60 FPS.</p>
</section>
<section id="компьютерная-эра" class="level3" data-number="1.3.2">
<h3 data-number="1.3.2">Компьютерная эра</h3>
<p>Мониторами для первых компьютеров служили телевизоры или мониторы на основе технологии ЭЛТ, которые транслировали ту же кадровую развёртку, что и в телесети. Даже в современных операционных системах можно выбрать частоту смены изображения, чтобы избежать рассинхронизации, если нужно подключить устаревший ЭЛТ-монитор.</p>
<figure>
<img src="../media/file6.png" alt="Праксиноскоп" />
<figcaption aria-hidden="true">Праксиноскоп</figcaption>
</figure>
<p>Сейчас на рынке появляется всё больше мониторов со 120, 144, 240 и даже 300 FPS. Такую частоту кадров используют в компьютерных играх для получения сверхплавного изображения.</p>
<p>В браузерах лимит анимации составляет 60 FPS (за исключением IE11, лимит которого 30 FPS), даже если монитор может отобразить больше кадров.</p>
<p>Один из самых распространённых примеров анимации в вебе, где мы сталкиваемся с FPS — последовательность графических файлов (секвенция), каждый из которых является одним кадром видео. Секвенция чаще всего используется для создания иллюзии движения или 3D-объекта с помощью ряда изображений. Используя секвенцию без пользовательского взаимодействия (движения мыши или прокрутки страницы), мы должны находить баланс между частотой кадров и производительностью. Порой стремление добиться заветных 60 FPS может снизить производительность, хотя вполне можно ограничится и 16-20 кадрами без потери плавности.</p>
</section>
<section id="поделитесь-как-вам-статья" class="level3" data-number="1.3.3">
<h3 data-number="1.3.3">Поделитесь, как вам статья?</h3>
<p>Статья — огонь!Это было полезноНеплохо, но можно лучшеНичего полезного не былоЯ сделаю это лучше</p>
<p>Комментарий</p>
<p>Пожалуйста, оставьте комментарий.</p>
<p>Отправить</p>
<p>Спасибо!</p>
<p>Если вы обнаружили ошибку или неработающую ссылку, выделите ее и нажмите Ctrl + Enter</p>
</section>
</div>
</section>
<section id="css-transition" class="level2" data-number="1.4">
<h2 data-number="1.4">1.4. CSS Transition</h2>
<div class="text-container text-container--module">
<p>Самый простой способ создать анимацию в браузере — использовать составное CSS свойство <code>transition</code>.</p>
<p>CSS transition (CSS переходы) позволяют плавно менять исходное значение CSS-свойства на новое вместо мгновенного переключения и управлять при этом скоростью такого изменения.</p>
<p>Для <code>transition</code> не имеет значения, каким образом меняется свойство: по изменению псевдокласса, при наведении курсора <code>.className:hover</code>, при изменении класса объекта или при применении inline-стилей. Важен сам факт изменения свойства.</p>
<p>CSS transition могут применяться ко всем элементам, в том числе к псевдоэлементам. При этом невозможно анимировать свойства, у которых нет промежуточных состояний, к примеру, свойство <code>display</code>. Элемент может быть, допустим, либо блочным, либо строчным. Средних состояний, которые могли бы плавно сменяться, нет. Вместо <code>display</code> можно использовать <code>opacity</code> или <code>transform</code>.</p>
<p>В нашем распоряжении есть четыре свойства, которые дают возможность контролировать transition-анимацию:</p>
<ul>
<li><strong>transition-property</strong> — представляет CSS-свойство, которое мы планируем анимировать. Его значением может выступать совершенно любое CSS-свойство, имеющее числовое выражение: <code>width</code>, <code>height</code>, <code>opacity</code>, <code>color</code>, <code>transform</code> или другие.</li>
</ul>
<p>По умолчанию этому свойству присвоено значение <code>all</code>. Это значит, что анимироваться будут все свойства, значения которых изменились. Однако так поступать не стоит, ведь этот подход наносит ущерб производительности. Если так сделать, то браузер будет наблюдать за всеми свойствами, которые могут быть анимированы, вместо того, чтобы следить за явно указанными.</p>
<pre><code>.block {
  transition-property: opacity;  
}</code></pre>
<ul>
<li><strong>transition-duration</strong> — время, за которое должен быть выполнен переход от одного состояния к другому. Мы можем задавать его в секундах (s) или миллисекундах (ms). Стандартное значение, идущее по умолчанию — ноль секунд.</li>
</ul>
<pre><code>.block {
  transition-duration: 0.3s;  
}</code></pre>
<p>Вот пример одной и той же смены <code>opacity</code> элемента без <code>transition-duration</code> и с разным временем: от очень быстрой в 0,1 секунду до затяжной в одну секунду. Даже небольшое время перехода позволяет сгладить резкую смену состояний. Так наведение выглядит немного аккуратнее.</p>
<p><em>(см. 1.14. Изменение прозрачности элемента при наведении)</em></p>
<p>Все свойства <code>transition</code>, как и все остальные CSS-свойства, могут отличаться для разных состояний одного элемента. Например, при исходном состоянии и при наведении в псевдоклассе <code>:hover</code>. В этом случае применятся transition-свойства нового состояния.</p>
<p>В примере ниже при наведении фон меняется за 0,3 секунды, а после того как мы уберём мышку, фон вернётся в исходное состояние за одну секунду.</p>
<p><em>(см. 1.15. Изменение цвета фона кнопки при наведении)</em></p>
<ul>
<li><strong>transition-timing-function</strong> принимает временную функцию, с помощью которой можно описать, как будет меняться скорость изменения свойства во время анимации. По умолчанию имеет значение <code>ease</code>.</li>
</ul>
<pre><code>.block {
  transition-timing-function: ease-in;
}</code></pre>
<p>Подробнее это свойство мы рассмотрим во втором разделе. Во всех демонстрациях в первом разделе мы будем использовать значение по умолчанию <code>ease</code>. На практике оно используется практически во всех простых анимациях.</p>
<ul>
<li><strong>transition-delay</strong> устанавливает задержку начала выполнения анимации. Как и <code>transition-duration</code>, принимает значение в секундах (s) или миллисекундах (ms). Его значение по умолчанию также ноль секунд.</li>
</ul>
<pre><code>.block {
  transition-delay: 0.5s;
}</code></pre>
<p>В примере ниже при наведении фон поменяется за 0,3 секунды, без задержек. После того как мы уберём мышку, фон вернётся в исходное состояние за 0,3 секунды, но с задержкой в 0,3 секунды.</p>
<p><em>(см. 1.16. Изменение прозрачности кнопки с задержкой)</em></p>
<p>Наконец, мы можем использовать общее свойство — <code>transition</code>. Оно позволяет перечислить все разобранные нами свойства в следующем порядке: <code>transition-property</code>, <code>transition-duration</code>, <code>transition-timing-function</code>, <code>transition-delay</code>.</p>
<pre><code>.block {
  transition: opacity 0.3s ease 0.3s;
}</code></pre>
<p>CSS transition дают возможность менять выбранные нами CSS-свойства с определённой нами временной функцией и в рамках заданного нами периода. Таким образом, мы способны контролировать переход элементов от одного состояния к другому.</p>
<p>Свойства <code>transition</code> можно использовать для построения несложных сценариев анимации. Как это делается, мы рассмотрим немного позднее: в последующих главах нашего курса.</p>
</div>
</section>
<section id="примеры-простых-анимаций-с-использованием-одного-элемента" class="level2" data-number="1.5">
<h2 data-number="1.5">1.5. Примеры простых анимаций с использованием одного элемента</h2>
<div class="text-container text-container--module">
<p>В этой главе мы рассмотрим демонстрации анимаций, которые можно встретить практически на любом сайте.</p>
<p>В примерах мы будем работать только с элементом-родителем. В дальнейшем мы покажем, как можно расширить простую анимацию, используя дочерние элементы и псевдоэлементы. Мы продемонстрируем, как из простой анимации сделать составную и как реализовать некоторые принципы анимации, чтобы сделать элемент более живым и интересным.</p>
<section id="наведение-на-кнопку" class="level3" data-number="1.5.1">
<h3 data-number="1.5.1">Наведение на кнопку</h3>
<p>Кроме свойства <code>opacity</code> мы можем менять:</p>
<ul>
<li><code>background-color</code>:</li>
</ul>
<p><em>(см. 1.18. Изменение цвета фона кнопки при наведении)</em></p>
<ul>
<li><code>color</code>:</li>
</ul>
<p><em>(см. 1.19. Изменение цвета текста кнопки при наведении)</em></p>
<ul>
<li>добавлять <code>box-shadow</code>:</li>
</ul>
<p><em>(см. 1.20. Добавление тени к кнопке при наведении)</em></p>
<ul>
<li>Можем совмещать смену всех этих свойств, пользуясь короткой записью перехода. Тень меняется за одну секунду, фоновый цвет за 0,5 секунды, а цвет текста — за 0,3 секунды с задержкой в 0,2 секунды:</li>
</ul>
<p><em>(см. 1.21. Изменение разных CSS-свойств кнопки при наведении)</em></p>
<p>Обратите внимание, у всех кнопок в разметке явно указан тип <code>button</code> — это хорошая практика. Она поможет вам избежать возможных проблем в дальнейшем, так как у кнопки по умолчанию стоит тип <code>submit</code>. А в стилях вид курсора указываем как <code>cursor: pointer</code>, так как у кнопок по умолчанию стоит <code>default</code>, то есть обычная стрелка.</p>
<p>Также стоит отметить, что не всегда свойство должно быть установлено изначально: его можно добавлять в псевдоклассе. В наших примерах это <code>box-shadow</code>.</p>
</section>
<section id="наведение-на-карточку-товара" class="level3" data-number="1.5.2">
<h3 data-number="1.5.2">Наведение на карточку товара</h3>
<p>Анимация может быть добавлена не только для кнопки, но и для более крупных элементов. Рассмотрим несколько ситуаций с карточками товаров.</p>
<section id="пример-1" class="level4" data-number="1.5.2.1">
<h4 data-number="1.5.2.1">Пример № 1</h4>
<p><em>(см. 1.22. Примеры простой анимации для карточек товара магазина мебели)</em></p>
</section>
<section id="пример-2" class="level4" data-number="1.5.2.2">
<h4 data-number="1.5.2.2">Пример № 2</h4>
<p><em>(см. 1.23. Примеры простой анимации для карточек товара магазина техники)</em></p>
<p>Как видите, при разных вариантах настроек переходов можно получить много разнообразных анимаций. Пробуйте, экспериментируйте! Иногда нужно перебрать несколько вариантов и сравнить их, чтобы найти необычный и в то же время подходящий для вас.</p>
</section>
</section>
</div>
</section>
<section id="принципы-анимации" class="level2" data-number="1.6">
<h2 data-number="1.6">1.6. Принципы анимации</h2>
<div class="text-container text-container--module">
<p>Принципы анимации — это базовые рекомендации, следуя которым можно создавать привлекательную и эффектную анимацию.</p>
<p>Впервые «12 принципов анимации» <a href="https://ru.wikipedia.org/wiki/The_Illusion_of_Life:_Disney_Animation">сформулировали</a> аниматоры компании Disney Томас Фрэнк и Олли Джонстон в 1981 году. Речь в них шла о мультипликации с её характерными особенностями — диснеевским стилем.</p>
<p>По мере распространения анимации за пределы мультфильмов в рекламные ролики, образовательные фильмы и далее в веб аниматоры в новых сферах также брали на вооружение «12 принципов», но с оговорками, вытекающими из специфики и ограничений. В случаях, когда излишняя мультяшность не соответствовала теме анимации и стилю графики или могла мешать восприятию основного сообщения, от некоторых принципов отказывались совсем.</p>
<p>Все принципы мы разбили на категории и распределили по тому, на каком этапе выполнения анимации их применяют в вебе:</p>
<ul>
<li>основные принципы работы с траекторией и другими пространственными свойствами объектов,</li>
<li>основные принципы работы с таймингом,</li>
<li>дополнительные принципы работы с пространственными свойствами и таймингом,</li>
<li>принципы выразительности анимации,</li>
<li>принципы качественной анимации.</li>
</ul>
<p>Границы условные: одно правило можно отнести сразу к двум категориям.</p>
<section id="основные-принципы-работы-с-траекторией-и-другими-пространственными-свойствами-объектов" class="level3" data-number="1.6.1">
<h3 data-number="1.6.1">Основные принципы работы с траекторией и другими пространственными свойствами объектов</h3>
<p>Часть принципов не всегда применяются во фронтенде: в более сложных случаях или при определённой стилистике. Например, при детской теме сайта часто прибегают к явной мультяшности анимации.</p>
<p>Другие принципы критически влияют на качество анимации. Мы отнесли их к основным.</p>
<section id="принцип-1.-компоновка-и-фазовка-движения" class="level4" data-number="1.6.1.1">
<h4 data-number="1.6.1.1">Принцип 1. Компоновка и фазовка движения</h4>
<p>Фазовка и компоновка движения — это два подхода к процессу работы над анимацией.</p>
<p>Во время фазовки анимация собирается кадр за кадром. Способ «сборки» зависит от вида анимации. Её рисуют, собирают сцену из пластилина или LEGO и фотографируют или описывают CSS-кодом положение и свойства всех частей и объектов сцены. В такой технике работает <a href="https://codepen.io/miocene/"><span class="citation" data-cites="miocene">@miocene</span></a> и выкладывает работы на CodePen.</p>
<p>__Пример анимации <span class="citation" data-cites="miocene.__">@miocene.__</span></p>
<figure>
<img src="../media/file7.gif" alt="Screencast Pure CSS Moustached Nanny" />
<figcaption aria-hidden="true">Screencast Pure CSS Moustached Nanny</figcaption>
</figure>
<p>На реальных проектах такой способ используют, когда добавляют нарочито рисованную анимацию. При этом способы интеграции в проект могут отличаться и зависеть от длительности анимации и технических ограничений.</p>
<p>Один из способов — нарисовать кадры на едином холсте, загрузить на сайт и кадрировать, например, с помощью <code>overflow: hidden</code>. Такие «карты» изображений называются Sprite Sheet. Другой способ — использовать кадры в слоях в SVG.</p>
<figure>
<img src="../media/file8.jpg" alt="Пример Sprite Sheet" />
<figcaption aria-hidden="true">Пример Sprite Sheet</figcaption>
</figure>
<p>Ещё один способ — имитировать то, что кадры нарисованы или собраны вручную. Для этого к координатам добавляют случайные отклонения — небольшие по сравнению с размерами самих объектов. Такой способ называется Wiggle.</p>
<p><strong>Пример Wiggle-движения по: hover.</strong></p>
<figure>
<img src="../media/file9.gif" alt="Пример wiggle" />
<figcaption aria-hidden="true">Пример wiggle</figcaption>
</figure>
<p>Компоновка — более распространённый в компьютерной графике и в вебе способ анимации. Здесь разработчик или аниматор задаёт ключевые фреймы — точки времени, для которых определяет положение и другие свойства. Промежуточные кадры компьютер просчитывает сам в программе, ну или разработчик рассчитывает их в JavaScript, например, с помощью Tween-библиотеки.</p>
<p>Tween — это метод просчёта анимации между двумя ключевыми фреймами с помощью линейной интерполяции.</p>
<figure>
<img src="../media/file10.png" alt="График примера интерполяции" />
<figcaption aria-hidden="true">График примера интерполяции</figcaption>
</figure>
<p>Это то, что делает браузер «из коробки», когда вы применяете CSS <code>transition</code> или <code>animation</code>. В случае <code>transition</code> кадра всего два: состояние, в котором мы застали объект, и новые стили в применённом селекторе или в inline-стилях. При <code>animation</code> стили объекта в отдельных кадрах вы описываете в правилах <code>@keyframes</code>. Об этом пойдёт речь в третьем разделе курса.</p>
<p>Чтобы переходы были более плавными, время внутри отрезков модифицируется с помощью разных функций — временных функций. Затем применяется та же линейная экстраполяция, и на выходе мы получаем кривую вместо ломаной зависимости от времени.</p>
<figure>
<img src="../media/file11.png" alt="График примера интерполяции с ease" />
<figcaption aria-hidden="true">График примера интерполяции с ease</figcaption>
</figure>
<p>В случае с CSS-анимацией вам не нужно задумываться о промежуточных кадрах и способах анимации. С другой стороны, в отдельных случаях порой необходимо описать отдельные кадры, как при фазовке. В этом случае интерполяция будет только мешать. Чтобы её «отключить», нужно использовать ступенчатые временные функции: <code>step-start</code> или <code>step-end</code>. Тогда переключение между кадрами будет мгновенным.</p>
<p>Оба подхода отвечают за то, каким образом вы будете описывать изменение положения объекта во время анимации. Но они не уточняют, какие именно это будут изменения.</p>
</section>
<section id="принцип-2.-дуги" class="level4" data-number="1.6.1.2">
<h4 data-number="1.6.1.2">Принцип 2. Дуги</h4>
<p>Самое простое изменение, которое чаще всего встречается в вебе — линейное перемещение из точки «А» в точку «Б». Но оно реже встречается в окружающем мире и является механическим — менее естественным.</p>
<p>Принцип «Дуги» призывает обращать внимание на те случаи, когда линейное перемещение неуместно, например, вращение конечностей, а также на случаи, когда более сложная траектория может разнообразить работу, сделать её менее стандартной и более выразительной.</p>
<p><strong>Примеры «дуг» в вебе: изогнутый край шторки, вращение бутылок и зигзагов при появлении.</strong></p>
<figure>
<img src="../media/file12.gif" alt="Изогнутый край шторки, вращение бутылок и зигзагов при появлении — пример «дуг» в вебе" />
<figcaption aria-hidden="true">Изогнутый край шторки, вращение бутылок и зигзагов при появлении — пример «дуг» в вебе</figcaption>
</figure>
<p><strong>Пример «дуг» в вебе: вращение бутылок и зигзагов при появлении.</strong></p>
<figure>
<img src="../media/file13.gif" alt="Вращение бутылок и зигзагов при появлении — пример «дуг» в вебе" />
<figcaption aria-hidden="true">Вращение бутылок и зигзагов при появлении — пример «дуг» в вебе</figcaption>
</figure>
<p><strong>Пример «дуг» в вебе: поворот пунктов меню при: hover.</strong></p>
<figure>
<img src="../media/file14.gif" alt="Поворот при hover" />
<figcaption aria-hidden="true">Поворот при hover</figcaption>
</figure>
</section>
<section id="принцип-3.-сценичность" class="level4" data-number="1.6.1.3">
<h4 data-number="1.6.1.3">Принцип 3. Сценичность</h4>
<p>Принцип «Сценичность» подразумевает постоянное внимание к тому, как вашу работу увидит пользователь.</p>
<p>В контексте веба включает в себя три пункта:</p>
<ul>
<li>адаптивность,</li>
<li>анимация по scroll,</li>
<li>3D-трансформации.</li>
</ul>
<section id="адаптивность" class="level5" data-number="1.6.1.3.1">
<h5 data-number="1.6.1.3.1">Адаптивность</h5>
<p>На разных разрешениях и устройствах анимация не должна «разваливаться». Она должна быть заметна и доносить ту информацию, ради которой её сделали. Допустим, на компьютере имеется горизонтальная анимированная иллюстрация. В таком случае нужно сразу подумать об её кадрировании, чтобы пользователь мог разглядеть эту анимацию и на смартфоне. Обсудите это заранее с дизайнером.</p>
</section>
<section id="анимация-по-scroll" class="level5" data-number="1.6.1.3.2">
<h5 data-number="1.6.1.3.2">Анимация по scroll</h5>
<p>При анимации по scroll — прокрутке страницы — не так заметны огрехи тайминга. Дело в том, что пользователь сам управляет скоростью воспроизведения и большую часть времени видит анимацию «застывшей». Однако здесь важно то, насколько аккуратно вы расставили объекты относительно друг друга или их части. Ведь если что-то не стыкуется, то пользователь это сразу увидит, когда перестанет прокручивать страницу.</p>
<p>Например, при настройке параллакса (простыми словами, иллюзии движения объекта относительно фона) может возникнуть ситуация, когда более быстрые слои уже скрылись, а более медленные ещё не подтянулись. Тогда пользователь увидит большой пробел в контенте.</p>
</section>
<section id="d-трансформации" class="level5" data-number="1.6.1.3.3">
<h5 data-number="1.6.1.3.3">3D-трансформации</h5>
<p>Частая ошибка при создании 3D-пролётов сквозь слои — когда один из слоёв прежде чем вылететь из области видимости перекрывает большую часть экрана.</p>
<p><strong>Пример выбивающегося 3D-слоя.</strong></p>
<figure>
<img src="../media/file15.gif" alt="Пример выбивающегося 3D-слоя" />
<figcaption aria-hidden="true">Пример выбивающегося 3D-слоя</figcaption>
</figure>
<p>В таких случаях говорят, что он «ударяется» в пользователя. Этого нужно избегать: выбирать другое конечное положение или скрывать объект до того, как он «ударится» в пользователя.</p>
</section>
</section>
</section>
<section id="основные-принципы-работы-с-таймингом" class="level3" data-number="1.6.2">
<h3 data-number="1.6.2">Основные принципы работы с таймингом</h3>
<section id="принцип-4.-смягчение-начала-и-завершения-движения" class="level4" data-number="1.6.2.1">
<h4 data-number="1.6.2.1">Принцип 4. Смягчение начала и завершения движения</h4>
<p>Первое, самое важное и нерушимое правило при работе с таймингом — смягчение начала и конца движения. Его называют на английском ease in/ease out.</p>
<p>Почему так? Большая часть анимации заимствует образы и движения из реальной жизни. Правило «Смягчение начала и конца движения» происходит из закона об инерции тел. То есть любое тело, обладающее массой, не может мгновенно начать движение, сразу набрать скорость и мгновенно завершить движение.</p>
<p>Казалось бы, кнопки не обладают массой — это так. Мы можем остановить их мгновенно. С другой стороны, конечному пользователю приятнее видеть привычные движения. Мгновенная остановка особенно заметно бросается в глаза: пользователь может этого не осознавать, но такая анимация действует раздражающе.</p>
<p><strong>Сравнение появления кнопки с мгновенной и плавной остановкой.</strong></p>
<figure>
<img src="../media/file16.gif" alt="Сравнение появления кнопки с мгновенной и плавной остановкой" />
<figcaption aria-hidden="true">Сравнение появления кнопки с мгновенной и плавной остановкой</figcaption>
</figure>
<p>Поэтому <strong>никогда</strong> не начинайте движение на заметной скорости и никогда не заканчивайте движение на скорости, отличной от нулевой.</p>
<p><strong>Сравнение временных функций с мгновенной и плавной остановкой.</strong></p>
<figure>
<img src="../media/file17.png" alt="Сравнение временных функций с мгновенной и плавной остановкой" />
<figcaption aria-hidden="true">Сравнение временных функций с мгновенной и плавной остановкой</figcaption>
</figure>
<p>На графиках временных функций изображают изменение координаты. Скорость можно определить по наклону кривой. Скорость равна нулю там, где касательная к ней горизонтальная.</p>
<p>Пользователь может пропустить момент начала движения, а даже если и заметит, далее его отвлечёт последующее движение. Но момент остановки на скорости точно увидит. Ведь в реальной жизни, даже если объект останавливается резко, этому сопутствуют другие вторичные движения. Например, объект сжимается или проскакивает немного и делает возвратное движение.</p>
<p><strong>Пример возвратного движения с замедлением в конце.</strong></p>
<figure>
<img src="../media/file18.gif" alt="Пример возвратного движения с замедлением в конце" />
<figcaption aria-hidden="true">Пример возвратного движения с замедлением в конце</figcaption>
</figure>
<figure>
<img src="../media/file19.gif" alt="График возвратного движения с замедлением" />
<figcaption aria-hidden="true">График возвратного движения с замедлением</figcaption>
</figure>
<p>Даже в этом случае действует правило сброса скорости до нуля. Мгновенная остановка также будет бросаться в глаза.</p>
<p><strong>Пример возвратного движения с мгновенной остановкой без замедления.</strong></p>
<figure>
<img src="../media/file20.gif" alt="Пример возвратного движения с мгновенной остановкой" />
<figcaption aria-hidden="true">Пример возвратного движения с мгновенной остановкой</figcaption>
</figure>
<figure>
<img src="../media/file21.gif" alt="График возвратного движения с мгновенной остановкой" />
<figcaption aria-hidden="true">График возвратного движения с мгновенной остановкой</figcaption>
</figure>
</section>
<section id="принцип-5.-расчёт-времени" class="level4" data-number="1.6.2.2">
<h4 data-number="1.6.2.2">Принцип 5. Расчёт времени</h4>
<p>Этот принцип отвечает за то, какое впечатление будет вызывать анимация.</p>
<p><strong>Сравнение разной скорости появления текста.</strong></p>
<figure>
<img src="../media/file22.gif" alt="Пример появления текста: быстрый и медленный" />
<figcaption aria-hidden="true">Пример появления текста: быстрый и медленный</figcaption>
</figure>
<p>Один и тот же переход в зависимости от времени и характера временной функции будет выглядеть динамичным или плавным, интересным или скучным.</p>
<p>Симметричные временные функции обычно скучные. Плавный переход можно сделать интереснее, если в начале его немного ускорить, а в конце сделать протяжку.</p>
<p><strong>Сравнение появления текста с симметричной и асимметричной временными функциями.</strong></p>
<figure>
<img src="../media/file23.gif" alt="Сравнение появления текста: симметричный и с затягиванием" />
<figcaption aria-hidden="true">Сравнение появления текста: симметричный и с затягиванием</figcaption>
</figure>
<p>Поэтому из стандартных временных функций CSS отдавайте предпочтение <code>ease</code>, а не <code>ease-in-out</code>.</p>
<figure>
<img src="../media/file24.png" alt="Графики ease-in-out и ease" />
<figcaption aria-hidden="true">Графики ease-in-out и ease</figcaption>
</figure>
<p>Другое распространённое применение принципа — имитация физических движений. Например, часто можно встретить отскоки от какой-либо границы, видимой или невидимой, и гармонические колебания, постоянные или затухающие.</p>
<section id="отскоки" class="level5" data-number="1.6.2.2.1">
<h5 data-number="1.6.2.2.1">Отскоки</h5>
<p><strong>Пример анимации появления текста и: hover с отскоками.</strong></p>
<figure>
<img src="../media/file25.gif" alt="Пример отскоков" />
<figcaption aria-hidden="true">Пример отскоков</figcaption>
</figure>
<p>Здесь как раз пригодятся <code>ease-in</code> и <code>ease-out</code>.</p>
<figure>
<img src="../media/file26.png" alt="График отскоков" />
<figcaption aria-hidden="true">График отскоков</figcaption>
</figure>
</section>
<section id="постоянные-колебания" class="level5" data-number="1.6.2.2.2">
<h5 data-number="1.6.2.2.2">Постоянные колебания</h5>
<p>Здесь колебания размеренные.</p>
<p><strong>Пример постоянных размеренных колебаний.</strong></p>
<figure>
<img src="../media/file27.gif" alt="Пример постоянных колебаний" />
<figcaption aria-hidden="true">Пример постоянных колебаний</figcaption>
</figure>
<p>А здесь колебания частые и динамичные. Затуханием авторы полностью пренебрегают, чтобы подчеркнуть то, что звук телефона резкий.</p>
<p><strong>Пример постоянных резких и частых колебаний.</strong></p>
<figure>
<img src="../media/file28.gif" alt="Пример постоянных колебаний" />
<figcaption aria-hidden="true">Пример постоянных колебаний</figcaption>
</figure>
</section>
<section id="затухающие-колебания" class="level5" data-number="1.6.2.2.3">
<h5 data-number="1.6.2.2.3">Затухающие колебания</h5>
<p><strong>Пример затухающих колебаний.</strong></p>
<figure>
<img src="../media/file13.gif" alt="Пример затухающих колебаний" />
<figcaption aria-hidden="true">Пример затухающих колебаний</figcaption>
</figure>
<p>В случае колебаний нужно использовать <code>ease-in-out</code> на отдельных отрезках времени при описании анимации. Эта временная функция по форме напоминает часть синусоиды.</p>
<figure>
<img src="../media/file29.png" alt="График затухающих колебаний" />
<figcaption aria-hidden="true">График затухающих колебаний</figcaption>
</figure>
</section>
</section>
</section>
<section id="дополнительные-принципы-работы-с-пространственными-свойствами-и-таймингом" class="level3" data-number="1.6.3">
<h3 data-number="1.6.3">Дополнительные принципы работы с пространственными свойствами и таймингом</h3>
<p>Дополнительные правила реже используются в вебе, чем основные. Но их использование позволяет придать больше реалистичности и за счёт этого глубже погрузить пользователей в атмосферу сайта.</p>
<section id="принцип-6.-подготовка-или-упреждение" class="level4" data-number="1.6.3.1">
<h4 data-number="1.6.3.1">Принцип 6. Подготовка или упреждение</h4>
<p>Подготовка или упреждение — это микродвижение, замах, который совершает объект, чтобы начать движение.</p>
<p>Чем интенсивнее предстоит движение, тем больше требуется подготовка. Попробуйте бросить камень без замаха. Вряд ли он улетит далеко.</p>
<p>В свою очередь чем плавнее движение, тем с большей уверенностью можно отказаться от этого правила.</p>
<p><strong>Иллюстрация подготовки на примере анимаций сэндвича/крестика.</strong></p>
<figure>
<img src="../media/file30.gif" alt="Иллюстрация подготовки на примере анимаций сэндвича/крестика" />
<figcaption aria-hidden="true">Иллюстрация подготовки на примере анимаций сэндвича/крестика</figcaption>
</figure>
<p><strong>Иллюстрация подготовки на примере анимаций кнопки.</strong></p>
<figure>
<img src="../media/file31.gif" alt="Иллюстрация подготовки на примере анимаций кнопки" />
<figcaption aria-hidden="true">Иллюстрация подготовки на примере анимаций кнопки</figcaption>
</figure>
<p>К подготовке также можно отнести паузу перед переходом или затяжное начало движения. Пользователю дают долю секунды сориентироваться и осознать переход. Такая пауза может пригодиться, когда переход ожидается короткий.</p>
<p><strong>Пример паузы в качестве подготовки к переходу.</strong></p>
<figure>
<img src="../media/file32.gif" alt="Пример паузы в качестве подготовки к переходу" />
<figcaption aria-hidden="true">Пример паузы в качестве подготовки к переходу</figcaption>
</figure>
</section>
<section id="принцип-7.-сжатие-и-растяжение" class="level4" data-number="1.6.3.2">
<h4 data-number="1.6.3.2">Принцип 7. Сжатие и растяжение</h4>
<p>Принцип «Сжатие и растяжение» позволяет сделать объект пластичным и придать тактильность странице.</p>
<p>Это правило часто иллюстрируют с помощью анимации мяча. На ней легко увидеть, как работают сжатие и растяжение вместе. В момент ударения о землю мяч сплющивается по вертикали и в то же время растягивается по горизонтали. Сравните две анимации:</p>
<p><strong>Сравнение анимации удара мяча с поперечным растяжением и без него.</strong></p>
<figure>
<img src="../media/file33.gif" alt="Сравнение анимации удара мяча с поперечным растяжением и без него" />
<figcaption aria-hidden="true">Сравнение анимации удара мяча с поперечным растяжением и без него</figcaption>
</figure>
<p>В той, где нет поперечного растяжения, мяч уменьшается в объёме, но у этого нет внешней причины, поэтому анимация смотрится неправдоподобно.</p>
<p>В следующем примере круг тянется за курсором и во время движения становится уже, поэтому он выглядит «резиновым».</p>
<p><strong>Пример сжатия/растяжения круга, следующего за курсором.</strong></p>
<figure>
<img src="../media/file34.gif" alt="Пример круга, следующего за курсором" />
<figcaption aria-hidden="true">Пример круга, следующего за курсором</figcaption>
</figure>
<p>Когда растяжение или сжатие небольшое, поперечную трансформацию иногда не показывают.</p>
<p>В некоторых случаях поперечное сжатие можно заменить прозрачностью. Объект словно становится тоньше и поэтому прозрачнее. Например, в следующем примере появляющиеся таблички выглядят невесомыми и пластичными. Это ощущение поддерживается таймингом.</p>
<p><strong>Пример замены поперечного сжатия прозрачностью.</strong></p>
<figure>
<img src="../media/file35.gif" alt="Пример замены поперечного сжатия прозрачностью" />
<figcaption aria-hidden="true">Пример замены поперечного сжатия прозрачностью</figcaption>
</figure>
<p>В вебе не всегда придерживаются принципа «Сжатия и растяжения», поскольку часто имеют дело с абстракциями. Порой также используют разные вариации этого правила. Например, здесь пластичность летающим табличкам придаёт не сжатие или растяжение по основным осям, а наклон формы — <code>skew</code>.</p>
<p><strong>Пример придания «пластичности» объекту с помощью skew-трансформации.</strong></p>
<figure>
<img src="../media/file36.gif" alt="Пример skew" />
<figcaption aria-hidden="true">Пример skew</figcaption>
</figure>
</section>
<section id="принцип-8.-доводка-и-захлёст" class="level4" data-number="1.6.3.3">
<h4 data-number="1.6.3.3">Принцип 8. Доводка и захлёст</h4>
<p>Доводка и захлёст — это приёмы работы с составными объектами. Группы элементов также можно рассматривать как один составной объект, например: нумерованные и ненумерованные списки, слова или буквы в предложениях, все элементы одного экрана/блока при появлении или скрытии.</p>
<p>При захлёсте части конструкции движутся с разной скоростью, отстают и затем догоняют другие части.</p>
<p><strong>Пример анимации с захлёстом.</strong></p>
<figure>
<img src="../media/file37.gif" alt="Пример захлёста" />
<figcaption aria-hidden="true">Пример захлёста</figcaption>
</figure>
<p>При доводке или сквозном движении отдельные части конструкции продолжают движение после остановки основной ведущей части.</p>
<p><strong>Пример появления текста с доводкой.</strong></p>
<figure>
<img src="../media/file38.gif" alt="Пример появления текста с доводкой" />
<figcaption aria-hidden="true">Пример появления текста с доводкой</figcaption>
</figure>
<p><strong>Пример доводки заливки внутри пунктов меню.</strong></p>
<figure>
<img src="../media/file39.gif" alt="Пример доводки заливки внутри пунктов меню" />
<figcaption aria-hidden="true">Пример доводки заливки внутри пунктов меню</figcaption>
</figure>
<p>Оба приёма происходят из того, что в реальности части людей, животных или других объектов часто состоят из разных материалов. Они обладают разной инерцией и пластичностью. Например, если человек поскользнётся на банановой кожуре, он не упадёт весь разом, как если бы перевернулся стакан воды. Сначала будет падать туловище, руки и голова немного отстанут, а последними на земле окажутся волосы и полы одежды.</p>
<p><strong>Пример захлёста более лёгких частей одежды.</strong></p>
<figure>
<img src="../media/file40.gif" alt="Пример движения более лёгких частей одежды" />
<figcaption aria-hidden="true">Пример движения более лёгких частей одежды</figcaption>
</figure>
<p>Таким же образом при анимации можно разграничить объекты на ведущие, которые тянут за собой другие, и отстающие. Причём меняя настройки отставания, то есть время движения частей и паузы, можно придавать больше или меньше воздушности всей системе.</p>
<p><strong>Пример доводки букв.</strong></p>
<figure>
<img src="../media/file41.gif" alt="Пример доводки букв" />
<figcaption aria-hidden="true">Пример доводки букв</figcaption>
</figure>
</section>
</section>
<section id="принципы-выразительности-анимации" class="level3" data-number="1.6.4">
<h3 data-number="1.6.4">Принципы выразительности анимации</h3>
<p>Предыдущие правила говорят о том, как достичь реалистичности. Однако даже реалистичная анимация может выглядеть обыденно. Следующие правила подскажут, как сделать анимацию более выразительной и запоминающейся.</p>
<section id="принцип-9.-преувеличение" class="level4" data-number="1.6.4.1">
<h4 data-number="1.6.4.1">Принцип 9. Преувеличение</h4>
<p>Переигрывайте! Как в комедийном спектакле или фильме-мелодраме.</p>
<p>Чтобы сжатие и растяжение было заметно, добавьте амплитуды.</p>
<p><strong>Пример преувеличения в сжатии и растяжении.</strong></p>
<figure>
<img src="../media/file28.gif" alt="Пример преувеличения в сжатии и растяжении" />
<figcaption aria-hidden="true">Пример преувеличения в сжатии и растяжении</figcaption>
</figure>
<p>Чтобы затяжка во временной функции сработала, усильте её.</p>
<p>Во-первых, с преувеличением можно быть уверенным, что ваш эффект будет замечен. Если в примере ниже 3D-деформацию текста сделать не такой сильной, она перестанет считываться. И тогда добавлять её было бы бессмысленно.</p>
<p><strong>Пример анимации появления текста с деформацией.</strong></p>
<figure>
<img src="../media/file42.gif" alt="Пример анимации появления текста с деформацией" />
<figcaption aria-hidden="true">Пример анимации появления текста с деформацией</figcaption>
</figure>
<p>Во-вторых, людям интереснее контрасты: в музыке, изображениях, движении, сюжете. Монотонность их усыпляет.</p>
<p><strong>Пример анимации с большой амплитудой.</strong></p>
<figure>
<img src="../media/file43.gif" alt="Пример анимации с большой амплитудой" />
<figcaption aria-hidden="true">Пример анимации с большой амплитудой</figcaption>
</figure>
</section>
<section id="принцип-10.-дополнительное-действие-или-выразительная-деталь" class="level4" data-number="1.6.4.2">
<h4 data-number="1.6.4.2">Принцип 10. Дополнительное действие или выразительная деталь</h4>
<p>К привычным движениям можно добавить дополнительные, тем самым разнообразить сайт и придать ему индивидуальности. В этом правиле нет универсальных действий. Всё зависит от элементов дизайна. Присматривайтесь к тому, из чего состоит макет: какие второстепенные элементы можно анимировать, чтобы поддержать основную анимацию.</p>
<p>Здесь кроме перьев, двигающихся по правилу захлёста, есть усы, которые отражают скорее мимику, нежели просто повторяют движение головы.</p>
<p><strong>Пример анимации выразительной детали — усов.</strong></p>
<figure>
<img src="../media/file40.gif" alt="Пример выразительной детали — анимация усов" />
<figcaption aria-hidden="true">Пример выразительной детали — анимация усов</figcaption>
</figure>
<p>В следующем примере авторы вместо привычной заливки по <code>:hover</code> через прозрачность сделали заливку ещё одним движущимся элементом. К тому же этот элемент двигается по правилу доводки.</p>
<p><strong>Пример анимации выразительной детали — заливка текста.</strong></p>
<figure>
<img src="../media/file39.gif" alt="Пример выразительной детали — заливка" />
<figcaption aria-hidden="true">Пример выразительной детали — заливка</figcaption>
</figure>
<p>А здесь аниматор добавил пикантное дыхание, которое, возможно, заставит улыбнуться внимательного пользователя.</p>
<p><strong>Пример анимации выразительной детали — Мона Лиза.</strong></p>
<figure>
<img src="../media/file44.gif" alt="Пример выразительной детали — заливка" />
<figcaption aria-hidden="true">Пример выразительной детали — заливка</figcaption>
</figure>
</section>
<section id="принцип-11.-привлекательность-или-харизматичность" class="level4" data-number="1.6.4.3">
<h4 data-number="1.6.4.3">Принцип 11. Привлекательность или харизматичность</h4>
<p>В классическом правиле речь идёт о персонажах. Это рекомендации по тому, как сделать персонаж привлекательным в зависимости от того, является он героем или злодеем.</p>
<p>Мы поступим аналогично и дадим рекомендации по тому, как подчеркнуть то или иное настроение проекта.</p>
<section id="мрачное-настроение.-темы-насилия-оружия-опасности" class="level5" data-number="1.6.4.3.1">
<h5 data-number="1.6.4.3.1">Мрачное настроение. Темы насилия, оружия, опасности</h5>
<p>Сильные контрасты скоростей, резкие движения, нет сжатия или растяжения, ведь объекты жёсткие и тяжёлые. Переходы через чёрный экран, глитч.</p>
</section>
<section id="детская-юмористическая-или-праздничная-тематика" class="level5" data-number="1.6.4.3.2">
<h5 data-number="1.6.4.3.2">Детская, юмористическая или праздничная тематика</h5>
<p>Мультяшный стиль: преувеличенные сжатие и растяжение, зависания в воздухе, дуги, сильно выраженные подготовка и дополнительные действия.</p>
</section>
<section id="fashion-и-luxury-style" class="level5" data-number="1.6.4.3.3">
<h5 data-number="1.6.4.3.3">Fashion и luxury style</h5>
<p>Контрастные движения с длительной затяжкой, длинная доводка, растяжение с акцентом на лёгкости, дополнительные трансформации, чтобы подчеркнуть лёгкость объектов, степенные движения.</p>
</section>
</section>
</section>
<section id="принципы-повышения-качества-анимации" class="level3" data-number="1.6.5">
<h3 data-number="1.6.5">Принципы повышения качества анимации</h3>
<p>Все усилия окажутся бесполезными, если результат работы выглядит некачественно. Поэтому будьте внимательны к деталям макетов и учитывайте следующее правило.</p>
<section id="принцип-12.-объёмный-рисунок" class="level4" data-number="1.6.5.1">
<h4 data-number="1.6.5.1">Принцип 12. Объёмный рисунок</h4>
<p>Объекты необходимо анимировать с учётом их формы в трёхмерном пространстве.</p>
<p>Если вы анимируете объект, имеющий аналог в обычном мире, то желательно трансформировать и перерисовывать его так, как если бы он был объёмным. В 2D-графике этого можно добиться в небольших пределах с помощью смещения частей объекта, растяжения и сжатия частей корпуса и появления деталей, которые при другом ракурсе не были видны.</p>
<p><strong>Сравнение анимации с учётом трёхмерности и без неё.</strong></p>
<p>Без учёта трёхмерности:</p>
<figure>
<img src="../media/file45.gif" alt="Пример анимации без учёта трёхмерности" />
<figcaption aria-hidden="true">Пример анимации без учёта трёхмерности</figcaption>
</figure>
<p>С учётом трёхмерности:</p>
<figure>
<img src="../media/file46.gif" alt="Пример анимации с учётом трёхмерности" />
<figcaption aria-hidden="true">Пример анимации с учётом трёхмерности</figcaption>
</figure>
<p>Другим приёмом создания псевдо-3D объёма является параллакс. В нём слои на переднем плане движутся быстрее, чем слои на заднем плане. Вместе они создают иллюзию объёма без использования WebGL.</p>
<p><strong>Пример параллакса.</strong></p>
<figure>
<img src="../media/file47.gif" alt="Пример параллакса" />
<figcaption aria-hidden="true">Пример параллакса</figcaption>
</figure>
<p>Некоторые разработчики прибегают к этому правилу специально, чтобы придать индивидуальность своей работе.</p>
<hr />
<p>Мы привели 12 принципов анимации от практичных и обязательных к более творческим и абстрактным. Внедрять их в работу также можно постепенно, по мере изучения технических инструментов. Это позволит вам развить навыки и повысить качество и выразительность проектов.</p>
</section>
</section>
</div>
</section>
<section id="задание-1" class="level2" data-number="1.7">
<h2 data-number="1.7">1.7. Задание 1</h2>
<div class="text-container text-container--module">
<p>Есть несколько кнопок, для которых нужно добавить переходы свойств, указанных в правиле при наведении.</p>
<p>Используйте время перехода в 0,3 секунды, укажите, какие свойства будут меняться. Для отдельных свойств можно задать запоздание.</p>
<p>По итогам выполнения работы у вас может получиться такой результат:</p>
<figure>
<img src="../media/file48.gif" alt="Результат" />
<figcaption aria-hidden="true">Результат</figcaption>
</figure>
</div>
</section>
<section id="эталонное-решение-задания" class="level2" data-number="1.8">
<h2 data-number="1.8">1.8. Эталонное решение задания</h2>
<div class="text-container text-container--module">
<section id="шаг-1" class="level3" data-number="1.8.1">
<h3 data-number="1.8.1">Шаг №1</h3>
<p>Результат выполнения задания. Рассмотрим его пошагово.</p>
</section>
<section id="шаг-2" class="level3" data-number="1.8.2">
<h3 data-number="1.8.2">Шаг №2</h3>
<p>Для первой кнопки при наведении и фокусе задана смена тени и прозрачности обводки. Укажем переход для этих двух свойств за 0,3 секунды. Так как у обводки меняется только цвет, то в переходе участвует <code>outline-color</code>, а не весь <code>outline</code>.</p>
</section>
<section id="шаг-3" class="level3" data-number="1.8.3">
<h3 data-number="1.8.3">Шаг №3</h3>
<p>У второй кнопки при наведении и фокусе меняются фоновый цвет, цвет обводки и текста. Укажем для них время перехода в 0,3 секунды. Для обводки можем задать запоздание в 0,2 секунды.</p>
</section>
<section id="шаг-4" class="level3" data-number="1.8.4">
<h3 data-number="1.8.4">Шаг №4</h3>
<p>У третьей кнопки при наведении и фокусе меняются фоновый цвет, цвет текста и рамки. Добавим им переход за 0,3 секунды.</p>
<p>Дополнительно укажем задержку перехода цвета текста при наведении на кнопку. При отведении мыши с кнопки цвет текста будет меняться без задержки.</p>
</section>
<section id="шаг-5" class="level3" data-number="1.8.5">
<h3 data-number="1.8.5">Шаг №5</h3>
<p>Ну и для четвёртой кнопки укажем переход цвета текста и фона за 0,3 секунды.</p>
<p>Готово!</p>
</section>
</div>
</section>
<section id="задание-2" class="level2" data-number="1.9">
<h2 data-number="1.9">1.9. Задание 2</h2>
<div class="text-container text-container--module">
<p>Вам прислали карточки товаров магазина кед. Нужно добавить простую анимацию:</p>
<ul>
<li>при наведении на кнопки в карточках,</li>
<li>при наведении на саму карточку.</li>
</ul>
<p>Наведения на элементы уже есть в стилях, нужно дописать к ним варианты перехода:</p>
<ul>
<li><p>Для кнопки фоновый цвет должен меняться 0,5 секунды, а тень — 0,3 секунды. При этом обе анимации должны закончиться одновременно.</p></li>
<li><p>Для карточек должно быть разное время перехода при наведении и отведении мыши с карточки. Фоновый цвет и тень меняются с одинаковой скоростью.</p></li>
</ul>
<p>По итогам выполнения работы у вас может получиться такой результат:</p>
<figure>
<img src="../media/file49.gif" alt="Результат" />
<figcaption aria-hidden="true">Результат</figcaption>
</figure>
</div>
</section>
<section id="эталонное-решение-задания-1" class="level2" data-number="1.10">
<h2 data-number="1.10">1.10. Эталонное решение задания</h2>
<div class="text-container text-container--module">
<section id="шаг-1-1" class="level3" data-number="1.10.1">
<h3 data-number="1.10.1">Шаг №1</h3>
<p>В исходном состоянии анимаций нет.</p>
</section>
<section id="шаг-2-1" class="level3" data-number="1.10.2">
<h3 data-number="1.10.2">Шаг №2</h3>
<p>Добавим наведение на кнопки в карточках.</p>
</section>
<section id="шаг-3-1" class="level3" data-number="1.10.3">
<h3 data-number="1.10.3">Шаг №3</h3>
<p>Добавим наведение для карточек <code>shoes-card</code>: изменение при наведении происходит за 0,75 секунды, а исчезновение — за 0,3 секунды.</p>
</section>
</div>
</section>
<section id="задание-3" class="level2" data-number="1.11">
<h2 data-number="1.11">1.11. Задание 3</h2>
<div class="text-container text-container--module">
<p>Для блоков соцсетей требуется добавить переходы. Свойства меняются при наведении и фокусе. У первой группы иконок <code>:hover</code> и <code>:focus</code> отличаются, у второй и третьей — одинаковые.</p>
<p>В итоге у вас может получиться такой результат:</p>
<figure>
<img src="../media/file50.gif" alt="Результат" />
<figcaption aria-hidden="true">Результат</figcaption>
</figure>
</div>
</section>
<section id="эталонное-решение-задания-2" class="level2" data-number="1.12">
<h2 data-number="1.12">1.12. Эталонное решение задания</h2>
<div class="text-container text-container--module">
<section id="шаг-1-2" class="level3" data-number="1.12.1">
<h3 data-number="1.12.1">Шаг №1</h3>
<p>Результат выполнения задания. Рассмотрим его пошагово.</p>
</section>
<section id="шаг-2-2" class="level3" data-number="1.12.2">
<h3 data-number="1.12.2">Шаг №2</h3>
<p>В первом блоке у соцсетей при наведении меняется фоновый цвет, а при фокусе добавляется обводка и меняется заливка инлайнового SVG. Добавим переход для кнопки, указав фон и обводку. Для SVG напишем отдельное правило с плавностью изменения <code>fill</code>.</p>
</section>
<section id="шаг-3-2" class="level3" data-number="1.12.3">
<h3 data-number="1.12.3">Шаг №3</h3>
<p>Во втором блоке добавляем переход для цвета обводки и расстояния между краем элемента и рамкой, созданной с помощью свойства <code>outline</code>.</p>
</section>
<section id="шаг-4-1" class="level3" data-number="1.12.4">
<h3 data-number="1.12.4">Шаг №4</h3>
<p>И в третьем блоке также используем переход <code>outline-offset</code> и тени элемента.</p>
</section>
</div>
</section>
<section id="тест-по-материалам-модуля-1" class="level2" data-number="1.13">
<h2 data-number="1.13">1.13. Тест по материалам модуля 1</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Какой формат графики появился первым?</strong></li>
</ol>
<ul>
<li>GIF.</li>
<li>SVG.</li>
<li>Canvas.</li>
</ul>
<ol start="2" type="1">
<li><strong>От какой технологии для создания анимаций на сайте полностью отказались в 2020 году?</strong></li>
</ol>
<ul>
<li>WebGl.</li>
<li>Flash.</li>
<li>JavaScript.</li>
<li>Canvas.</li>
</ul>
<ol start="3" type="1">
<li><strong>Выберите варианты, чем важна для пользователя анимация интерфейса на сайте?</strong></li>
</ol>
<ul>
<li>Сгладить переходы между разными состояниями элементов интерфейса.</li>
<li>Привлечь к себе внимание.</li>
<li>Показать результат изменений после каких-то действий пользователя.</li>
<li>Создать wow-эффект, независимо от нагрузки на скорость загрузки сайта.</li>
<li>Рассказать историю.</li>
</ul>
<ol start="4" type="1">
<li><strong>Какое свойство позволяет настроить CSS-переход?</strong></li>
</ol>
<ul>
<li>transition.</li>
<li>transform.</li>
<li>opacity.</li>
</ul>
<ol start="5" type="1">
<li><strong>Какого свойства не существует?</strong></li>
</ol>
<ul>
<li>transition-timing-function.</li>
<li>transition-name.</li>
<li>transition-delay.</li>
</ul>
<ol start="6" type="1">
<li><strong>За что отвечает значение 0.4s в правиле</strong></li>
</ol>
<div class="sourceCode" id="cb6"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.btn</span> {</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: opacity <span class="dv">0.4</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<ul>
<li>За длительность анимации.</li>
<li>За скорость анимации.</li>
<li>За задержку анимации.</li>
</ul>
<ol start="7" type="1">
<li><strong>За что отвечает значение 0.1s в правиле</strong></li>
</ol>
<div class="sourceCode" id="cb7"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.btn</span> {</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: opacity <span class="dv">0.4</span><span class="dt">s</span> <span class="dv">ease</span> <span class="dv">0.1</span><span class="dt">s</span><span class="op">;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<ul>
<li>За длительность анимации.</li>
<li>За скорость анимации.</li>
<li>За задержку анимации.</li>
</ul>
<ol start="8" type="1">
<li><strong>Какое свойство изменится первым в данной анимации?</strong></li>
</ol>
<div class="sourceCode" id="cb8"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.btn</span> {</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">transition</span>: background-color <span class="dv">1</span><span class="dt">s</span> <span class="dv">ease-in</span> <span class="dv">0.15</span><span class="dt">s</span><span class="op">,</span> opacity <span class="dv">0.4</span><span class="dt">s</span> <span class="dv">ease</span> <span class="dv">0.5</span><span class="dt">s</span><span class="op">,</span> color <span class="dv">0.2</span><span class="dt">s</span> <span class="dv">linear</span> <span class="dv">0.3</span><span class="dt">s</span><span class="op">,</span>  box-shadow <span class="dv">0.5</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  }</span></code></pre></div>
<ul>
<li>Тень.</li>
<li>Прозрачность.</li>
<li>Цвет текста.</li>
<li>Цвет фона.</li>
</ul>
<ol start="9" type="1">
<li><strong>Выберите все свойства, которые не рекомендуется использовать для анимирования.</strong></li>
</ol>
<ul>
<li>border.</li>
<li>width.</li>
<li>transform.</li>
<li>font-size.</li>
<li>background-position.</li>
</ul>
<ol start="10" type="1">
<li><strong>Сколько времени будет длиться анимация при наведении на элемент?</strong></li>
</ol>
<div class="sourceCode" id="cb9"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.box</span> { <span class="kw">transition</span>: background-color <span class="dv">1</span><span class="dt">s</span> <span class="dv">ease</span> <span class="dv">0.2</span><span class="dt">s</span><span class="op">;</span> }</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="fu">.box</span><span class="in">:hover</span> { <span class="kw">transition</span>: background-color <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span>}</span></code></pre></div>
<ul>
<li>0.1s.</li>
<li>0.2s.</li>
<li>0.3s.</li>
<li>1s.</li>
</ul>
</div>
</section>
<section id="тест-по-материалам-модуля-1-ответы" class="level2" data-number="1.14">
<h2 data-number="1.14">1.13. Тест по материалам модуля 1 (Ответы)</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Какой формат графики появился первым?</strong></li>
</ol>
<ul>
<li>GIF.</li>
</ul>
<ol start="2" type="1">
<li><strong>От какой технологии для создания анимаций на сайте полностью отказались в 2020 году?</strong></li>
</ol>
<ul>
<li>Flash.</li>
</ul>
<ol start="3" type="1">
<li><strong>Выберите варианты, чем важна для пользователя анимация интерфейса на сайте?</strong></li>
</ol>
<ul>
<li>Сгладить переходы между разными состояниями элементов интерфейса.</li>
<li>Показать результат изменений после каких-то действий пользователя.</li>
<li>Рассказать историю.</li>
</ul>
<ol start="4" type="1">
<li><strong>Какое свойство позволяет настроить CSS-переход?</strong></li>
</ol>
<ul>
<li>transition.</li>
</ul>
<ol start="5" type="1">
<li><strong>Какого свойства не существует?</strong></li>
</ol>
<ul>
<li>transition-name.</li>
</ul>
<ol start="6" type="1">
<li><strong>За что отвечает значение 0.4s в правиле</strong></li>
</ol>
<div class="sourceCode" id="cb10"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.btn</span> {</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: opacity <span class="dv">0.4</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<ul>
<li>За длительность анимации.</li>
</ul>
<ol start="7" type="1">
<li><strong>За что отвечает значение 0.1s в правиле</strong></li>
</ol>
<div class="sourceCode" id="cb11"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.btn</span> {</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">transition</span>: opacity <span class="dv">0.4</span><span class="dt">s</span> <span class="dv">ease</span> <span class="dv">0.1</span><span class="dt">s</span><span class="op">;</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<ul>
<li>За задержку анимации.</li>
</ul>
<ol start="8" type="1">
<li><strong>Какое свойство изменится первым в данной анимации?</strong></li>
</ol>
<div class="sourceCode" id="cb12"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.btn</span> {</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">transition</span>: background-color <span class="dv">1</span><span class="dt">s</span> <span class="dv">ease-in</span> <span class="dv">0.15</span><span class="dt">s</span><span class="op">,</span> opacity <span class="dv">0.4</span><span class="dt">s</span> <span class="dv">ease</span> <span class="dv">0.5</span><span class="dt">s</span><span class="op">,</span> color <span class="dv">0.2</span><span class="dt">s</span> <span class="dv">linear</span> <span class="dv">0.3</span><span class="dt">s</span><span class="op">,</span>  box-shadow <span class="dv">0.5</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  }</span></code></pre></div>
<ul>
<li>Тень.</li>
</ul>
<ol start="9" type="1">
<li><strong>Выберите все свойства, которые не рекомендуется использовать для анимирования.</strong></li>
</ol>
<ul>
<li>border.</li>
<li>width.</li>
<li>font-size.</li>
</ul>
<ol start="10" type="1">
<li><strong>Сколько времени будет длиться анимация при наведении на элемент?</strong></li>
</ol>
<div class="sourceCode" id="cb13"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.box</span> { <span class="kw">transition</span>: background-color <span class="dv">1</span><span class="dt">s</span> <span class="dv">ease</span> <span class="dv">0.2</span><span class="dt">s</span><span class="op">;</span> }</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="fu">.box</span><span class="in">:hover</span> { <span class="kw">transition</span>: background-color <span class="dv">0.3</span><span class="dt">s</span> <span class="dv">ease</span><span class="op">;</span>}</span></code></pre></div>
<ul>
<li>0.3s.</li>
</ul>
</div>
</section>
<section id="изменение-прозрачности-элемента-при-наведении" class="level2" data-number="1.15">
<h2 data-number="1.15">1.14. Изменение прозрачности элемента при наведении</h2>
<section id="шаг-1-3" class="level3 text-container text-container--module" data-number="1.15.1">
<h3 data-number="1.15.1">Шаг №1</h3>
<p>Несколько примеров смены <code>opacity</code> элемента с разной скоростью <code>transition-duration</code> и без.</p>
</section>
</section>
<section id="изменение-цвета-фона-кнопки-при-наведении" class="level2" data-number="1.16">
<h2 data-number="1.16">1.15. Изменение цвета фона кнопки при наведении</h2>
<section id="шаг-1-4" class="level3 text-container text-container--module" data-number="1.16.1">
<h3 data-number="1.16.1">Шаг №1</h3>
<p>Изменение цвета фона кнопки с разными значениями времени при наведении и отведении курсора.</p>
</section>
</section>
<section id="изменение-прозрачности-кнопки-с-задержкой" class="level2" data-number="1.17">
<h2 data-number="1.17">1.16. Изменение прозрачности кнопки с задержкой</h2>
<section id="шаг-1-5" class="level3 text-container text-container--module" data-number="1.17.1">
<h3 data-number="1.17.1">Шаг №1</h3>
<p>Изменение прозрачности кнопки при наведении с задержкой <code>transition-delay</code>. Задержка срабатывает, когда курсор уводят с кнопки, при наведении задержка равна 0s.</p>
</section>
</section>
<section id="пример-перехода-для-анимации-кнопки" class="level2" data-number="1.18">
<h2 data-number="1.18">1.17. Пример перехода для анимации кнопки</h2>
<section id="шаг-1-6" class="level3 text-container text-container--module" data-number="1.18.1">
<h3 data-number="1.18.1">Шаг №1</h3>
<p>После выполнения всех шагов из статьи «С чего начать делать анимацию» мы получим такой результат.</p>
</section>
</section>
<section id="изменение-цвета-фона-кнопки-при-наведении-1" class="level2" data-number="1.19">
<h2 data-number="1.19">1.18. Изменение цвета фона кнопки при наведении</h2>
<section id="шаг-1-7" class="level3 text-container text-container--module" data-number="1.19.1">
<h3 data-number="1.19.1">Шаг №1</h3>
<p>Изменение цвета фона кнопки при наведении и фокусе.</p>
</section>
</section>
<section id="изменение-цвета-текста-кнопки-при-наведении" class="level2" data-number="1.20">
<h2 data-number="1.20">1.19. Изменение цвета текста кнопки при наведении</h2>
<section id="шаг-1-8" class="level3 text-container text-container--module" data-number="1.20.1">
<h3 data-number="1.20.1">Шаг №1</h3>
<p>Изменение цвета текста кнопки при наведении и фокусе.</p>
</section>
</section>
<section id="добавление-тени-к-кнопке-при-наведении" class="level2" data-number="1.21">
<h2 data-number="1.21">1.20. Добавление тени к кнопке при наведении</h2>
<section id="шаг-1-9" class="level3 text-container text-container--module" data-number="1.21.1">
<h3 data-number="1.21.1">Шаг №1</h3>
<p>Добавление тени к кнопке при наведении и фокусе. С помощью <code>box-shadow</code> можно создавать разные эффекты.</p>
</section>
</section>
<section id="изменение-разных-css-свойств-кнопки-при-наведении" class="level2" data-number="1.22">
<h2 data-number="1.22">1.21. Изменение разных CSS-свойств кнопки при наведении</h2>
<section id="шаг-1-10" class="level3 text-container text-container--module" data-number="1.22.1">
<h3 data-number="1.22.1">Шаг №1</h3>
<p>Можно делать более сложные переходы, меняя CSS-свойства с разными значениями <code>transiton</code>.</p>
</section>
</section>
<section id="примеры-простой-анимации-для-карточек-товара-магазина-мебели" class="level2" data-number="1.23">
<h2 data-number="1.23">1.22. Примеры простой анимации для карточек товара магазина мебели</h2>
<div class="text-container text-container--module">
<section id="шаг-1-11" class="level3" data-number="1.23.1">
<h3 data-number="1.23.1">Шаг №1</h3>
<p>В исходном состоянии никакой анимации и состояний при наведении нет.</p>
</section>
<section id="шаг-2-3" class="level3" data-number="1.23.2">
<h3 data-number="1.23.2">Шаг №2</h3>
<p>Добавим наведение на кнопку в карточке товара и сделаем анимацию плавной.</p>
</section>
<section id="шаг-3-3" class="level3" data-number="1.23.3">
<h3 data-number="1.23.3">Шаг №3</h3>
<p>Добавим анимацию при наведении на первую карточку <code>interior-card--hover-1</code>. Изменение <code>box-shadow</code> происходит за 0,3 секунды при наведении, а возвращение в исходное состояние — за одну секунду.</p>
</section>
<section id="шаг-4-2" class="level3" data-number="1.23.4">
<h3 data-number="1.23.4">Шаг №4</h3>
<p>У второй карточки <code>interior-card--hover-2</code> изменение <code>background-color</code> происходит за 0,3 секунды в обе стороны.</p>
</section>
<section id="шаг-5-1" class="level3" data-number="1.23.5">
<h3 data-number="1.23.5">Шаг №5</h3>
<p>Для третьей карточки <code>interior-card--hover-3</code> объединим анимацию тени и цвета фона.</p>
</section>
</div>
</section>
<section id="примеры-простой-анимации-для-карточек-товара-магазина-техники" class="level2" data-number="1.24">
<h2 data-number="1.24">1.23. Примеры простой анимации для карточек товара магазина техники</h2>
<div class="text-container text-container--module">
<section id="шаг-1-12" class="level3" data-number="1.24.1">
<h3 data-number="1.24.1">Шаг №1</h3>
<p>Пока анимации нет. Название бренда в разметке карточек записано в дата-атрибут <code>data-brand</code>, и в CSS мы используем его в псевдоэлементе <code>::after</code> <code>content: attr (data-brand)</code>. Это помогает сделать вёрстку более универсальной и не добавлять модификаторы для стилизации карточек. При добавлении карточек с новыми брендами контент-менеджеру не придётся думать о стилях. Он просто добавит новое значение в дата-атрибут.</p>
</section>
<section id="шаг-2-4" class="level3" data-number="1.24.2">
<h3 data-number="1.24.2">Шаг №2</h3>
<p>Добавим анимацию при наведении и фокусе кнопки карточек.</p>
</section>
<section id="шаг-3-4" class="level3" data-number="1.24.3">
<h3 data-number="1.24.3">Шаг №3</h3>
<p>В первой карточке изменение <code>box-shadow</code> происходит за 0,3 секунды в обе стороны.</p>
</section>
<section id="шаг-4-3" class="level3" data-number="1.24.4">
<h3 data-number="1.24.4">Шаг №4</h3>
<p>Во второй карточке изменение <code>background-color</code> происходит за 0,3 секунды в обе стороны, а возвращение в исходное состояние — за 1 секунду.</p>
</section>
<section id="шаг-5-2" class="level3" data-number="1.24.5">
<h3 data-number="1.24.5">Шаг №5</h3>
<p>В третьей карточке <code>background-color</code> и <code>box-shadow</code> меняются без перехода.</p>
</section>
</div>
</section>
</section>
</body>
</html>
