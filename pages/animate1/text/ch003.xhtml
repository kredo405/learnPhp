<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ru-RU">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch003.xhtml</title>
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body epub:type="bodymatter">
<section id="css-правило-keyframes-и-группа-свойств-animation-css" class="level1" data-number="3">
<h1 data-number="3">3. CSS правило <span class="citation" data-cites="keyframes">@keyframes</span> и группа свойств Animation CSS</h1>
<div class="text-container text-container--module">
<p>В третьем разделе мы рассмотрим анимации без пользовательского взаимодействия, созданные при помощи директивы <span class="citation" data-cites="keyframes">@keyframes</span> и группы свойств Animation.</p>
</div>
<section id="css-правило-keyframes-и-группа-свойств-animation-css-1" class="level2" data-number="3.1">
<h2 data-number="3.1">3.1. CSS правило <span class="citation" data-cites="keyframes">@keyframes</span> и группа свойств animation CSS</h2>
<div class="text-container text-container--module">
<p>CSS-анимации имеют больше возможностей и помогают сделать то, что не могут CSS-переходы. В том числе создавать анимации с количеством шагов больше двух или запускаться сразу же при загрузке страницы и повторяться любое количество раз без какого-либо действия пользователя.</p>
<p>Для описания того, что именно будет происходить во время анимации, задаются так называемые ключевые кадры — то есть точки между стартом и финишем цикла анимации. Этих точек может быть любое количество, между ними CSS-свойства меняют свои значения.</p>
<p>Чтобы задать элементу какую-либо анимацию, сперва нужно описать её ключевые кадры с помощью правила __<span class="citation" data-cites="keyframes__">@keyframes__</span>. Само по себе правило без дополнительных инструкций ничего не делает. Поэтому после его создания для уточнения параметров самой анимации применяют группу animation-свойств.</p>
<section id="правило-keyframes" class="level3" data-number="3.1.1">
<h3 data-number="3.1.1">Правило <span class="citation" data-cites="keyframes">@keyframes</span></h3>
<p>Начнём с правила <span class="citation" data-cites="keyframes">@keyframes</span> и разберёмся, как можно установить ключевые кадры для описания анимации DOM-элемента.</p>
<p>У любой анимации есть определённое имя, в нашем случае это <em>example</em>. Когда мы задаём сразу несколько правил <span class="citation" data-cites="keyframes">@keyframes</span> с одинаковыми именами, всё может пойти не так, как мы хотели: сработает лишь последнее из них, а все находящиеся выше будут проигнорированы.</p>
<p>Чтобы правильно задать имя анимации, нужно знать несколько правил именования:</p>
<ul>
<li><p>можно использовать только латинские буквы без учёта регистра;</p></li>
<li><p>первый символ имени (без учёта дефиса) должен быть буквой — заглавной или строчной;</p></li>
<li><p>можно использовать цифры;</p></li>
<li><p>можно использовать знаки дефиса (-) и нижнего подчёркивания (_);</p></li>
<li><p>нельзя ставить два дефиса подряд в начале имени;</p></li>
<li><p>нельзя использовать специальные слова вроде inherit, none, initial, unset.</p></li>
</ul>
<p>Ключевые кадры чаще задаются в процентах от времени анимации. Но можно их задавать и с помощью ключевых слов <code>from</code> (аналогичен 0%) и <code>to</code> (аналогичен 100%).</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">@keyframes</span> example {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="dv">from</span> {</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#f00</span><span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="dv">to</span> {</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#0f0</span><span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">@keyframes</span> example {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="dv">0%</span> {</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#f00</span><span class="op">;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="dv">25%</span> {</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#f00</span><span class="op">;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>  <span class="dv">50%</span> {</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#ff0</span><span class="op">;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  <span class="dv">75%</span> {</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#0f0</span><span class="op">;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>  <span class="dv">100%</span> {</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#0ff</span><span class="op">;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Необязательно задавать ключевые кадры по увеличению значения процента. Задавать ключевые кадры можно в любом порядке. Это может быть удобно, например, если начальные и конечные свойства совпадают. В таком случае кадры можно перечислить через запятую:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">@keyframes</span> example {</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="dv">0%</span>, <span class="dv">100%</span> {</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#f00</span><span class="op">;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="dv">10%</span>, <span class="dv">30%</span>, <span class="dv">50%</span>, <span class="dv">70%</span>, <span class="dv">90%</span> {</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#ff0</span><span class="op">;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  <span class="dv">20%</span>, <span class="dv">40%</span>, <span class="dv">60%</span>, <span class="dv">80%</span> {</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#f00</span><span class="op">;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Также можно указывать сразу несколько изменяющихся свойств:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">@keyframes</span> example {</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="dv">0%</span> {</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#f00</span><span class="op">;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">width</span>: <span class="dv">50</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="dv">100%</span> {</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#0ff</span><span class="op">;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">width</span>: <span class="dv">100</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>При написании кадров в процентах необязательно указывать первый (0%) и последний (100%). Браузер сам может создать их, основываясь на свойствах элемента до или после анимации.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="im">@keyframes</span> example {</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="dv">20%</span> {</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#f00</span><span class="op">;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="dv">80%</span> {</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#0ff</span><span class="op">;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>В таком правиле в промежутке 0–20% цвет будет меняться от дефолтного состояния к #f00, а от 80% до 100% цвет будет меняться от #0ff к дефолтному состоянию:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="im">@keyframes</span> example {</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="dv">0%</span> {</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: (первоначальное состояние: цвет<span class="op">,</span> который прописан в стилях<span class="op">,</span> или дефолтный цвет)<span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  <span class="dv">20%</span> {</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#f00</span><span class="op">;</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  <span class="dv">80%</span> {</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: <span class="cn">#0ff</span><span class="op">;</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>  <span class="dv">100%</span> {</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">color</span>: (первоначальное состояние: цвет<span class="op">,</span> который прописан в стилях<span class="op">,</span> или дефолтный цвет)<span class="op">;</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Такое поведение будет при значениях по умолчанию некоторых свойств анимации, но при желании это поведение можно переопределить. Что это за свойства, рассмотрим далее.</p>
</section>
<section id="animation" class="level3" data-number="3.1.2">
<h3 data-number="3.1.2">Animation</h3>
<p>У анимаций есть два обязательных свойства:</p>
<ul>
<li><p><strong>animation-name</strong> описывает список имён анимаций, применяемых к элементу.</p></li>
<li><p><strong>animation-duration</strong> указывает время выполнения анимации. Значение задаётся в миллисекундах <code>ms</code> или секундах <code>s</code>. Напомним, что одна секунда равняется 1000 миллисекунд.</p></li>
</ul>
<p>Также есть шесть дополнительных свойств:</p>
<ul>
<li><p><strong>animation-delay</strong> устанавливает время запоздания выполнения анимации. Значение по умолчанию — ноль секунд.</p></li>
<li><p><strong>animation-iteration-count</strong> задаёт целое число, указывающее, сколько раз подряд выполняется анимация, поскольку её запуск не зависит от пользователя. Чтобы зациклить анимацию, сделать её бесконечной, нужно задать значение ключевым словом <code>infinite</code>. Значение по умолчанию равно единице.</p></li>
<li><p><strong>animation-direction</strong> указывает направление отрисовки анимации. Принимает одно из четырёх значений:</p>
<ul>
<li><p>normal — от начала к концу;</p></li>
<li><p>alternate — сперва от начала к концу, на следующей итерации от конца к началу;</p></li>
<li><p>reverse — от конца к началу;</p></li>
<li><p>alternate-reverse — сперва от конца к началу, а потом от начала к концу.</p></li>
</ul>
<p>По умолчанию стоит значение <code>normal</code>.</p></li>
<li><p><strong>animation-timing-function</strong> задаёт временную функцию. По умолчанию это свойство имеет значение <code>ease</code>. Внутри <code>@keyframes</code> на разных отрезках (между разными ключевыми кадрами) можно задавать разные временные функции <code>animation-timing-function</code> и так более детально прорабатывать движение.</p></li>
<li><p><strong>animation-fill-mode</strong> указывает, нужно ли применять стили к объекту анимации до и после её завершения. Принимает одно из четырёх значений:</p>
<ul>
<li><p>none — не применять стили к элементу;</p></li>
<li><p>backwards — применить стили первого кадра до начала анимации;</p></li>
<li><p>forwards — применить стили последнего кадра по завершении анимации;</p></li>
<li><p>both — совмещает значения <code>forwards</code> и <code>backwards</code>.</p></li>
</ul>
<p>По умолчанию стоит значение <code>none</code>, стили не применяются.</p></li>
<li><p><strong>animation-play-state</strong> даёт возможность приостановить воспроизведение анимации. Принимает одно из значений:</p>
<ul>
<li><p>running — анимация проигрывается;</p></li>
<li><p>paused — пауза анимации.</p></li>
</ul></li>
</ul>
<p>Чаще всего для корректной работы анимации достаточно задать только <code>animation-name</code> и <code>animation-duration</code>. Все другие свойства примут значения по умолчанию. Их можно переопределить, задав другое значение.</p>
<p>Для сокращения объёма кода в CSS также предусмотрена короткая запись свойства <code>animation</code>. Она имеет следующий порядок свойств:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>animation<span class="in">: &lt;animation-name</span><span class="op">&gt;,</span> &lt;animation-duration<span class="op">&gt;,</span> &lt;animation-timing-function<span class="op">&gt;,</span> &lt;animation-delay<span class="op">&gt;,</span> &lt;animation-iteration-count<span class="op">&gt;,</span> &lt;animation-direction<span class="op">&gt;,</span> &lt;animation-fill-mode<span class="op">&gt;</span> и &lt;animation-play-state<span class="op">&gt;</span></span></code></pre></div>
<p><strong>На этапе изучения свойств анимации не рекомендуется:</strong></p>
<ul>
<li><p>Использовать составное свойство, так как это может привести к коллизиям, связанным с каскадностью CSS.</p></li>
<li><p>Использовать CSS-свойства с нечисловыми значениями. Например, <code>background-size: cover</code> на <code>background-size: contain</code>. Или <code>display: none</code> на <code>display: block</code>.</p></li>
<li><p>Анимировать свойства, которые вызывают смещение окружающих элементов. Например: <code>width</code>, <code>height</code>, <code>border</code>, <code>padding</code>, <code>margin</code>.</p></li>
</ul>
<p>Если требуется переместить элемент во время анимации, то вместо свойства <code>position</code> лучше подойдёт <code>transform: translate()</code>. Для изменения размера вместо <code>width/height</code> используем <code>transform: scale()</code>. Использование трансформации лучше сказывается на производительности анимации, так как браузеру не нужно перерисовывать страницу. Но об этом мы поговорим позднее, в шестом модуле нашего курса.</p>
</section>
</div>
</section>
<section id="анимация" class="level2" data-number="3.2">
<h2 data-number="3.2">3.2. Анимация</h2>
<div class="text-container text-container--module">
<p>Дополнительный материал вне курса: тренажер <a href="https://htmlacademy.ru/courses/80">«Анимация»</a>.</p>
</div>
</section>
<section id="css-animation-vs-css-transition.-css-animation-на-практике" class="level2" data-number="3.3">
<h2 data-number="3.3">3.3. CSS animation vs CSS transition. CSS animation на практике</h2>
<div class="text-container text-container--module">
<p>На первый взгляд, между <code>animation</code> и <code>transition</code> нет особых различий. С помощью обеих техник можно:</p>
<ul>
<li><p>определять, какие CSS-свойства будут меняться;</p></li>
<li><p>задавать временную функцию;</p></li>
<li><p>задавать продолжительность анимации.</p></li>
</ul>
<p>Так какой же тогда способ стоит выбрать? Ответ зависит от задачи, которую нужно решить.</p>
<p><strong>Анимации стоит применить, если:</strong></p>
<ul>
<li><p>Требуется более двух фаз изменений свойств — здесь пригодится гибкость ключевых кадров. Например, если при наведении кнопка должна изменить фоновый цвет из исходного во второй, затем в третий или даже в четвёртый, а потом вернуться к исходному состоянию.</p></li>
<li><p>Необходимо зацикливание, то есть постоянно выполняющаяся анимация, которая не зависит от действий пользователя.</p></li>
</ul>
<p><strong>Переходы transition подходят</strong> в тех случаях, когда меняется состояние элемента с одного на другое, например: из исходного на <code>:hover</code>, с одного класса на другой (или его отсутствие). Есть две точки, два набора свойств CSS, и <code>transition</code> решает задачу.</p>
<p>Когда нужна связка с JavaScript (например, запускать анимацию из одного состояния в другое), то лучше использовать <code>transition</code>. Вместо правила при наведении или фокусе, как мы писали ранее, создаётся отдельное правило с изменением анимированных свойств. И с помощью JS этот класс добавляется к элементу. Или другой пример: мы можем менять какое-либо CSS-свойство из JavaScript, задав элементу в какой-то момент <code>element.style.backgroundColor = “e3e3e3”;</code>.</p>
<p>Для перехода неважно, как именно изменилось значение свойства. Главное, что значение меняется, и переход будет работать.</p>
<p>CSS animation-свойства специфичны для работы с JavaScript. Достаточно сложно изменить имеющееся правило <code>@keyframes</code> через JavaScript, да это и не нужно, так как для изменения анимации существует отдельная спецификация <a href="https://developer.mozilla.org/ru/docs/Web/API/Web_Animations_API">Web Animation API</a>. И это уже не линейная CSS-анимация, а покадровая, то есть полностью создаваемая с помощью JS. Такие анимации в этом курсе мы не рассматриваем.</p>
<p>Вместе с тем есть ряд случаев, когда без использования CSS-свойств <code>animation</code> нам никак не обойтись. В отличие от переходов, анимация может многократно повторяться без каких-либо действий пользователя с помощью указания <code>animation-iteration-count</code> свойства. Такое зацикливание может быть полезно, если требуется привлечь внимание к какому-то элементу на странице.</p>
<p>Давайте закрепим полученные знания на примерах.</p>
<p>Мы можем использовать различные CSS-свойства, например <code>transform</code>:</p>
<p><em>(см. 3.10. Зацикленная анимация вращения элемента)</em></p>
<p><em>(см. 3.11. Анимация стрелки перехода к новому экрану)</em></p>
<p>Можем использовать эффект Кена Бернса — это тип эффекта панорамирования и масштабирования:</p>
<p><em>(см. 3.12. Эффект Кена Бернса)</em></p>
<p>Можем использовать глитч-эффект — это эффект «битой» картинки, засвеченного изображения, телевизионных помех и геометрических искажений:</p>
<p><em>(см. 3.13. Glitch-эффект текста)</em></p>
<p><em>(см. 3.14. Glitch-эффект картинки)</em></p>
<p>Можем использовать бегущую строку:</p>
<p><em>(см. 3.15. Анимация бегущей строки)</em></p>
</div>
</section>
<section id="плавные-переходы" class="level2" data-number="3.4">
<h2 data-number="3.4">3.4. Плавные переходы</h2>
<div class="text-container text-container--module">
<p>Дополнительный материал вне курса: тренажер <a href="https://htmlacademy.ru/courses/84">«Плавные переходы»</a>.</p>
</div>
</section>
<section id="смягчение-начала-и-конца-движения" class="level2" data-number="3.5">
<h2 data-number="3.5">3.5. Смягчение начала и конца движения</h2>
<div class="text-container text-container--module">
<p>Ранее мы разобрали 12 принципов анимации. Сейчас рассмотрим несколько примеров реализации принципа «Смягчение начала и конца движения».</p>
<p>Как мы уже говорили, этот принцип нужен, чтобы перенести в анимацию физику реального мира, и этого принципа необходимо придерживаться всегда.</p>
<p>Если говорить простыми словами, то чем тяжелее тело, тем больше нужно усилий, чтобы его разогнать. Следовательно, тем больше времени оно затрачивает, чтобы достичь скорости. В это же время тело дольше будет сохранять скорость и дольше тормозить, ведь ему необходимо потерять больше энергии.</p>
<p>Однако могут быть нюансы. Что, если у тела есть отличный двигатель, позволяющий срываться с места, или хорошие тормоза? Тогда оно может быстро разгоняться и тормозить. Быстро, но не мгновенно — это важно.</p>
<figure>
<img src="../media/file46.gif" alt="Анимация гонок на болидах" />
<figcaption aria-hidden="true">Анимация гонок на болидах</figcaption>
</figure>
<p>Или наоборот. Что, если это лёгкое пёрышко, которое легко разогнать порывом ветра и которое будет долго парить, прежде чем опустится на воду?</p>
<figure>
<img src="../media/file63.gif" alt="Анимация падающего на воду пера" />
<figcaption aria-hidden="true">Анимация падающего на воду пера</figcaption>
</figure>
<p><a href="https://tenor.com/view/angel-wings-feather-water-falling-gif-17348842">Источник</a></p>
<p>Если говорить о 2D-интерфейсах, реализовать подобный эффект очень просто, достаточно настроить кривую Безье или выбрать <code>animation-timing-function</code>/<code>transition-timing-function</code> из стандартных.</p>
<p>К примеру, так будет выглядеть функция cubic-bezier (0.32, 0, 0.08, 1), смягчённая и в начале, и в конце движения:</p>
<figure>
<img src="../media/file64.png" alt="Временная функция" />
<figcaption aria-hidden="true">Временная функция</figcaption>
</figure>
<p>Можно перейти по <a href="https://cubic-bezier.com/#.32,0,.08,1">ссылке</a> на конфигуратор. Перемещая правую и левую направляющие из стороны в сторону, можно менять соотношение времени разгона, основного движения и торможения, а финальные временные отрезки смягчения будут зависеть от длительности анимации.</p>
<p>Временные функции <code>ease-in-out</code> и <code>ease</code> также выполняют этот принцип на обоих концах анимации. <code>ease-in-out</code> симметричный и создаёт более спокойное впечатление. <code>ease</code> асимметричный, похож на пример <code>cubic-bezier(0.32, 0, 0.08, 1)</code>, быстро начинается и медленнее завершается.</p>
<figure>
<img src="../media/file65.png" alt="Временная функция" />
<figcaption aria-hidden="true">Временная функция</figcaption>
</figure>
<p>От <code>cubic-bezier(0.32, 0, 0.08, 1)</code> его отличает начало движения не с нулевой скорости. Об этом говорит наклон кривой в точке (0, 0). Но заметно это будет только при большой длительности анимации: тогда пользователь сможет заметить, что объект резко начинает движение. Окончание движения на скорости может вызвать неприятное впечатление даже при относительно небольшой длительности.</p>
<p>А вот <code>ease-in</code> и <code>ease-out</code> смягчены только либо в начале, либо в конце движения. Поэтому они подходят только для случаев, когда пользователь не увидит окончания или начала движения соответственно.</p>
<p>Если выполнить лишь принцип «Смягчение начала и конца движения», уже можно достичь эффекта гладкой, приятной микроанимации.</p>
<p>Рассмотрите пример в демонстрации:</p>
<p><em>(см. 3.16. Смягчение начала и конца движения)</em></p>
</div>
</section>
<section id="подготовка-или-упреждение" class="level2" data-number="3.6">
<h2 data-number="3.6">3.6. Подготовка, или упреждение</h2>
<div class="text-container text-container--module">
<p>В этой статье рассмотрим ещё один принцип анимации — «Подготовка, или упреждение».</p>
<p>Этот принцип используется для того, чтобы добавить в анимацию реалистичность. В жизни, чтобы тело начало движение, ему для начала нужно накопить определённую энергию — взять разгон. К примеру, если человек хочет подпрыгнуть, сначала он присядет, чтобы придать себе силу для ускорения. Или если он хочет кинуть мяч, то сначала замахнётся. И чем больше будет замах, тем сильнее будет бросок.</p>
<p>В классической анимации (мультипликации) персонаж выполняет дополнительные действия, чтобы начать движение: закидывает руку или поднимает ногу для противовеса.</p>
<figure>
<img src="../media/file66.jpg" alt="Смягчение начала и конца движения" />
<figcaption aria-hidden="true">Смягчение начала и конца движения</figcaption>
</figure>
<p>Так же и в анимации в вебе: перед началом движения можно отобразить действие, которое создаст впечатление, что тело накапливает энергию перед началом движения.</p>
<figure>
<img src="../media/file67.gif" alt="Подготовка, или упреждение" />
<figcaption aria-hidden="true">Подготовка, или упреждение</figcaption>
</figure>
<p>Достичь подобного эффекта можно двумя способами:</p>
<ol type="1">
<li><p>Сделать ключевые точки, по которым объект сначала переместится в противоположном к вектору движения направлении и уже после этого двинется в необходимом направлении.</p></li>
<li><p>Сделать обычный переход от состояния к состоянию, но задать при этом <a href="https://cubic-bezier.com/#.5,-0.3,.6,.9">временную функцию</a>, в которой прогресс в начале будет уходить в отрицательное значение.</p></li>
</ol>
<figure>
<img src="../media/file68.jpg" alt="Временная функция без смягчения начала" />
<figcaption aria-hidden="true">Временная функция без смягчения начала</figcaption>
</figure>
<p>Как мы уже писали, даже для небольшого движения, такого как подготовка, стоит придерживаться принципа «Смягчение начала и конца движения». Поэтому такая временная функция, которая начинается сразу под углом, менее предпочтительна. Её можно использовать только благодаря тому, что начало движения обычно удаётся меньше рассмотреть, чем окончание. Тем не менее кривую такого вида можно использовать только с небольшой амплитудой подготовки.</p>
<p>Подготовку при переходе от состояния к состоянию получится сделать более выразительной, если объект при этом исчезает или уходит за край экрана, то есть когда пользователь не видит окончания его движения.</p>
<figure>
<img src="../media/file69.png" alt="Временная функция" />
<figcaption aria-hidden="true">Временная функция</figcaption>
</figure>
<p><a href="https://cubic-bezier.com/#.44,0,.34,-0.83">Ссылка</a></p>
<p>Рассмотрите примеры в демонстрации:</p>
<p><em>(см. 3.17. Подготовка, или упреждение)</em></p>
</div>
</section>
<section id="задание" class="level2" data-number="3.7">
<h2 data-number="3.7">3.7. Задание</h2>
<div class="text-container text-container--module">
<p>Вам прислали вёрстку первого экрана сайта премиальных беговых кед. Добавьте её элементам анимацию, чтобы страница выглядела интереснее.</p>
<p>Например, можно добавить однократную анимацию появления товара, за которой следуют анимация бегущей строки и вращение бейджа, а также поочерёдное появление звёзд рейтинга. Создайте сами анимации и укажите корректный таймлайн их срабатывания.</p>
</div>
</section>
<section id="эталонное-решение-задания-6" class="level2" data-number="3.8">
<h2 data-number="3.8">3.8. Эталонное решение задания</h2>
<div class="text-container text-container--module">
<section id="шаг-1-30" class="level3" data-number="3.8.1">
<h3 data-number="3.8.1">Шаг №1</h3>
<p>Эталонное решение. Далее рассмотрим шаги его создания.</p>
</section>
<section id="шаг-2-16" class="level3" data-number="3.8.2">
<h3 data-number="3.8.2">Шаг №2</h3>
<p>Первой добавим анимацию появления товара при открытии страницы. Назовем анимацию <strong>slide-in</strong>, длиться она будет половину секунды. Подберём кривую Безье, можно использовать стандартный ease. Свойство animation-fill-mode зададим both, чтобы до и после анимации её стили применялись к элементу.</p>
<p>Опишем шаги анимации: в начале элемент будет сдвинут наверх, немного повернут вдоль оси Х и сжат (невидим). За время анимации элемент увеличивается, поворачивается и смещается сверху вниз в своё положение по макету. Увеличьте время анимации, чтобы увидеть проиходящее детальнее.</p>
</section>
<section id="шаг-3-16" class="level3" data-number="3.8.3">
<h3 data-number="3.8.3">Шаг №3</h3>
<p>Теперь добавим анимацию вращения для <strong>.promo__badge</strong>. Саму анимацию мы использовали ранее в примерах модуля. Сейчас же мы добавим еще и небольшую задержку, чтобы вращение началось после появления товара. Для этого добавим свойство opacity к исходному состоянию элемента и к анимации.</p>
</section>
<section id="шаг-4-11" class="level3" data-number="3.8.4">
<h3 data-number="3.8.4">Шаг №4</h3>
<p>Теперь запустим анимацию бегущей строки для <strong>.promo__title</strong>. Время анимации можно выбрать побольше. Задержка будет такой, чтобы анимация началась после появления товара и бейджа. Сама анимация аналогична анимации бегущей строки в модуле.</p>
</section>
<section id="шаг-5-10" class="level3" data-number="3.8.5">
<h3 data-number="3.8.5">Шаг №5</h3>
<p>И финально добавим анимацию поочередного мигания звёзд. Её можно сделать по-разному, мы выбрали вариант с отдельной анимацией для каждого элемента. Длительность, временная функция и количество повторов у каждой звезды одинаковые. Задержка указывается такой, чтобы анимация происходила после того, как текст «Скорость» уехал налево.</p>
<p>Мигание происходит за счёт того, что звезда уменьшается и становится прозрачной, а потом возвращается в исходное состояние. Анимации отличаются друг от друга тем, что этот процесс сдвинут по ключевым кадрам с шагом 5% для каждой следующей звезды. Так мигание происходит по цепочке.</p>
</section>
</div>
</section>
<section id="тест-по-материалам-модуля-3" class="level2" data-number="3.9">
<h2 data-number="3.9">3.9. Тест по материалам модуля 3</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>CSS-свойство animation позволяет создавать анимации, которые…</strong></li>
</ol>
<ul>
<li>Запускаются при наведении на элемент.</li>
<li>Запускаются вне зависимости от действий пользователя.</li>
<li>Запускаются при клике на элемент.</li>
<li>Используют ключевые кадры.</li>
<li>Позволяют создавать более простые анимации, чем переход.</li>
</ul>
<ol start="2" type="1">
<li><strong>Какого CSS-свойства анимации не существует?</strong></li>
</ol>
<ul>
<li>animation-name.</li>
<li>animation-duration.</li>
<li>animation-order.</li>
<li>animation-fill-mode.</li>
</ul>
<ol start="3" type="1">
<li><strong>Какое @-правило позволяет задать ключевые кадры анимации?</strong></li>
</ol>
<ul>
<li>supports.</li>
<li>keyframe.</li>
<li>animate.</li>
<li>keyframes.</li>
</ul>
<ol start="4" type="1">
<li><strong>Какое имя анимации написано верно?</strong></li>
</ol>
<ul>
<li>BOUNCE.</li>
<li>--bounce.</li>
<li>3_bounce.</li>
<li>-5-bounce.</li>
</ul>
<ol start="5" type="1">
<li><strong>Что означает ключевое слово from?</strong></li>
</ol>
<ul>
<li>Внешний вид объекта до начала анимации.</li>
<li>Внешний вид элемента по окончании анимации.</li>
<li>Первый кадр анимации, аналогичен 0%.</li>
<li>Последний кадр анимации, аналогичен 100%.</li>
</ul>
<ol start="6" type="1">
<li><strong>Сколько ключевых кадров может быть описано с помощью <span class="citation" data-cites="keyframes">@keyframes</span>?</strong></li>
</ol>
<ul>
<li>Два.</li>
<li>Три.</li>
<li>Не более 16.</li>
<li>Любое необходимое количество.</li>
</ul>
<ol start="7" type="1">
<li><strong>Выберите все обязательные свойства для описания анимации.</strong></li>
</ol>
<ul>
<li>animation-delay.</li>
<li>animation-name.</li>
<li>animation-direction.</li>
<li>animation-duration.</li>
<li>animation-timing-function.</li>
</ul>
<ol start="8" type="1">
<li><strong>Какие свойства не рекомендуются для анимации?</strong></li>
</ol>
<ul>
<li>width.</li>
<li>height.</li>
<li>transform.</li>
<li>color.</li>
<li>position.</li>
</ul>
<ol start="9" type="1">
<li><strong>Какое свойство позволяет зациклить анимацию?</strong></li>
</ol>
<ul>
<li>animation-direction.</li>
<li>animation-iteration-count.</li>
<li>animation-fill-mode.</li>
</ul>
<ol start="10" type="1">
<li><strong>Можно ли задавать разные временные функции для разных отрезков анимации?</strong></li>
</ol>
<ul>
<li>Да.</li>
<li>Нет.</li>
</ul>
</div>
</section>
<section id="тест-по-материалам-модуля-3-ответы" class="level2" data-number="3.10">
<h2 data-number="3.10">3.9. Тест по материалам модуля 3 (Ответы)</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>CSS-свойство animation позволяет создавать анимации, которые…</strong></li>
</ol>
<ul>
<li>Запускаются при наведении на элемент.</li>
<li>Запускаются вне зависимости от действий пользователя.</li>
<li>Используют ключевые кадры.</li>
</ul>
<ol start="2" type="1">
<li><strong>Какого CSS-свойства анимации не существует?</strong></li>
</ol>
<ul>
<li>animation-order.</li>
</ul>
<ol start="3" type="1">
<li><strong>Какое @-правило позволяет задать ключевые кадры анимации?</strong></li>
</ol>
<ul>
<li>keyframes.</li>
</ul>
<ol start="4" type="1">
<li><strong>Какое имя анимации написано верно?</strong></li>
</ol>
<ul>
<li>BOUNCE.</li>
</ul>
<ol start="5" type="1">
<li><strong>Что означает ключевое слово from?</strong></li>
</ol>
<ul>
<li>Первый кадр анимации, аналогичен 0%.</li>
</ul>
<ol start="6" type="1">
<li><strong>Сколько ключевых кадров может быть описано с помощью <span class="citation" data-cites="keyframes">@keyframes</span>?</strong></li>
</ol>
<ul>
<li>Любое необходимое количество.</li>
</ul>
<ol start="7" type="1">
<li><strong>Выберите все обязательные свойства для описания анимации.</strong></li>
</ol>
<ul>
<li>animation-name.</li>
<li>animation-duration.</li>
</ul>
<ol start="8" type="1">
<li><strong>Какие свойства не рекомендуются для анимации?</strong></li>
</ol>
<ul>
<li>width.</li>
<li>height.</li>
<li>position.</li>
</ul>
<ol start="9" type="1">
<li><strong>Какое свойство позволяет зациклить анимацию?</strong></li>
</ol>
<ul>
<li>animation-iteration-count.</li>
</ul>
<ol start="10" type="1">
<li><strong>Можно ли задавать разные временные функции для разных отрезков анимации?</strong></li>
</ol>
<ul>
<li>Да.</li>
</ul>
</div>
</section>
<section id="зацикленная-анимация-вращения-элемента" class="level2" data-number="3.11">
<h2 data-number="3.11">3.10. Зацикленная анимация вращения элемента</h2>
<div class="text-container text-container--module">
<section id="шаг-1-31" class="level3" data-number="3.11.1">
<h3 data-number="3.11.1">Шаг №1</h3>
<p>Бесконечная анимация вращения элемента. Чтобы изменить направление вращения текста, уберите минус в правиле <code>@keyframes</code> для <code>rotate-img</code>.</p>
</section>
<section id="шаг-2-17" class="level3" data-number="3.11.2">
<h3 data-number="3.11.2">Шаг №2</h3>
<p>Сначала добавим свойства анимации для самой картинки. Имя анимации <code>rotate-img</code>. Один поворот на 360 градусов займёт пять секунд, чтобы текст можно было успеть прочитать. Ускорение во временной функции не нужно, ведь картинка должна вращаться равномерно и постоянно.</p>
</section>
<section id="шаг-3-17" class="level3" data-number="3.11.3">
<h3 data-number="3.11.3">Шаг №3</h3>
<p>Теперь опишем шаги анимации. Изначально элемент не повёрнут, что означает <code>transform: rotate(0deg)</code>. Поэтому шаг <code>from(0%)</code> можем пропустить и указать только последний — поворот против часовой стрелки на 360 градусов. В конце анимации элемент оказывается в том же положении, что и в начале, анимация повторяется снова и снова.</p>
</section>
</div>
</section>
<section id="анимация-стрелки-перехода-к-новому-экрану" class="level2" data-number="3.12">
<h2 data-number="3.12">3.11. Анимация стрелки перехода к новому экрану</h2>
<div class="text-container text-container--module">
<section id="шаг-1-32" class="level3" data-number="3.12.1">
<h3 data-number="3.12.1">Шаг №1</h3>
<p>Стрелка движется не постоянно, а периодически, подсказывая пользователю, что ниже тоже есть что-то интересное. Чтобы ссылка не смещалась, анимируем не её, а псевдоэлемент.</p>
<p>Раскомментируйте обводку правила <code>.transform-animation</code>, чтобы увидеть подробнее.</p>
</section>
<section id="шаг-2-18" class="level3" data-number="3.12.2">
<h3 data-number="3.12.2">Шаг №2</h3>
<p>Стрелка — ссылка для перехода к какой-то части сайта. Вспомним материал прошлого модуля и сделаем анимируемой не саму ссылку, а её псевдоэлемент с фоновой картинкой. Как видно по обводке, ссылка остаётся на месте, а псевдоэлемент анимируется.</p>
</section>
<section id="шаг-3-18" class="level3" data-number="3.12.3">
<h3 data-number="3.12.3">Шаг №3</h3>
<p>Опишем свойства анимации.</p>
<p>Назовём анимацию <code>arrow-moving</code>. Один круг анимации будет занимать пять секунд. Движение сделаем равномерным <code>linear</code> и станем повторять его бесконечно <code>infinite</code>.</p>
</section>
<section id="шаг-4-12" class="level3" data-number="3.12.4">
<h3 data-number="3.12.4">Шаг №4</h3>
<p>Теперь распишем кадры: стрелка большую часть времени остаётся на месте и делает несколько раз движение вниз/вверх. Начинаем не с самого начала 0%, а позднее: от 0% до 42% стрелка не движется, затем с 42% до 46% движется вниз, с 46% до 50% — обратно вверх, с 50% до 54% движется снова вверх, с 54% до 58% возвращается в изначальное положение. Таким образом, за пять секунд стрелка делает два таких движения. Чтобы движения были равномерными и вверх, и вниз, интервалы делают одинаковыми по 4% времени.</p>
</section>
</div>
</section>
<section id="эффект-кена-бернса" class="level2" data-number="3.13">
<h2 data-number="3.13">3.12. Эффект Кена Бернса</h2>
<div class="text-container text-container--module">
<section id="шаг-1-33" class="level3" data-number="3.13.1">
<h3 data-number="3.13.1">Шаг №1</h3>
<p>Изображение постепенно смещается и меняет масштаб.</p>
</section>
<section id="шаг-2-19" class="level3" data-number="3.13.2">
<h3 data-number="3.13.2">Шаг №2</h3>
<p>Для создания такой анимации нужен контейнер-родитель и дочерняя картинка. Картинку позиционируем абсолютно по отношению к родителю <code>position: absolute</code>. Для родителя указываем свойство <code>overflow</code>, чтобы отсечь лишнее.</p>
<p>Чтобы картинку можно было перемещать, её размер должен быть больше, чем у родителя. В нашем случае картинка в два раза больше (700×438), чем родитель (350×219).</p>
</section>
<section id="шаг-3-19" class="level3" data-number="3.13.3">
<h3 data-number="3.13.3">Шаг №3</h3>
<p>Далее опишем свойства анимации <code>ken-burns</code>. Время одного круга будет большим (80s), так как нам нужно показать всю картинку, плавно перемещая её. Тут можно использовать временную функцию и перемещаться по картинке с небольшим ускорением (<code>ease</code>). Ну и сама анимация будет повторяться снова и снова (<code>infinite</code>).</p>
</section>
<section id="шаг-4-13" class="level3" data-number="3.13.4">
<h3 data-number="3.13.4">Шаг №4</h3>
<p>Теперь <code>@keyframes</code>. У нас будет четыре перемещения с равными интервалами в 25%. Точка трансформации находится в центре картинки. В начале (0%) смещения картинки нет, и мы видим её левый верхний угол. Далее (25%) перемещаем картинку по диагонали вверх и влево к её правому нижнему углу. Затем (50%) немного увеличиваем и перемещаем направо, чтобы увидеть левый нижний угол. Далее (75%) — снова по диагонали к правому верхнему углу, возвращаясь к нормальному масштабу. И последнее перемещение (100%) — обратно в левый верхний угол. Круг закончен, начинается второй.</p>
</section>
</div>
</section>
<section id="glitch-эффект-текста" class="level2" data-number="3.14">
<h2 data-number="3.14">3.13. Glitch-эффект текста</h2>
<div class="text-container text-container--module">
<section id="шаг-1-34" class="level3" data-number="3.14.1">
<h3 data-number="3.14.1">Шаг №1</h3>
<p>Эффект «Глитч» создаётся за счёт анимаций псевдоэлементов <code>::before</code> и <code>::after</code>. В кадрах анимаций меняются <code>clip-path</code> и <code>transform</code>, прозрачность, текстовые параметры.</p>
</section>
<section id="шаг-2-20" class="level3" data-number="3.14.2">
<h3 data-number="3.14.2">Шаг №2</h3>
<p>Для создания помех будем использовать псевдоэлементы <code>::before</code> и <code>::after</code>, текст в них добавляем за счёт data-атрибута <code>data-text="glitch is simple"</code>.</p>
<p>В первом примере создаём два псевдоэлемента и добавляем тексту розовую и синюю тени. Сейчас мы их немного сместили, чтобы было нагляднее. В дальнейшем оба псевдоэлемента будут наложены на текст родителя.</p>
</section>
<section id="шаг-3-20" class="level3" data-number="3.14.3">
<h3 data-number="3.14.3">Шаг №3</h3>
<p>Во втором примере сделаем то же самое, но добавим псевдоэлементам небольшое искривление с помощью <code>transform: skew(-1deg, -1deg)</code>. Тень может быть как простой, так и двойной или тройной, как у <code>::after</code>.</p>
<p>Для примера мы немного сдвинули псевдоэлементы, во время анимации они будут находиться поверх текста родителя.</p>
</section>
<section id="шаг-4-14" class="level3" data-number="3.14.4">
<h3 data-number="3.14.4">Шаг №4</h3>
<p>Теперь допишем свойства анимаций. У каждого псевдоэлемента анимация будет своя. Время анимации для одного псевдоэлемента может быть как одинаковым, так и отличаться. Временная функция для простоты работы взята <code>linear</code>, другие варианты будут почти незаметны. Анимация повторяется бесконечно.</p>
</section>
<section id="шаг-5-11" class="level3" data-number="3.14.5">
<h3 data-number="3.14.5">Шаг №5</h3>
<p>Добавим первому примеру помехи. Для этого используем <code>clip-path: polygon()</code>, с его помощью мы показываем какую-то небольшую часть псевдоэлемента, отсекая лишнее. Меняя положение этой части, смещаем искажение выше или ниже по элементу. Также можно добавить искажение с помощью <code>skew()</code>.</p>
</section>
<section id="шаг-6-2" class="level3" data-number="3.14.6">
<h3 data-number="3.14.6">Шаг №6</h3>
<p>Аналогично поступаем со вторым псевдоэлементом первого примера. Можно добавлять в какие-то кадры другую тень, менять цвет текста и так далее.</p>
</section>
<section id="шаг-7-1" class="level3" data-number="3.14.7">
<h3 data-number="3.14.7">Шаг №7</h3>
<p>Совместим обе анимации псевдоэлементов на первом примере. И он готов!</p>
<p>Теперь допишем <code>@keyframes</code> для анимации псевдоэлементов второго примера.</p>
</section>
<section id="шаг-8" class="level3" data-number="3.14.8">
<h3 data-number="3.14.8">Шаг №8</h3>
<p>Для <code>::before</code> добавим немного другую анимацию: будем менять прозрачность, создавая мигание. Можно также изменять текстовые параметры, к примеру, сделать текст зачёркнутым, добавить ему курсив или увеличить жирность.</p>
</section>
<section id="шаг-9" class="level3" data-number="3.14.9">
<h3 data-number="3.14.9">Шаг №9</h3>
<p>Для <code>::after</code> тоже будем менять прозрачность, создавая мигание. Шаги могут быть неравномерными. Изменение межбуквенного расстояния будет немного смещать буквы друг от друга по горизонтали.</p>
</section>
<section id="шаг-10" class="level3" data-number="3.14.10">
<h3 data-number="3.14.10">Шаг №10</h3>
<p>Объединим обе анимации второго примера. Готово!</p>
</section>
</div>
</section>
<section id="glitch-эффект-картинки" class="level2" data-number="3.15">
<h2 data-number="3.15">3.14. Glitch-эффект картинки</h2>
<div class="text-container text-container--module">
<section id="шаг-1-35" class="level3" data-number="3.15.1">
<h3 data-number="3.15.1">Шаг №1</h3>
<p>Глитч можно применить и к графике.</p>
</section>
<section id="шаг-2-21" class="level3" data-number="3.15.2">
<h3 data-number="3.15.2">Шаг №2</h3>
<p>В разметку, помимо исходной картинки, добавляем несколько копий этого изображения: будем применять к ним анимации с искажениями.</p>
<p>Во втором примере мы добавили и текст.</p>
</section>
<section id="шаг-3-21" class="level3" data-number="3.15.3">
<h3 data-number="3.15.3">Шаг №3</h3>
<p>В первом примере первая картинка <code>.glitch--v1 img</code> будет основой, то есть она не станет анимироваться.</p>
<p>Вторая картинка позиционирована поверх первой и размыта, у неё изменили цвета. Более подробно про возможности фильтра можно прочитать на <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function">MDN</a>.</p>
</section>
<section id="шаг-4-15" class="level3" data-number="3.15.4">
<h3 data-number="3.15.4">Шаг №4</h3>
<p>Во втором примере первая картинка <code>.glitch--v2 img</code> будет основой. Мы сделали её чёрно-белой, а поверх с небольшим смещением добавили две копии нормального цвета.</p>
<p>Самый верхний слой — с текстом. Чтобы увидеть все слои, снимите комментарии с <code>display: none</code>, начиная со строки 108 и выше.</p>
</section>
<section id="шаг-5-12" class="level3" data-number="3.15.5">
<h3 data-number="3.15.5">Шаг №5</h3>
<p>В обоих примерах добавим параметры анимаций. У второй и третьей картинки анимации будут свои. Также добавим анимацию тексту во втором примере. Временная функция во всех случаях имеет значение <code>linear</code>, анимации будут повторяться бесконечно (<code>infinite</code>). Время анимаций может быть одинаковым или разным. У текста время анимации самое большое, так как он будет появляться реже картинок.</p>
</section>
<section id="шаг-6-3" class="level3" data-number="3.15.6">
<h3 data-number="3.15.6">Шаг №6</h3>
<p>В первом примере добавим ключевые кадры для анимации второй картинки, а третью пока скроем. Будем использовать <code>clip-path: polygon</code>, чтобы частично показывать черно-белую вторую картинку. Также её можно немного сдвигать влево и вправо, усиливая искажение.</p>
</section>
<section id="шаг-7-2" class="level3" data-number="3.15.7">
<h3 data-number="3.15.7">Шаг №7</h3>
<p>Теперь скроем готовую анимацию второй картинки и добавим анимацию для третьей. Воспользуемся тем же принципом и будем добавлять помехи с помощью перемещения <code>clip-path: polygon</code> по картинке.</p>
</section>
<section id="шаг-8-1" class="level3" data-number="3.15.8">
<h3 data-number="3.15.8">Шаг №8</h3>
<p>Соединяем обе анимации в первом примере. Стоит так подобрать искажения, чтобы они шли вразнобой, создавая помехи в разных частях картинки.</p>
</section>
<section id="шаг-9-1" class="level3" data-number="3.15.9">
<h3 data-number="3.15.9">Шаг №9</h3>
<p>Теперь разберём второй пример. Начнём со второй картинки, а третью и текст пока скроем.</p>
<p>Будем использовать появление искривлённого (<code>transform: skew</code>) элемента с нормальным (<code>filter: grayscale(0)</code>), чёрно-белым (<code>filter: grayscale(1)</code>) или инвертированным цветом (<code>filter: invert</code>) картинки.</p>
</section>
<section id="шаг-10-1" class="level3" data-number="3.15.10">
<h3 data-number="3.15.10">Шаг №10</h3>
<p>Теперь скроем вторую картинку и добавим анимацию третьей.</p>
<p>Искажения похожи на те, что были на предыдущем шаге, но будут идти в противофазе.</p>
</section>
<section id="шаг-11" class="level3" data-number="3.15.11">
<h3 data-number="3.15.11">Шаг №11</h3>
<p>Теперь скроем анимации картинок и добавим анимацию текста.</p>
<p>Раз в 10 секунд примерно в середине этого времени текст пару раз проявляется с помощью <code>opacity</code> и искривляется в разные стороны с помощью <code>skew()</code>. Также можно изменить параметры самого текста, в том числе зачеркнуть или подчеркнуть его, поменять все буквы на заглавные или строчные.</p>
</section>
<section id="шаг-12" class="level3" data-number="3.15.12">
<h3 data-number="3.15.12">Шаг №12</h3>
<p>Теперь соединяем все три анимации второго примера. Глитч готов.</p>
</section>
</div>
</section>
<section id="анимация-бегущей-строки" class="level2" data-number="3.16">
<h2 data-number="3.16">3.15. Анимация бегущей строки</h2>
<div class="text-container text-container--module">
<section id="шаг-1-36" class="level3" data-number="3.16.1">
<h3 data-number="3.16.1">Шаг №1</h3>
<p>Бегущая строка бесконечно движется справа налево.</p>
</section>
<section id="шаг-2-22" class="level3" data-number="3.16.2">
<h3 data-number="3.16.2">Шаг №2</h3>
<p>Для родителя текста <code>marquee</code> задаём <code>overflow: hidden</code>, чтобы не показывать лишнее по краям блока. Чтобы текст был в одну линию и не переносился на вторую строку, добавляем <code>white-space: nowrap</code>.</p>
<p>Для самой строчки <code>marquee__text</code> добавляем оформление текста. Лучше в такой анимации смотрится текст с заглавными буквами.</p>
</section>
<section id="шаг-3-22" class="level3" data-number="3.16.3">
<h3 data-number="3.16.3">Шаг №3</h3>
<p>Далее опишем параметры анимации <code>marquee-moving</code>. Время (10s) должно быть достаточно большим, чтобы текст можно было прочитать. Текст движется равномерно (<code>linear</code>). Анимация повторяется по кругу, то есть бесконечно (<code>infinite</code>).</p>
</section>
<section id="шаг-4-16" class="level3" data-number="3.16.4">
<h3 data-number="3.16.4">Шаг №4</h3>
<p>У нас будет два ключевых кадра: сначала текст сдвинут вправо, за край блока-родителя, а затем перемещается налево.</p>
<p>Такие анимации, выполненные только с помощью CSS, имеют ряд недостатков. Один из них — создаётся ощущение, словно у нас есть момент ожидания перед запуском второго круга. И если текста будет гораздо больше или меньше, то анимацию придётся корректировать. Но для простых ситуаций это вполне неплохой подход.</p>
</section>
</div>
</section>
<section id="смягчение-начала-и-конца-движения-1" class="level2" data-number="3.17">
<h2 data-number="3.17">3.16. Смягчение начала и конца движения</h2>
<section id="шаг-1-37" class="level3 text-container text-container--module" data-number="3.17.1">
<h3 data-number="3.17.1">Шаг №1</h3>
<p>Возьмём для примера карточки, которые анимировали ранее, и рассмотрим следующую анимацию: появление с перемещением по горизонтали, смещение влево и дальнейшее исчезновение через прозрачность и <code>scale</code>. Длительность одной части анимации составляет 1/5 от суммарной длительности анимации <code>animation-duration</code>.</p>
</section>
</section>
<section id="подготовка-или-упреждение-1" class="level2" data-number="3.18">
<h2 data-number="3.18">3.17. Подготовка, или упреждение</h2>
<section id="шаг-1-38" class="level3 text-container text-container--module" data-number="3.18.1">
<h3 data-number="3.18.1">Шаг №1</h3>
<p>Рассмотрим для примера анимацию смены карточек с кедами.</p>
</section>
</section>
</section>
</body>
</html>
