<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ru-RU">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch003.xhtml</title>
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body epub:type="bodymatter">
<section id="объединение-и-пересечение-типов" class="level1" data-number="3">
<h1 data-number="3">3. Объединение и пересечение типов</h1>
<div class="text-container text-container--module">
<p>Система типов и операции над типами. Интерфейсы и классы в Typescript</p>
</div>
<section id="вертикаль-во-вселенной-типов-верхний-и-нижний-типы" class="level2" data-number="3.1">
<h2 data-number="3.1">3.1. Вертикаль во Вселенной типов, верхний и нижний типы</h2>
<div class="text-container text-container--module">
<section id="теория-типов" class="level3" data-number="3.1.1">
<h3 data-number="3.1.1">Теория типов</h3>
<p>Для наших целей тип — это вывеска на коробке. На вывеске написано название типа, а внутри коробки лежат элементы — все возможные значения типа.</p>
<ul>
<li>В коробке с названием <em>number</em> лежат значения, которые определены стандартом IEEE-754 (кроме Infinity, NaN).</li>
<li>В коробке с названием <em>string</em> лежат строки. Их там бесконечно много.</li>
<li>В коробке boolean — два элемента.</li>
<li>И так далее.</li>
</ul>
</section>
<section id="операции-с-типами-объединение" class="level3" data-number="3.1.2">
<h3 data-number="3.1.2">Операции с типами, объединение</h3>
<p>Возьмём коробку побольше, объединим в ней содержимое <em>string</em> и <em>number</em> и затем перемешаем. Элемент, который мы достанем из коробки, может быть числом или строкой. То есть коробка стала «шире», но чтобы поработать с каким-либо значением, сначала приходится уточнять, что нам попалось на этот раз: число или строка.</p>
<p><strong>Внимание!</strong> Чтобы описать объединение нескольких типов, TypeScript применяет оператор <code>|</code>. Синтаксис: <code>string | number</code>.</p>
<p>Чтобы объяснить намерение использовать в качестве индекса базы данных строковые или числовые значения, мы можем определить тип:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> PrimaryKey <span class="op">=</span> <span class="dt">string</span> <span class="op">|</span> <span class="dt">number</span><span class="op">;</span></span></code></pre></div>
<p>Часто можно встретить задачу, в контексте которой мы можем получить значение либо функцию для получения этого значения. Тип такого аргумента — тоже объединение. Объединение типа «функция» и типа «строка».</p>
<p>Вот один из возможных примеров:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> HomePathSettings <span class="op">=</span> <span class="dt">string</span> <span class="op">|</span> (()<span class="kw">=&gt;</span> <span class="dt">string</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> resolvePath <span class="op">=</span> (settings<span class="op">:</span> HomePathSettings)<span class="kw">=&gt;</span> <span class="kw">typeof</span> settings <span class="op">===</span> <span class="st">&#39;function&#39;</span><span class="op">?</span><span class="fu">settings</span>()<span class="op">:</span>settings<span class="op">;</span></span></code></pre></div>
</section>
<section id="операции-с-типами.-пересечение" class="level3" data-number="3.1.3">
<h3 data-number="3.1.3">Операции с типами. Пересечение</h3>
<p>Можно представить другую ситуацию. Нам нужны значения, которые одновременно находятся в двух или нескольких коробках. Множество таких значений — пересечение исходных множеств доступных значений. Подумайте, значением переменной flyingDutchman будут не все жители Нидерландов, а только Летучие голландцы.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Flying <span class="op">=</span> {</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">fly</span>()<span class="op">:</span><span class="dt">void</span><span class="op">,</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Fish <span class="op">=</span> {</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">swim</span>()<span class="op">:</span><span class="dt">void</span><span class="op">,</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Saucer <span class="op">=</span> {</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">holdJam</span>()<span class="op">:</span><span class="dt">void</span><span class="op">;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Dutchman <span class="op">=</span> {</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="fu">moveToAmsterdam</span>()<span class="op">:</span><span class="dt">void</span><span class="op">;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">const</span> flyingFish<span class="op">:</span> Flying <span class="op">&amp;</span> Fish<span class="op">;</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">const</span> flyingSaucer<span class="op">:</span> Flying <span class="op">&amp;</span> Saucer<span class="op">;</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">const</span> flyingDutchman<span class="op">:</span> Flying <span class="op">&amp;</span> Dutchman<span class="op">;</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>flyingFish<span class="op">.</span><span class="fu">fly</span>()<span class="op">;</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>flyingSaucer<span class="op">.</span><span class="fu">fly</span>()<span class="op">;</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>flyingDutchman<span class="op">.</span><span class="fu">moveToAmsterdam</span>()<span class="op">;</span><span class="co">//</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>flyingDutchman<span class="op">.</span><span class="fu">fly</span>()<span class="op">;</span></span></code></pre></div>
<p><strong>Внимание</strong> Если мы хотим потребовать от TypeScript такой новый тип, значения которого одновременно являются значениями нескольких других, мы используем синтаксис <code>string &amp; number</code>.</p>
<p>Читаем вслух:</p>
<ul>
<li>Декларацию <code>type n = a | b</code> читаем как: новый тип, значения которого являются либо значениями типа <code>a</code>, либо значениями типа <code>b</code>.</li>
<li>Декларацию <code>type n = a &amp; b</code> читаем как: новый тип <code>n</code> такой, что любое значение этого типа является одновременно значением и типа <code>a</code>, и типа <code>b</code>.</li>
</ul>
<p>Как бы вы прочитали?</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> n <span class="op">=</span> (<span class="dt">string</span> <span class="op">|</span> <span class="dt">number</span>) <span class="op">&amp;</span> <span class="dt">string</span><span class="op">;</span></span></code></pre></div>
</section>
<section id="порядок-во-вселенной-типов" class="level3" data-number="3.1.4">
<h3 data-number="3.1.4">Порядок во Вселенной типов</h3>
<p>Мы уже говорили, что компилятор может сравнивать типы. Для двух типов может случиться так, что один расширяет другой. Выше мы составляли тип <code>string | number</code>, он шире, чем отдельно <code>string</code> или отдельно <code>number</code>. Если продолжать наводить порядок среди всего разнообразия типов, найдётся ли тип, шире которого ничего нет? А как насчёт самого узкого типа, уже которого не бывает? Можем ли мы построить что-то вроде оси координат?</p>
<pre><code>самый узкий &lt; пошире &lt; ... &lt; ещё шире &lt; ... &lt; самый широкий</code></pre>
<p>Оказывается, что-то подобное можно построить.</p>
</section>
<section id="единичные-элементы-системы-типов" class="level3" data-number="3.1.5">
<h3 data-number="3.1.5">Единичные элементы системы типов</h3>
<p>Помните, при сложении чисел есть специальное число 0? Его можно добавлять к любому другому числу, но «ничего не поменяется». При умножении есть другое специальное число — 1. Эти числа называют единичными элементами относительно операции сложения и операции умножения.</p>
<p>У TypeScript есть две специальные коробки: unknown и never. Тип unknown работает единичным элементом для операции пересечения:</p>
<pre><code>  T &amp; unknown ~&gt; T</code></pre>
<p>Коробка с именем unknown самая широкая, но зато на ней пустой список операций. Всё, что мы можем сделать с этим типом — выяснить <code>typeof</code>.</p>
<p>Тип never работает единичным элементом для операции объединения:</p>
<pre><code>  T | never ~&gt; T</code></pre>
<p>Коробка с этим типом самая узкая, в ней нет элементов. Неудивительно, что с любым элементом (из нуля элементов) можно совершать любые операции. Такая уж математика.</p>
<p><img src="../media/file5.png" /></p>
<p>В следующем разделе мы рассмотрим специализацию примитивных типов. Да, оказывается и <code>boolean</code> можно специализировать, коробку с boolean сузить.</p>
</section>
</div>
</section>
<section id="санитарная-обработка-внешних-данных" class="level2" data-number="3.2">
<h2 data-number="3.2">3.2. Санитарная обработка внешних данных</h2>
<div class="text-container text-container--module">
<section id="шаг-1-6" class="level3" data-number="3.2.1">
<h3 data-number="3.2.1">Шаг №1</h3>
<p>Поддержка со стороны TypeScript продолжается только во время разработки. Во время работы вы остаётесь с JavaScript и данными.</p>
<p>Чтобы получить максимум от TypeScript, вам нужно быть с ним (с компилятором) откровенными. Если вы будете его обманывать, то наверняка попадёте в ситуацию, когда вместо чисел попадётся строка или значения вовсе нет.</p>
<p>Чтобы TypeScript помог, придётся проводить санитарную обработку данных. Попробуйте произвести её на примере сервиса прогноза погоды. Поскольку сервис вам неподвластен, вы вправе предполагать, что он будет изменяться.</p>
<p>Адрес страницы с описанием сервиса: <a href="http://www.7timer.info/doc.php?lang=en#products">ссылка</a>.</p>
<p>Пример запроса: <a href="http://www.7timer.info/bin/api.pl?output=json&amp;lat=59.930&amp;lon=30.360&amp;product=civillight">http://www.7timer.info/bin/api.pl?output=json&amp;lat=59.930&amp;lon=30.360&amp;product=civillight</a>.</p>
<p>Изучите некоторые начальные сведения, которые мы уже подготовили, в файлах <code>types</code>, <code>errors</code>, <code>request</code>, <code>sanitizer</code>.</p>
<section id="получаем-данные-типа-unknown" class="level4" data-number="3.2.1.1">
<h4 data-number="3.2.1.1">Получаем данные типа unknown</h4>
<p>Чтобы выполнить санитарную обработку полученных от сервера значений, мы должны отталкиваться от следующего предположения: всё, что мы знаем об ответе сервера — это «ничего».</p>
<p>Если вы откроете консоль, то увидите сообщение об ошибке: санитарная обработка ещё не реализована:</p>
<pre><code>Error: not implemented yet
    at adaptFromJson (&lt;anonymous&gt;:2:9)
    at loadWeatherForecast (&lt;anonymous&gt;:42:12)</code></pre>
</section>
</section>
<section id="шаг-2-6" class="level3" data-number="3.2.2">
<h3 data-number="3.2.2">Шаг №2</h3>
<p>Если мы не знаем тип объекта, то <code>typeof</code> при исполнении программы поможет выяснить, что значение не является функцией или примитивным значением. Пока мы не узнаем его внутреннюю структуру, полезно считать объект словарём самого общего вида.</p>
<p>В отношении массива мы рассуждаем подобным образом. Мы используем статический метод класса Array.isArray, чтобы признать в значении законный массив. Но до выяснения природы элементов, содержащихся в нём, мы считаем их <code>unknown</code>.</p>
</section>
<section id="шаг-3-6" class="level3" data-number="3.2.3">
<h3 data-number="3.2.3">Шаг №3</h3>
<p>Согласитесь, если есть разночтения между ожидаемыми и фактическим данными в массиве, то полезно знать номер проблемного элемента. Для этого мы разделим процесс анализа на две части. В реализации функции getWeatherPointValue мы применим подход с использованием <code>Record&lt;string,unknown&gt;</code>. Остановимся на этом подробнее.</p>
<section id="библиотечные-утилитарные-типы" class="level4" data-number="3.2.3.1">
<h4 data-number="3.2.3.1">Библиотечные утилитарные типы</h4>
<p>TypeScript предоставляет разработчику почти две дюжины особых типов. Их названия не являются ключевыми словами языка, но имеют своё определение «из коробки». Один из таких типов — <code>Record</code>. До окончания курса мы познакомимся со многими другими встроенными (библиотечными, утилитарными) типами.</p>
</section>
<section id="record" class="level4" data-number="3.2.3.2">
<h4 data-number="3.2.3.2">Record</h4>
<p>Тип Record&lt;key,value&gt; — это дженерик с двумя типами-параметрами. Первый тип-параметр — тип значения ключа. Второй параметр — тип значения значения (как-то много слов о значении, да?)</p>
<p>С помощью Record&lt;key,value&gt; можно легко определить словарь для локализации терминов на разные языки:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> dictionaryRu<span class="op">:</span> <span class="bu">Record</span><span class="op">&lt;</span><span class="dt">string</span><span class="op">,</span><span class="dt">string</span><span class="op">&gt;</span> <span class="op">=</span> {<span class="st">&#39;dictionary&#39;</span><span class="op">:</span> <span class="st">&#39;словарь&#39;</span>}</span></code></pre></div>
<p>Или определить карту соответствия:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> wordNumber<span class="op">:</span><span class="bu">Record</span><span class="op">&lt;</span><span class="dt">string</span><span class="op">,</span> <span class="dt">number</span><span class="op">&gt;</span> <span class="op">=</span> {<span class="st">&#39;Golden ratio&#39;</span><span class="op">:</span> <span class="fl">1.6</span><span class="op">,</span> <span class="st">&#39;Euler</span><span class="sc">\&#39;</span><span class="st">s Number &#39;</span><span class="op">:</span> <span class="fl">2.7</span><span class="op">,</span> <span class="st">&#39;Pi&#39;</span><span class="op">:</span> <span class="fl">3.14</span>}<span class="op">;</span></span></code></pre></div>
<p>Если тип значения значения «пока ещё» неизвестен, можно определить тип словаря-карты как:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> nonTrivialObject<span class="op">:</span> <span class="bu">Record</span><span class="op">&lt;</span><span class="dt">string</span><span class="op">,</span> <span class="dt">unknown</span><span class="op">&gt;</span> <span class="op">=</span> {}<span class="op">;</span></span></code></pre></div>
<p>Эту конструкцию мы будем использовать в дальнейшем.</p>
<p>В JavaScript значениям такого типа часто соответствует обычный объект. Вы это заметили из примеров.</p>
</section>
</section>
<section id="шаг-4-6" class="level3" data-number="3.2.4">
<h3 data-number="3.2.4">Шаг №4</h3>
<p>Для анализа примитивных значений специализированных строковых (или числовых) литеральных типов нам потребуется использовать опорные значения. Они как раз собраны в массивы ещё во время изучения документации сервиса.</p>
<section id="результат" class="level4" data-number="3.2.4.1">
<h4 data-number="3.2.4.1">Результат</h4>
<p>Для анализа полученного с сервера набора значений нам потребовалось выполнить следующие функции:</p>
<ul>
<li>isRecord — доказываем TypeScript, что есть ключи-строки;</li>
<li>isArray — доказываем TypeScript, что у значения есть индекс по номеру;</li>
<li>getWeatherCode, getProductName — используем, чтобы узнать, попадают ли значения в список разрешённых.</li>
</ul>
<p>Изучите и остальные функции тоже. Насколько детальным будет ваш анализ в реальных проектах, зависит от того, какой риск несёт нарушение договорённостей вашему приложению и бизнесу заказчика.</p>
</section>
</section>
</div>
</section>
<section id="специальные-специализированные-литеральные-типы" class="level2" data-number="3.3">
<h2 data-number="3.3">3.3. Специальные (специализированные) литеральные типы</h2>
<div class="text-container text-container--module">
<p>TypeScript рассматривает <strong>константные</strong> переменные примитивных типов особым образом. Он понимает, что если разработчик определил константу, то её значение будет таким на протяжении всей программы. Тип этого значения не изменится.</p>
<p>TypeScript рассматривает такие типы как специализацию. В этом примере тип переменной — не просто строка, а специальная строка:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> INC_ACTION  <span class="op">=</span> <span class="st">&#39;increment&#39;</span><span class="op">;</span></span></code></pre></div>
<p>В следующем примере тип результата функции — это не просто число, а объединение трёх чисел. Причём TypeScript догадывается об этом самостоятельно.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Функция имеет тип</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="co">// (left:string, right:string)=&gt;-1|0|1</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">compare</span> (left<span class="op">:</span><span class="dt">string</span><span class="op">,</span> right<span class="op">:</span><span class="dt">string</span>){</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span>(left <span class="op">&lt;</span> right){</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span>(right <span class="op">&lt;</span> left){</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Специализацию типа boolean полезно использовать для подсказки TypeScript, какой тип из объединения ему следует выбрать.</p>
<p>Операция поиска может закончиться успешно и вернуть то, что требовалось найти. Если искомый элемент в коллекции не найден, то и возвращать нечего.</p>
<section id="поиск" class="level3" data-number="3.3.1">
<h3 data-number="3.3.1">Поиск</h3>
<p>Определим тип результата в случае успеха:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Found<span class="op">&lt;</span>T<span class="op">&gt;</span>{</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    success<span class="op">:</span> <span class="kw">true</span><span class="op">;</span> <span class="co">//Специальный литеральный тип true.</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    data<span class="op">:</span> T<span class="op">;</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Полю success мы указали тип, но это не тип boolean, а тип <code>true</code>. Тип <code>true</code> является специализацией типа boolean.</p>
<p>Если поиск окажется безрезультатным, мы сообщим об этом результатом типа <code>NotFound</code>, который можно определить так:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> NotFound{</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    success<span class="op">:</span> <span class="kw">false</span><span class="op">;</span> <span class="co">//Специальный литеральный тип false</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>По итогам поиска какая-то (ненаписанная ещё) функция вернёт нам результат «найдено» или «не найдено». TypeScript запомнит это как объединение типов <code>Found&lt;T&gt; | NotFound</code>. Зная определения исходных типов, он поможет нам во время разработки и компиляции обнаружить попытку прочитать значение данных, когда ничего не найдено.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Found<span class="op">&lt;</span>T<span class="op">&gt;</span> {</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    success<span class="op">:</span> <span class="kw">true</span><span class="op">;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>    data<span class="op">:</span> T<span class="op">;</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> NotFound {</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>    success<span class="op">:</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">const</span> findResult<span class="op">:</span> Found<span class="op">&lt;</span><span class="dt">string</span><span class="op">&gt;</span> <span class="op">|</span> NotFound<span class="op">;</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span>(<span class="op">!</span>findResult<span class="op">.</span><span class="at">success</span>){</span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>    findResult<span class="op">.</span><span class="at">data</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a><span class="co">//             ^^^^</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a><span class="co">//Property &#39;data&#39; does not exist on type &#39;NotFound&#39;.</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p><a href="https://www.typescriptlang.org/play?jsx=0&amp;ssl=15&amp;ssc=2&amp;pln=1&amp;pc=1#code/JYOwLgpgTgZghgYwgAgGIHsCuIAmAeAFQD5kBvAKGSuQGdMEkaaAuZMKTCAbkupzjBxWBHgF9yoSLEQoAcujAZsOMryp0GEJq3gAbGt3LjyOCAl1woKBOhA0wyGKBwAlLZl1hWS3HntRQAHMSAB9keUUsXB4JGAAKAEInXDc6TwA6DUYaAEoKakdnVI8wdP5BcgB6SoLagoA9RvqqyoAFKHQAB2gwAE9kAHJyuAHkHHQtZBAFZAgAD2B7ZFs2Xu7BiJ8cAfSjIA">Посмотреть в песочнице</a>.</p>
<p>TypeScript вспомнил, что в случае <code>.success === false</code> мы имеем дело с типом <code>NotFound</code>, а не с <code>Found&lt;&gt;</code>, и подсказывает, что свойство data отсутствует.</p>
</section>
</div>
</section>
<section id="специализация-примитивных-типов-строк-чисел-и-флагов" class="level2" data-number="3.4">
<h2 data-number="3.4">3.4. Специализация примитивных типов строк, чисел и флагов</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>В контексте приведённого определения функции укажите, какие выражения TypeScript будут приводить к ошибкам компиляции?</strong></li>
</ol>
<div class="sourceCode" id="cb17"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> GameSpeed <span class="op">=</span> <span class="st">&#39;speed-slow&#39;</span><span class="op">|</span><span class="st">&#39;speed-normal&#39;</span><span class="op">|</span><span class="st">&#39;speed-fast&#39;</span><span class="op">;</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">function</span> <span class="fu">setGameSpeed</span>(speed<span class="op">:</span> GameSpeed)<span class="op">:</span>v</span></code></pre></div>
<ul>
<li>setGameSpeed(slow);</li>
<li>setGameSpeed(‘speed-slow’);</li>
<li>setGameSpeed(‘speed-’+‘slow’);</li>
</ul>
<ol start="2" type="1">
<li><strong>В контексте приведённого определения функции totalOrder выберите, какой тип будут иметь результаты вычисления её значений.</strong></li>
</ol>
<div class="sourceCode" id="cb18"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> totalOrder <span class="op">=</span> (a<span class="op">:</span> <span class="dt">number</span><span class="op">,</span> b<span class="op">:</span> <span class="dt">number</span>) <span class="kw">=&gt;</span> {</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="pp">isNaN</span>(a) <span class="op">&amp;&amp;</span> <span class="pp">isNaN</span>(b)) {</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="pp">isNaN</span>(a)) {</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="pp">isNaN</span>(b)) {</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (a <span class="op">===</span> b) {</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (a <span class="op">&lt;</span> b) {</span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<ul>
<li>Результат вычисления значения в зависимости от параметров может быть либо 0, либо 1, либо -1.</li>
<li>Тип результата функции -1|0|1.</li>
<li>Тип результата функции — number.</li>
</ul>
<ol start="3" type="1">
<li><strong>Какая ошибка возникает при компиляции кода?</strong></li>
</ol>
<div class="sourceCode" id="cb19"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">function</span> <span class="fu">getFlag</span>()<span class="op">:</span> <span class="kw">true</span> <span class="op">|</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> currentFlag<span class="op">:</span> <span class="dt">boolean</span> <span class="op">=</span> <span class="fu">getFlag</span>()<span class="op">;</span></span></code></pre></div>
<ul>
<li>Type ‘boolean’ is not assignable to type ‘true’|‘false’.</li>
<li>Компилируется без ошибок.</li>
<li>Без сведений о реализации функции ответить невозможно.</li>
</ul>
</div>
</section>
<section id="специализация-примитивных-типов-строк-чисел-и-флагов-ответы" class="level2" data-number="3.5">
<h2 data-number="3.5">3.4. Специализация примитивных типов строк, чисел и флагов (Ответы)</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>В контексте приведённого определения функции укажите, какие выражения TypeScript будут приводить к ошибкам компиляции?</strong></li>
</ol>
<div class="sourceCode" id="cb20"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> GameSpeed <span class="op">=</span> <span class="st">&#39;speed-slow&#39;</span><span class="op">|</span><span class="st">&#39;speed-normal&#39;</span><span class="op">|</span><span class="st">&#39;speed-fast&#39;</span><span class="op">;</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">function</span> <span class="fu">setGameSpeed</span>(speed<span class="op">:</span> GameSpeed)<span class="op">:</span>v</span></code></pre></div>
<ul>
<li>setGameSpeed(slow);</li>
<li>setGameSpeed(‘speed-’+‘slow’);</li>
</ul>
<ol start="2" type="1">
<li><strong>В контексте приведённого определения функции totalOrder выберите, какой тип будут иметь результаты вычисления её значений.</strong></li>
</ol>
<div class="sourceCode" id="cb21"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> totalOrder <span class="op">=</span> (a<span class="op">:</span> <span class="dt">number</span><span class="op">,</span> b<span class="op">:</span> <span class="dt">number</span>) <span class="kw">=&gt;</span> {</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="pp">isNaN</span>(a) <span class="op">&amp;&amp;</span> <span class="pp">isNaN</span>(b)) {</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="pp">isNaN</span>(a)) {</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="pp">isNaN</span>(b)) {</span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (a <span class="op">===</span> b) {</span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (a <span class="op">&lt;</span> b) {</span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb21-16"><a href="#cb21-16" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb21-17"><a href="#cb21-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb21-18"><a href="#cb21-18" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<ul>
<li>Тип результата функции -1|0|1.</li>
</ul>
<ol start="3" type="1">
<li><strong>Какая ошибка возникает при компиляции кода?</strong></li>
</ol>
<div class="sourceCode" id="cb22"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">function</span> <span class="fu">getFlag</span>()<span class="op">:</span> <span class="kw">true</span> <span class="op">|</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> currentFlag<span class="op">:</span> <span class="dt">boolean</span> <span class="op">=</span> <span class="fu">getFlag</span>()<span class="op">;</span></span></code></pre></div>
<ul>
<li>Компилируется без ошибок.</li>
</ul>
</div>
</section>
<section id="интерфейсы-и-их-наследники" class="level2" data-number="3.6">
<h2 data-number="3.6">3.5. Интерфейсы и их наследники</h2>
<div class="text-container text-container--module">
<section id="интерфейсы-структурных-типов" class="level3" data-number="3.6.1">
<h3 data-number="3.6.1">Интерфейсы структурных типов</h3>
<p>Поскольку объекты реального мира сложнее примитивных чисел и флагов, разработчик моделирует реальность, собирая примитивные типы в структуры. Структуры по синтаксису похожи на объявления json-объектов, где вместо значения используется имя типа.</p>
<p>Структуры сопровождаются ключевыми словами <code>type</code> или <code>interface</code>. Для многих, но не для всех, целей использование ключевых слов <code>type</code> и <code>interface</code> не отличается. Оба примера декларируют одно и то же намерение разработчика. Значения, которые принадлежат типу <code>StructureExample</code>, можно присваивать переменным, объявленным типом <code>AnotherExample</code>.</p>
<p>Приведённые ниже выражения корректны:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> StructureExample <span class="op">=</span> {</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>  header<span class="op">:</span> <span class="dt">string</span><span class="op">,</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>  useHeader<span class="op">:</span> <span class="dt">boolean</span><span class="op">,</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a><span class="co">// Пример интерфейса, эквивалентного интерфейсу StructureExample,</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a><span class="co">// но с другим именем.</span></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> AnotherExample {</span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a>  header<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>  useHeader<span class="op">:</span> <span class="dt">boolean</span><span class="op">;</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> a1<span class="op">:</span> StructureExample <span class="op">=</span> {</span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a>    header<span class="op">:</span><span class="st">&quot;typescript&quot;</span><span class="op">,</span></span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a>    useHeader<span class="op">:</span> <span class="kw">true</span></span>
<span id="cb23-16"><a href="#cb23-16" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span>
<span id="cb23-17"><a href="#cb23-17" aria-hidden="true" tabindex="-1"></a><span class="co">// Для TypeScript фактическое название интерфейса не имеет значения.</span></span>
<span id="cb23-18"><a href="#cb23-18" aria-hidden="true" tabindex="-1"></a><span class="co">// Название нужно людям, чтобы было удобнее договариваться.</span></span>
<span id="cb23-19"><a href="#cb23-19" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> a2<span class="op">:</span> AnotherExample <span class="op">=</span> a1<span class="op">;</span></span></code></pre></div>
<p>Вы <a href="https://www.typescriptlang.org/play?target=7#code/C4TwDgpgBAysBOBXAxsR8IFEAeBDAtmADbQC8UA3gFBRQAWEuAJhPAFxQDOCAlgHYBzADQ0oiThAASjFuygAjAPaKSuPiIC+AbipV+wVgDNcyaAEE+i4A3g4CxaNVq0GzVh27x+Anc7ETpNzklFUY+HQ1dZEU+bihcAEYOOCRUdCw8QhIocidnV1k2ACJQSE5kLzBgIpE-cSkZdygERAgqbSpo2OB4gCYOCysbOyyyeIStIA">можете убедиться</a>, что компилятор совершенно спокойно воспринимает этот исходный код и создаёт правильный JavaScript.</p>
</section>
<section id="наследование-интерфейсов" class="level3" data-number="3.6.2">
<h3 data-number="3.6.2">Наследование интерфейсов</h3>
<p>При проектировании системы типов для программы разработчик может создавать иерархию интерфейсов. Для обозначения наследования используется ключевое слово <code>extends</code>. Переменные, обозначенные специализированным типом, наследуют поля исходного типа, а выражение в фигурных скобках добавляет новые поля.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> SpecialExample <span class="kw">extends</span> AnotherExample{</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>    footer<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> spec<span class="op">:</span>SpecialExample <span class="op">=</span> {</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>    footer<span class="op">:</span> <span class="st">&quot;работает&quot;</span><span class="op">,</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a>    header<span class="op">:</span> <span class="st">&quot;typescript. Наследование&quot;</span><span class="op">,</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>    useHeader<span class="op">:</span> <span class="kw">true</span><span class="op">,</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>Наследовать можно и от интерфейса, и от псевдонима типа.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> SomeFace3 <span class="kw">extends</span> StructureExample{</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>    footer<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Однако с помощью <code>extends</code> не получится определить новый псевдоним типа. Возможно, этому мешает знак <code>=</code>. Тем не менее аналогичного результата можно добиться и при использовании <code>type</code> псевдонима. Это достигается операцией <strong>объединения</strong>.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> SomeFace4 <span class="op">=</span> StructureExample <span class="op">&amp;</span> {</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>    footer<span class="op">:</span> <span class="dt">string</span><span class="op">,</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>В примерах <code>SpecialExample</code>, <code>SomeFace3</code>, <code>SomeFace4</code> выражают идентичные намерения разработчика.</p>
<p><strong>К сведению.</strong> Кроме операции объединения над типами в TypeScript можно производить и другие операции. Мы познакомимся с ними в ходе курса.</p>
</section>
<section id="реализация-интерфейса-классы" class="level3" data-number="3.6.3">
<h3 data-number="3.6.3">Реализация интерфейса, классы</h3>
<p>Простейший способ реализации интерфейса — создание переменной с аннотацией нужного типа.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> A{</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>    field<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> a<span class="op">:</span>A <span class="op">=</span> {</span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>    field<span class="op">:</span> <span class="st">&#39;value&#39;</span></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Интерфейсы могут содержать не только поля, но и методы, которые тоже <a href="https://www.typescriptlang.org/play?target=7&amp;ssl=19&amp;ssc=1&amp;pln=1&amp;pc=1#code/JYOwLgpgTgZghgYwgAgNImAcwBZgN4BQyxyAtgPZhjkBcyAzmFKJgNxEnMAmEAFAJQ1GzEGwIBfAgQTkQjZAGsWAJWAJscKFxrosuZAF5khEmUrU6AIgDi5Lsjgh7pAJ7JVOMJYA0HYtz5+E1NOCDAAVygQZAADODBkMGwUACF4sAAbFHIYZGtgenIoejoAEjwkgoA6CipycRj2U0lJaVl5ZIyAB2hDZBhwkAQwYFlkXkqS3U8g5CgwyOiYjLhkDPD1VZlwKFWM8nozDNAD5B5kADdgCHBaYnLJmvN6xtbt+S5ZAEVw4AAPSgQHQYTyGYLEWoWZCWAAyqy4wGOmBuCGAqwgh1IcC48zOKBWyAARuEbnALjcIrsfH45sAeHROj0oBICEA">нужно инициализировать</a>. Ниже приводим несколько примеров.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Knight{</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>    motto<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">ride</span>()<span class="op">:</span><span class="dt">string</span><span class="op">;</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> kingRichard<span class="op">:</span>Knight <span class="op">=</span> {</span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a>    motto<span class="op">:</span> <span class="st">&quot;God and my Right&quot;</span><span class="op">,</span></span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">ride</span>(){</span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="vs">`at the Battle of Gisors: </span><span class="sc">${</span><span class="kw">this</span><span class="op">.</span><span class="at">motto</span><span class="sc">}</span><span class="vs">`</span><span class="op">;</span></span>
<span id="cb28-10"><a href="#cb28-10" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb28-11"><a href="#cb28-11" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb28-12"><a href="#cb28-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-13"><a href="#cb28-13" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> helper <span class="op">=</span> <span class="kw">function</span> (this<span class="op">:</span>Knight){ <span class="cf">return</span> <span class="vs">`la lucha contra los molinos de viento:  </span><span class="sc">${</span><span class="kw">this</span><span class="op">.</span><span class="at">motto</span><span class="sc">}</span><span class="vs">`</span><span class="op">;</span>}</span>
<span id="cb28-14"><a href="#cb28-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-15"><a href="#cb28-15" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> donQuixote<span class="op">:</span>Knight <span class="op">=</span>{</span>
<span id="cb28-16"><a href="#cb28-16" aria-hidden="true" tabindex="-1"></a>    motto<span class="op">:</span> <span class="st">&quot;La diligencia es madre de la buenaventura&quot;</span><span class="op">,</span></span>
<span id="cb28-17"><a href="#cb28-17" aria-hidden="true" tabindex="-1"></a>    ride<span class="op">:</span> helper</span>
<span id="cb28-18"><a href="#cb28-18" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Современный JS часто опирается на понятие class. Используя интерфейс, можно описать класс, который этот интерфейс реализует. Вы используете ключевое слово <code>implements</code> для указания, какой именно интерфейс вы намерены реализовать.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> EntityFace{</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a>    field<span class="op">:</span><span class="dt">string</span><span class="op">;</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">toString</span>()<span class="op">:</span><span class="dt">string</span><span class="op">;</span></span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> EntityImpl <span class="kw">implements</span> EntityFace{</span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>  field<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">constructor</span>(){</span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a>      <span class="kw">this</span><span class="op">.</span><span class="at">field</span><span class="op">=</span><span class="st">&quot;value&quot;</span><span class="op">;</span></span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb29-11"><a href="#cb29-11" aria-hidden="true" tabindex="-1"></a>  <span class="fu">toString</span>()<span class="op">:</span> <span class="dt">string</span> {</span>
<span id="cb29-12"><a href="#cb29-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="kw">this</span><span class="op">.</span><span class="at">field</span><span class="op">;</span></span>
<span id="cb29-13"><a href="#cb29-13" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb29-14"><a href="#cb29-14" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb29-15"><a href="#cb29-15" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> entity <span class="op">=</span> <span class="kw">new</span> <span class="fu">EntityImpl</span>()<span class="op">;</span></span></code></pre></div>
<p>Классы в TypeScript заслуживают отдельного обсуждения. В самостоятельной работе после этого параграфа вы встретите трудные вопросы для самостоятельного исследования.</p>
</section>
</div>
</section>
<section id="поведение-интерфейсов-в-typescript" class="level2" data-number="3.7">
<h2 data-number="3.7">3.6. Поведение интерфейсов в TypeScript</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Может ли интерфейс TypeScript наследовать несколько разных родительских интерфейсов?</strong></li>
</ol>
<ul>
<li>Да.</li>
<li>Нет.</li>
</ul>
<ol start="2" type="1">
<li><strong>Почему возникает ошибка компиляции в контексте определения интерфейсов Country и View?</strong></li>
</ol>
<div class="sourceCode" id="cb30"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Country {</span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a>  border<span class="op">:</span> { length<span class="op">:</span> <span class="dt">number</span><span class="op">;</span> }<span class="op">;</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> View {</span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a>  border<span class="op">:</span> { color<span class="op">:</span> <span class="dt">string</span><span class="op">;</span> }<span class="op">;</span></span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> CountryView <span class="kw">extends</span> Country<span class="op">,</span> View { }</span>
<span id="cb30-10"><a href="#cb30-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-11"><a href="#cb30-11" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> countrySettings <span class="op">=</span> {</span>
<span id="cb30-12"><a href="#cb30-12" aria-hidden="true" tabindex="-1"></a>  border<span class="op">:</span> {</span>
<span id="cb30-13"><a href="#cb30-13" aria-hidden="true" tabindex="-1"></a>      color<span class="op">:</span> <span class="st">&#39;red&#39;</span><span class="op">,</span></span>
<span id="cb30-14"><a href="#cb30-14" aria-hidden="true" tabindex="-1"></a>      length<span class="op">:</span> <span class="dv">30000</span><span class="op">,</span></span>
<span id="cb30-15"><a href="#cb30-15" aria-hidden="true" tabindex="-1"></a>  }<span class="op">,</span></span>
<span id="cb30-16"><a href="#cb30-16" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<ul>
<li>TypeScript не допускает пустые интерфейсы как CountryView, поскольку они все эквивалентны.</li>
<li>TypeScript не допускает множественное наследование не экспортированных интерфейсов.</li>
<li>TypeScript не допускает множественное наследование интерфейсов, содержащих сложные типы.</li>
<li>Правильный ответ не указан</li>
</ul>
<ol start="3" type="1">
<li><strong>В контексте определения интерфейсов GeoBorder, DrawableBorder является ли тип значения переменной эквивалентным интерфейсу CountryView?</strong></li>
</ol>
<div class="sourceCode" id="cb31"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> GeoBorder {</span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>  length<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> DrawableBorder {</span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>  color<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Border <span class="kw">extends</span> GeoBorder<span class="op">,</span> DrawableBorder{}</span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> CountryView {</span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true" tabindex="-1"></a>  border<span class="op">:</span>Border<span class="op">;</span></span>
<span id="cb31-13"><a href="#cb31-13" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb31-14"><a href="#cb31-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-15"><a href="#cb31-15" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> countrySettings <span class="op">=</span> {</span>
<span id="cb31-16"><a href="#cb31-16" aria-hidden="true" tabindex="-1"></a>  border<span class="op">:</span> {</span>
<span id="cb31-17"><a href="#cb31-17" aria-hidden="true" tabindex="-1"></a>    color<span class="op">:</span> <span class="st">&#39;black&#39;</span><span class="op">,</span></span>
<span id="cb31-18"><a href="#cb31-18" aria-hidden="true" tabindex="-1"></a>    length<span class="op">:</span> <span class="dv">30000</span><span class="op">,</span></span>
<span id="cb31-19"><a href="#cb31-19" aria-hidden="true" tabindex="-1"></a>  }<span class="op">,</span></span>
<span id="cb31-20"><a href="#cb31-20" aria-hidden="true" tabindex="-1"></a>} <span class="im">as</span> <span class="kw">const</span><span class="op">;</span></span></code></pre></div>
<ul>
<li>Нет.</li>
<li>Да.</li>
<li>Невозможно ответить.</li>
</ul>
</div>
</section>
<section id="поведение-интерфейсов-в-typescript-ответы" class="level2" data-number="3.8">
<h2 data-number="3.8">3.6. Поведение интерфейсов в TypeScript (Ответы)</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Может ли интерфейс TypeScript наследовать несколько разных родительских интерфейсов?</strong></li>
</ol>
<ul>
<li>Да.</li>
</ul>
<ol start="2" type="1">
<li><strong>Почему возникает ошибка компиляции в контексте определения интерфейсов Country и View?</strong></li>
</ol>
<div class="sourceCode" id="cb32"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Country {</span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a>  border<span class="op">:</span> { length<span class="op">:</span> <span class="dt">number</span><span class="op">;</span> }<span class="op">;</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> View {</span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a>  border<span class="op">:</span> { color<span class="op">:</span> <span class="dt">string</span><span class="op">;</span> }<span class="op">;</span></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-9"><a href="#cb32-9" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> CountryView <span class="kw">extends</span> Country<span class="op">,</span> View { }</span>
<span id="cb32-10"><a href="#cb32-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-11"><a href="#cb32-11" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> countrySettings <span class="op">=</span> {</span>
<span id="cb32-12"><a href="#cb32-12" aria-hidden="true" tabindex="-1"></a>  border<span class="op">:</span> {</span>
<span id="cb32-13"><a href="#cb32-13" aria-hidden="true" tabindex="-1"></a>      color<span class="op">:</span> <span class="st">&#39;red&#39;</span><span class="op">,</span></span>
<span id="cb32-14"><a href="#cb32-14" aria-hidden="true" tabindex="-1"></a>      length<span class="op">:</span> <span class="dv">30000</span><span class="op">,</span></span>
<span id="cb32-15"><a href="#cb32-15" aria-hidden="true" tabindex="-1"></a>  }<span class="op">,</span></span>
<span id="cb32-16"><a href="#cb32-16" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<ul>
<li>Правильный ответ не указан</li>
</ul>
<ol start="3" type="1">
<li><strong>В контексте определения интерфейсов GeoBorder, DrawableBorder является ли тип значения переменной эквивалентным интерфейсу CountryView?</strong></li>
</ol>
<div class="sourceCode" id="cb33"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> GeoBorder {</span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>  length<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> DrawableBorder {</span>
<span id="cb33-6"><a href="#cb33-6" aria-hidden="true" tabindex="-1"></a>  color<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb33-7"><a href="#cb33-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb33-8"><a href="#cb33-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-9"><a href="#cb33-9" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Border <span class="kw">extends</span> GeoBorder<span class="op">,</span> DrawableBorder{}</span>
<span id="cb33-10"><a href="#cb33-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-11"><a href="#cb33-11" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> CountryView {</span>
<span id="cb33-12"><a href="#cb33-12" aria-hidden="true" tabindex="-1"></a>  border<span class="op">:</span>Border<span class="op">;</span></span>
<span id="cb33-13"><a href="#cb33-13" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb33-14"><a href="#cb33-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-15"><a href="#cb33-15" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> countrySettings <span class="op">=</span> {</span>
<span id="cb33-16"><a href="#cb33-16" aria-hidden="true" tabindex="-1"></a>  border<span class="op">:</span> {</span>
<span id="cb33-17"><a href="#cb33-17" aria-hidden="true" tabindex="-1"></a>    color<span class="op">:</span> <span class="st">&#39;black&#39;</span><span class="op">,</span></span>
<span id="cb33-18"><a href="#cb33-18" aria-hidden="true" tabindex="-1"></a>    length<span class="op">:</span> <span class="dv">30000</span><span class="op">,</span></span>
<span id="cb33-19"><a href="#cb33-19" aria-hidden="true" tabindex="-1"></a>  }<span class="op">,</span></span>
<span id="cb33-20"><a href="#cb33-20" aria-hidden="true" tabindex="-1"></a>} <span class="im">as</span> <span class="kw">const</span><span class="op">;</span></span></code></pre></div>
<ul>
<li>Невозможно ответить.</li>
</ul>
</div>
</section>
<section id="перегрузка-функций" class="level2" data-number="3.9">
<h2 data-number="3.9">3.7. Перегрузка функций</h2>
<div class="text-container text-container--module">
<section id="список-параметров" class="level3" data-number="3.9.1">
<h3 data-number="3.9.1">Список параметров</h3>
<p>Любой вариант описания типа функции позволяет указать список параметров, которые нужны для её работы. Необходимо указывать имя формального параметра и его тип.</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> PrimeDetector <span class="op">=</span> (intToTest<span class="op">:</span><span class="dt">number</span>)<span class="kw">=&gt;</span><span class="dt">boolean</span><span class="op">;</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> GCDService <span class="op">=</span> (a<span class="op">:</span><span class="dt">number</span><span class="op">,</span> b<span class="op">:</span><span class="dt">number</span>)<span class="kw">=&gt;</span><span class="dt">number</span><span class="op">;</span></span></code></pre></div>
<p>Имя формального параметра в описании типа может не совпадать с именем параметра при описании функции:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> isPrime<span class="op">:</span> PrimeDetector <span class="op">=</span> <span class="kw">function</span> (value) {</span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">switch</span> (value) {</span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">3</span><span class="op">:</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">5</span><span class="op">:</span></span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">7</span><span class="op">:</span></span>
<span id="cb35-7"><a href="#cb35-7" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="kw">true</span><span class="op">;</span></span>
<span id="cb35-8"><a href="#cb35-8" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb35-9"><a href="#cb35-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span>(value<span class="op">&lt;</span><span class="dv">10</span>){</span>
<span id="cb35-10"><a href="#cb35-10" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb35-11"><a href="#cb35-11" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb35-12"><a href="#cb35-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">Error</span>(<span class="st">&#39;a very difficult problem&#39;</span>)<span class="op">;</span></span>
<span id="cb35-13"><a href="#cb35-13" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>В приведённом примере функция <code>isPrime</code> использует параметр <code>value</code>, имя которого отличается от имени <code>intToTest</code> в описании типа. Программа при этом компилируется без ошибок.</p>
</section>
<section id="функции-обрабатывающие-данные-разных-типов" class="level3" data-number="3.9.2">
<h3 data-number="3.9.2">Функции, обрабатывающие данные разных типов</h3>
<p>В JavaScript функция может быть готова к работе с аргументом нескольких типов. Вы можете сообщить компилятору, что функции определённого типа готовы к такому повороту событий, используя пересечение типов.</p>
<blockquote>
<p>Более подробно операции объединения и пересечения типов мы обсуждали во втором модуле.</p>
</blockquote>
<p>Следующее определение информирует компилятор о том, что функция работает и с числами, и со строками:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">getHash</span>(arg<span class="op">:</span> <span class="dt">string</span><span class="op">|</span><span class="dt">number</span>)<span class="op">:</span><span class="dt">number</span>{</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span>(<span class="kw">typeof</span> arg <span class="op">===</span> <span class="st">&quot;number&quot;</span>){</span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> arg<span class="op">;</span></span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> arg<span class="op">.</span><span class="at">length</span><span class="op">;</span></span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Вы можете использовать перегрузку функций. В этом случае вы записываете одно за другим все варианты возможных аргументов и тут же, после всех деклараций, записываете реализацию. Обратите внимание, что тип реализации доступен только для компилятора, а тип аргументов реализации должен объединять все типы в перегруженных декларациях.</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">getHashOverload</span>(arg<span class="op">:</span> <span class="dt">number</span>)<span class="op">:</span><span class="dt">number</span><span class="op">;</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">getHashOverload</span>(arg<span class="op">:</span> <span class="dt">string</span>)<span class="op">:</span><span class="dt">number</span><span class="op">;</span></span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">getHashOverload</span>(arg<span class="op">:</span> <span class="dt">unknown</span>){</span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span>(<span class="kw">typeof</span> arg <span class="op">===</span> <span class="st">&quot;number&quot;</span>){</span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> arg<span class="op">;</span></span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span>(<span class="kw">typeof</span> arg <span class="op">===</span> <span class="st">&quot;string&quot;</span>){</span>
<span id="cb37-8"><a href="#cb37-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> arg<span class="op">.</span><span class="at">length</span><span class="op">;</span></span>
<span id="cb37-9"><a href="#cb37-9" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb37-10"><a href="#cb37-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">Error</span>()<span class="op">;</span></span>
<span id="cb37-11"><a href="#cb37-11" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb37-12"><a href="#cb37-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-13"><a href="#cb37-13" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> value <span class="op">=</span> <span class="fu">getHashOverload</span>(<span class="st">&#39;полотенце&#39;</span>)<span class="op">;</span></span></code></pre></div>
<p><a href="https://www.typescriptlang.org/play?ssl=13&amp;ssc=44&amp;pln=1&amp;pc=1#code/GYVwdgxgLglg9mABAcwKZQBIEMDOALAeQDdUAnAGziwBMAKLU5ALkTBAFsAjMgSiba5kA3AChQkWAhTps+YmUo16jFjiikYYZHwHdSo8dHhI0mXIRIUqdBs0TgA1mDgB3MDwDeIxD8QxgtFAAngAOqHDAiLaIALxxiABEumQJnt6+GaToIKRItqIZAL7pPv6BoeGR0XExiWoaWqleGZnZuVGMAHTkqFpQeAW+xRn9pK6sqC6IAKKkY6S0PKLFIhAIaohEWOQgqLHSZnKWinQA5ID8IIB8IIDcIJeAQiCArCCAvCCAYiAPp0siQA">Посмотреть в песочнице</a>.</p>
<p>При использовании такого определения функции TypeScript предлагает на выбор два варианта вызова.</p>
<p><img src="../media/file6.png" /></p>
<p>Этот вариант декларации универсальных функций позволяет потребовать, чтобы пользователь функции при вызове использовал значения предусмотренного типа. Но чтобы реализовать такую декларацию, автору функции приходится самостоятельно проводить дополнительную проверку фактического типа полученного значения аргумента.</p>
<p>Использование обобщённого программирования позволяет написать программу третьим способом.</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">getHashGeneric</span><span class="op">&lt;</span>T <span class="kw">extends</span> <span class="dt">string</span><span class="op">|</span><span class="dt">number</span><span class="op">&gt;</span>(arg<span class="op">:</span>T)<span class="op">:</span><span class="dt">number</span>{</span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span>(<span class="kw">typeof</span> arg <span class="op">===</span> <span class="st">&#39;number&#39;</span>){</span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> arg<span class="op">;</span></span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb38-5"><a href="#cb38-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span>(<span class="kw">typeof</span> arg <span class="op">===</span> <span class="st">&#39;string&#39;</span>){</span>
<span id="cb38-6"><a href="#cb38-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> arg<span class="op">.</span><span class="at">length</span><span class="op">;</span></span>
<span id="cb38-7"><a href="#cb38-7" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb38-8"><a href="#cb38-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">Error</span>(<span class="st">&#39;invalid argument&#39;</span>)<span class="op">;</span></span>
<span id="cb38-9"><a href="#cb38-9" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb38-10"><a href="#cb38-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-11"><a href="#cb38-11" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> hash1 <span class="op">=</span> <span class="fu">getHashGeneric</span>(<span class="dv">42</span>)<span class="op">;</span></span>
<span id="cb38-12"><a href="#cb38-12" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> hash2 <span class="op">=</span> <span class="fu">getHashGeneric</span>(<span class="st">&#39;towel&#39;</span>)</span></code></pre></div>
<p><a href="https://www.typescriptlang.org/play?ssl=12&amp;ssc=38&amp;pln=1&amp;pc=1#code/GYVwdgxgLglg9mABAcwKZQBIEMDOALAcVTFQCcYIAeAFUVQA8piATHRHKcsZAHzBAC2AIzIA+ABRZSyAFzUAlDP7CyAbwBQiLYhjBxUAJ4AHVHGCIpyRAF5biAOTKRpe-I3aPiUuhCkklgG5NbQBfYK1dfWNTc0sbO3sOLmRXd08tbyhff2kAOgAbYmQoPCCPMI8S0jgAd0QSOoBRUmrScXsYMAA3LHyYZgtpQWIoVyCw9QgEDkQ8XDwARhsUdGx8IhJyCHEAFgAmeSCpsBm5-D3ltEx5jbIKdqha1HzXIA">Посмотреть в песочнице</a>.</p>
<p>Откройте предыдущий пример в песочнице и посмотрите, какие типы аргументов ожидает функция <code>getHashGeneric</code>.</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> value <span class="op">=</span> <span class="dv">42</span> <span class="im">as</span> <span class="dt">string</span><span class="op">|</span><span class="dt">number</span><span class="op">;</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="fu">getHash</span>(value))<span class="op">;</span> <span class="co">//Компилируется без ошибок.</span></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="fu">getHashOverload</span>(value))<span class="op">;</span> <span class="co">//Ошибка 2769.</span></span></code></pre></div>
<p><a href="https://www.typescriptlang.org/play?target=7#code/GYVwdgxgLglg9mABAcwKZQBIEMDOALACiwCdkAuRHKYmMZAHzBAFsAjVYgSjKbY4G8AUIhGIYwAlACeAB1RxgiEskQBedYgBEvdsU2choo4mLoQxJMoDcw0QF9bI01HOXSAOgA2qOlDw2HQVBIWAQUdGx8AHkANw5POCwAEyJSCh0ObgziG2DoeCQ0TFw8WPjElOUKKho6LJZdXPB8sKLI0rjiBOTU8iUwKQNHMQlpOQUlUjUNbQaOfUNjJzMLSeQbIwcjcUlZeUVladUtGtpkBeGjZ1c1jfthv2I4AHdEMFRXgFFiJ+ICTgCgkESVQEE8JFQiAgCCoIhiWE8IFQ1WoZ0YcxyQOhYBwcG8XjgyAIbRKBHhiNQnABiAA9DTAFwggD4QQA8IIB+EEAHCCAbhB2YABEEAwiCAVhBAEIggEEQQDyIIhAIwgAsA7CCIRmACRB2ZLGfTBNjcfiEkSSdFOt0UuSkVSrLSaYrlfTAAwgiAATAB2ABsAE4gA">Изучите поведение</a> этого кода в песочнице.</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a>No overload matches <span class="kw">this</span> call<span class="op">.</span></span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a>  Overload <span class="dv">1</span> <span class="kw">of</span> <span class="dv">2</span><span class="op">,</span> <span class="st">&#39;(arg: number): number&#39;</span><span class="op">,</span> gave the following error<span class="op">.</span></span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a>    Argument <span class="kw">of</span> <span class="kw">type</span> <span class="st">&#39;string | number&#39;</span> <span class="kw">is</span> not assignable to parameter <span class="kw">of</span> <span class="kw">type</span> <span class="st">&#39;number&#39;</span><span class="op">.</span></span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true" tabindex="-1"></a>      Type <span class="st">&#39;string&#39;</span> <span class="kw">is</span> not assignable to <span class="kw">type</span> <span class="st">&#39;number&#39;</span><span class="op">.</span></span>
<span id="cb40-5"><a href="#cb40-5" aria-hidden="true" tabindex="-1"></a>  Overload <span class="dv">2</span> <span class="kw">of</span> <span class="dv">2</span><span class="op">,</span> <span class="st">&#39;(arg: string): number&#39;</span><span class="op">,</span> gave the following error<span class="op">.</span></span>
<span id="cb40-6"><a href="#cb40-6" aria-hidden="true" tabindex="-1"></a>    Argument <span class="kw">of</span> <span class="kw">type</span> <span class="st">&#39;string | number&#39;</span> <span class="kw">is</span> not assignable to parameter <span class="kw">of</span> <span class="kw">type</span> <span class="st">&#39;string&#39;</span><span class="op">.</span></span>
<span id="cb40-7"><a href="#cb40-7" aria-hidden="true" tabindex="-1"></a>      Type <span class="st">&#39;number&#39;</span> <span class="kw">is</span> not assignable to <span class="kw">type</span> <span class="st">&#39;string&#39;</span><span class="op">.</span></span></code></pre></div>
</section>
<section id="обобщённое-программирование-функций" class="level3" data-number="3.9.3">
<h3 data-number="3.9.3">Обобщённое программирование функций</h3>
<p>Использование обобщённого параметра при определении функции позволяет создавать реализацию алгоритмов в общем виде.</p>
<p>В приведённом примере разработчик выражает намерение работать с массивами значений. С помощью использования обобщённого типа аргумента <code>&lt;T&gt;</code> разработчик объясняет компилятору: <em>какие типы значений будут у элементов в массиве во время исполнения, значение такого типа и вернёт функция</em>.</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Алгоритму неважно, какого типа элементы</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a><span class="co">// содержатся в массиве, но важно, что их </span></span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a><span class="co">// там как минимум один.</span></span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">extractFirstElement</span><span class="op">&lt;</span>T<span class="op">&gt;</span>(array<span class="op">:</span>T[])<span class="op">:</span>T{</span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span>(array<span class="op">.</span><span class="at">length</span><span class="op">&gt;</span><span class="dv">0</span>){</span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> array[<span class="dv">0</span>]<span class="op">;</span></span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">RangeError</span>(<span class="vs">`Попытка выхода за пределы массива`</span>)<span class="op">;</span></span>
<span id="cb41-9"><a href="#cb41-9" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb41-10"><a href="#cb41-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-11"><a href="#cb41-11" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> num <span class="op">=</span> <span class="fu">extractFirstElement</span>([<span class="dv">1</span><span class="op">,</span><span class="dv">2</span><span class="op">,</span><span class="dv">3</span>])<span class="op">;</span></span>
<span id="cb41-12"><a href="#cb41-12" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> str <span class="op">=</span> <span class="fu">extractFirstElement</span>([<span class="st">&quot;a&quot;</span><span class="op">,</span><span class="st">&quot;b&quot;</span><span class="op">,</span><span class="st">&quot;c&quot;</span>])<span class="op">;</span></span></code></pre></div>
<p>Переменная <code>num</code> получает значение <code>1</code> типа <code>number</code>, а переменная <code>str</code> — значение <code>"a"</code> типа string. Но важно даже не это, а то, что компилятор об этом догадывается сам.</p>
</section>
<section id="объявление-типа-перегруженной-функции" class="level3" data-number="3.9.4">
<h3 data-number="3.9.4">Объявление типа перегруженной функции</h3>
<p>Чтобы объявить тип перегруженной функции, но не указывать реализацию, как в примере <code>getHashOverload</code>, используйте сигнатуру вызова в интерфейсе:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> HashComputer {</span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a>    (arg<span class="op">:</span> <span class="dt">number</span>)<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a>    (arg<span class="op">:</span> <span class="dt">string</span>)<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb42-5"><a href="#cb42-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb42-6"><a href="#cb42-6" aria-hidden="true" tabindex="-1"></a><span class="co">//Позднее используем этот интерфейс для создания реализации.</span></span>
<span id="cb42-7"><a href="#cb42-7" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> getHashOverload<span class="op">:</span> HashComputer <span class="op">=</span> (arg<span class="op">:</span> <span class="dt">unknown</span>)<span class="op">:</span> <span class="dt">number</span><span class="kw">=&gt;</span>{</span>
<span id="cb42-8"><a href="#cb42-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (<span class="kw">typeof</span> arg <span class="op">===</span> <span class="st">&#39;number&#39;</span>) {</span>
<span id="cb42-9"><a href="#cb42-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> arg<span class="op">;</span></span>
<span id="cb42-10"><a href="#cb42-10" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb42-11"><a href="#cb42-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (<span class="kw">typeof</span> arg <span class="op">===</span> <span class="st">&#39;string&#39;</span>) {</span>
<span id="cb42-12"><a href="#cb42-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> arg<span class="op">.</span><span class="at">length</span><span class="op">;</span></span>
<span id="cb42-13"><a href="#cb42-13" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb42-14"><a href="#cb42-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">Error</span>(<span class="st">&#39;invalid argument&#39;</span>)<span class="op">;</span></span>
<span id="cb42-15"><a href="#cb42-15" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>После демонстрации мы рассмотрим, как классы в TypeScript населяют сразу несколько Вселенных: и Вселенную типов, и Вселенную значений.</p>
</section>
</div>
</section>
<section id="создание-интерфейсов-функций-устойчивых-к-изменению-типов-значений-параметров" class="level2" data-number="3.10">
<h2 data-number="3.10">3.8. Создание интерфейсов функций устойчивых к изменению типов значений параметров</h2>
<div class="text-container text-container--module">
<section id="шаг-1-7" class="level3" data-number="3.10.1">
<h3 data-number="3.10.1">Шаг №1</h3>
<p>При использовании TypeScript вы обозначаете типы аргументов функции, и в результате код становится зависимым от этих типов. Если развитие продукта потребует изменения типа, вам придётся изменять исходный код функции.</p>
<p>Изучите влияние изменения описания типа, предложите и реализуйте интерфейс более устойчивой функции, чем это сделано в данном коде.</p>
<section id="время-t0" class="level4" data-number="3.10.1.1">
<h4 data-number="3.10.1.1">Время T0</h4>
<p>В начальный момент интерфейс содержит:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Order {</span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a>  orderId<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a>  datePlaced<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true" tabindex="-1"></a>  customerId<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true" tabindex="-1"></a>  itemsCount<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb43-6"><a href="#cb43-6" aria-hidden="true" tabindex="-1"></a>  amountTotal<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb43-7"><a href="#cb43-7" aria-hidden="true" tabindex="-1"></a>  taxTotal<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb43-8"><a href="#cb43-8" aria-hidden="true" tabindex="-1"></a>  includeHandling<span class="op">:</span> <span class="dt">boolean</span><span class="op">;</span></span>
<span id="cb43-9"><a href="#cb43-9" aria-hidden="true" tabindex="-1"></a>  includeShipping<span class="op">:</span> <span class="dt">boolean</span><span class="op">;</span></span>
<span id="cb43-10"><a href="#cb43-10" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Предложено создать функцию <code>createReport</code> с интерфейсом:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> CustomerId <span class="op">=</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> DateTime <span class="op">=</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb44-3"><a href="#cb44-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> LastOrderReportLine <span class="op">=</span> <span class="bu">Map</span><span class="op">&lt;</span>CustomerId<span class="op">,</span> DateTime<span class="op">&gt;;</span></span>
<span id="cb44-4"><a href="#cb44-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb44-5"><a href="#cb44-5" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Reporter {</span>
<span id="cb44-6"><a href="#cb44-6" aria-hidden="true" tabindex="-1"></a>  (orders<span class="op">:</span> Order[])<span class="op">:</span> LastOrderReportLine<span class="op">;</span></span>
<span id="cb44-7"><a href="#cb44-7" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>От этой функции требуется изучить список заказов <code>orders</code> и вернуть словарь, где каждому клиенту сопоставляется дата последнего заказа.</p>
<p>Возможно, бизнес-логика приложения использует сведения о клиентах, которые давно ничего не заказывали, чтобы предложить им какие-то преимущества.</p>
<p>Исходные сведения получаются из запроса в базу данных:</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">const</span> getOrders<span class="op">:</span>()<span class="kw">=&gt;</span>Order[]<span class="op">;</span></span></code></pre></div>
</section>
<section id="время-t1" class="level4" data-number="3.10.1.2">
<h4 data-number="3.10.1.2">Время T1</h4>
<p>Приложение претерпело развитие, и выяснилось, что база данных перестала хранить количество позиций и сумму заказа в записи Order.</p>
<p>После изменения функции <code>getOrders</code> состояние стало:</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Order2 {</span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true" tabindex="-1"></a>  orderId<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true" tabindex="-1"></a>  datePlaced<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb46-4"><a href="#cb46-4" aria-hidden="true" tabindex="-1"></a>  customerId<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb46-5"><a href="#cb46-5" aria-hidden="true" tabindex="-1"></a>  includeHandling<span class="op">:</span> <span class="dt">boolean</span><span class="op">;</span></span>
<span id="cb46-6"><a href="#cb46-6" aria-hidden="true" tabindex="-1"></a>  includeShipping<span class="op">:</span> <span class="dt">boolean</span><span class="op">;</span></span>
<span id="cb46-7"><a href="#cb46-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb46-8"><a href="#cb46-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb46-9"><a href="#cb46-9" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">const</span> getOrders<span class="op">:</span> () <span class="kw">=&gt;</span> Order2[]<span class="op">;</span></span></code></pre></div>
<p>При этом выяснилось, что <code>createReport</code> больше не компилируется.</p>
<p>Конечно, можно добавить запросы в базу данных и выяснить количество и сумму каждого заказа, но можно поступить иначе. Как? Посмотрим на втором шаге.</p>
</section>
</section>
<section id="шаг-2-7" class="level3" data-number="3.10.2">
<h3 data-number="3.10.2">Шаг №2</h3>
<p>Система типов TypeScript разрешает присваивать переменной, объявленной с аннотацией типа <code>A | B</code>, значение, имеющее тип <code>A</code>.</p>
<p>Обозначим минимально необходимый набор полей из выборки о заказах как тип <code>A</code>, набор остальных полей обозначим типом <code>B</code>. Мы получим:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> A <span class="op">=</span> {</span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true" tabindex="-1"></a>  datePlaced<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true" tabindex="-1"></a>  customerId<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb47-5"><a href="#cb47-5" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> B <span class="op">=</span> {</span>
<span id="cb47-6"><a href="#cb47-6" aria-hidden="true" tabindex="-1"></a>  orderId<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb47-7"><a href="#cb47-7" aria-hidden="true" tabindex="-1"></a>  itemsCount<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb47-8"><a href="#cb47-8" aria-hidden="true" tabindex="-1"></a>  amountTotal<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb47-9"><a href="#cb47-9" aria-hidden="true" tabindex="-1"></a>  taxTotal<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb47-10"><a href="#cb47-10" aria-hidden="true" tabindex="-1"></a>  includeHandling<span class="op">:</span> <span class="dt">boolean</span><span class="op">;</span></span>
<span id="cb47-11"><a href="#cb47-11" aria-hidden="true" tabindex="-1"></a>  includeShipping<span class="op">:</span> <span class="dt">boolean</span><span class="op">;</span></span>
<span id="cb47-12"><a href="#cb47-12" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>В таком виде тип <code>Order</code> эквивалентен типу <code>A|B</code>. Если мы сейчас подчеркнём, что для составления отчёта форма типа <code>B</code> совсем не важна, то приблизимся к цели. Во всяком случае, мы поняли, что тип функции <code>reporter</code> следует изменить:</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> CustomerId <span class="op">=</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> DateTime <span class="op">=</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb48-3"><a href="#cb48-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> LastOrderReportLine <span class="op">=</span> <span class="bu">Map</span><span class="op">&lt;</span>CustomerId<span class="op">,</span> DateTime<span class="op">&gt;;</span></span>
<span id="cb48-4"><a href="#cb48-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb48-5"><a href="#cb48-5" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> A{</span>
<span id="cb48-6"><a href="#cb48-6" aria-hidden="true" tabindex="-1"></a>  datePlaced<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb48-7"><a href="#cb48-7" aria-hidden="true" tabindex="-1"></a>  customerId<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb48-8"><a href="#cb48-8" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb48-9"><a href="#cb48-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb48-10"><a href="#cb48-10" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Reporter {</span>
<span id="cb48-11"><a href="#cb48-11" aria-hidden="true" tabindex="-1"></a>  (orders<span class="op">:</span> A[])<span class="op">:</span> LastOrderReportLine<span class="op">;</span></span>
<span id="cb48-12"><a href="#cb48-12" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Конечно, именование типов одной буквой сложно назвать лучшей практикой, поэтому в песочнице мы применим имя <code>CustomerOrderDate</code>.</p>
</section>
<section id="шаг-3-7" class="level3" data-number="3.10.3">
<h3 data-number="3.10.3">Шаг №3</h3>
<p>Есть несколько вариантов написания функции сбора статистики по имеющимся требованиям. Мы остановились на свёртке редуктором.</p>
<p>В этом случае нам потребуется два отрывка: создание начального состояния аккумулятора и сам редуктор.</p>
<p>Начальное состояние — смотрим файл <code>report-seed.ts</code>.</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> reportSeed <span class="op">=</span> ()<span class="kw">=&gt;new</span> <span class="bu">Map</span><span class="op">&lt;</span>CustomerId<span class="op">,</span>DateTime<span class="op">&gt;</span>()<span class="op">;</span></span></code></pre></div>
<p>Функция редуктора проверяет, что предъявленный ей заказчик уже встречался, смотрит дату его прошлого заказа и при необходимости обновляет состояние (смотрим report-reducer.ts).</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb50-1"><a href="#cb50-1" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> reportReducer <span class="op">=</span> (</span>
<span id="cb50-2"><a href="#cb50-2" aria-hidden="true" tabindex="-1"></a>  report<span class="op">:</span> <span class="bu">Map</span><span class="op">&lt;</span>CustomerId<span class="op">,</span> DateTime<span class="op">&gt;,</span></span>
<span id="cb50-3"><a href="#cb50-3" aria-hidden="true" tabindex="-1"></a>  { customerId<span class="op">,</span> datePlaced }<span class="op">:</span> CustomerOrderDate<span class="op">,</span></span>
<span id="cb50-4"><a href="#cb50-4" aria-hidden="true" tabindex="-1"></a>)<span class="op">:</span> <span class="bu">Map</span><span class="op">&lt;</span><span class="dt">string</span><span class="op">,</span> <span class="dt">string</span><span class="op">&gt;</span> <span class="kw">=&gt;</span> {</span>
<span id="cb50-5"><a href="#cb50-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="fu">isNewCustomerOrRecentDate</span>(report<span class="op">.</span><span class="fu">get</span>(customerId)<span class="op">,</span> datePlaced)) {</span>
<span id="cb50-6"><a href="#cb50-6" aria-hidden="true" tabindex="-1"></a>    report<span class="op">.</span><span class="fu">set</span>(customerId<span class="op">,</span> datePlaced)<span class="op">;</span></span>
<span id="cb50-7"><a href="#cb50-7" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb50-8"><a href="#cb50-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> report<span class="op">;</span></span>
<span id="cb50-9"><a href="#cb50-9" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>Соединяя всё вместе, получаем реализацию сбора статистики про клиента (смотрим <code>reporter.ts</code>).</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb51-1"><a href="#cb51-1" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> createReport<span class="op">:</span>Reporter <span class="op">=</span> (orders) <span class="kw">=&gt;</span> orders<span class="op">.</span><span class="fu">reduce</span>(reportReducer<span class="op">,</span> <span class="fu">reportSeed</span>())<span class="op">;</span></span></code></pre></div>
<p>Теперь зафиксируем поведение наших функций модульными тестами.</p>
</section>
<section id="шаг-4-7" class="level3" data-number="3.10.4">
<h3 data-number="3.10.4">Шаг №4</h3>
<p>С помощью модульных тестов зафиксируем решения, которые мы приняли при реализации задачи.</p>
<p>Код в песочнице содержит два файла:</p>
<ul>
<li>report-reducer.modern.test.ts</li>
<li>report-reducer.pre-historic.test.ts</li>
</ul>
<p>Эти файлы содержат описание поведения функции редуктора.</p>
</section>
</div>
</section>
<section id="классы-и-их-интерфейсы" class="level2" data-number="3.11">
<h2 data-number="3.11">3.9. Классы и их интерфейсы</h2>
<div class="text-container text-container--module">
<p>В JavaScript ключевое слово <code>class</code> позволяет создать описание класса. Это описание можно использовать с ключевым словом <code>new</code> и создавать экземпляры класса. Если при выполнении JS спросить мнение оператора <code>typeof</code>, то вы узнаете, что класс — это функция. В консоли браузера можно увидеть:</p>
<p><img src="../media/file7.png" /></p>
<section id="классы-typescript" class="level3" data-number="3.11.1">
<h3 data-number="3.11.1">Классы TypeScript</h3>
<p>Классы в TypeScript обладают гораздо более полным набором качеств, необходимых для построения системы в рамках философии ООП.</p>
<p>TypeScript дополняет описание класса возможностями, отсутствующими в JS:</p>
<ul>
<li>модификатор <code>private</code> указывает компилятору на необходимость контролировать доступ к значению (на этапе компиляции) только для членов текущего класса.</li>
<li>модификатор <code>protected</code> заставляет компилятор разрешать доступ к значениям поля только для текущего класса и его наследников.</li>
<li><code>public</code> (по умолчанию) — это поля, как и в JavaScript.</li>
</ul>
<p>Дополнительно компилятор контролирует корректное использование абстрактных классов и методов, а также модификатора readonly.</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb52-1"><a href="#cb52-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Компилятор не позволит создать </span></span>
<span id="cb52-2"><a href="#cb52-2" aria-hidden="true" tabindex="-1"></a><span class="co">// экземпляр абстрактного класса.</span></span>
<span id="cb52-3"><a href="#cb52-3" aria-hidden="true" tabindex="-1"></a><span class="kw">abstract</span> <span class="kw">class</span> Base {</span>
<span id="cb52-4"><a href="#cb52-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="kw">readonly</span> v<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb52-5"><a href="#cb52-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">constructor</span>(v<span class="op">:</span> <span class="dt">number</span>) {</span>
<span id="cb52-6"><a href="#cb52-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">//new.target всегда не Base.</span></span>
<span id="cb52-7"><a href="#cb52-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">.</span><span class="at">v</span> <span class="op">=</span> v<span class="op">;</span></span>
<span id="cb52-8"><a href="#cb52-8" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb52-9"><a href="#cb52-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb52-10"><a href="#cb52-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Создавать заглушку не требуется.</span></span>
<span id="cb52-11"><a href="#cb52-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">protected</span> <span class="kw">abstract</span> <span class="fu">getFactor</span>()<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb52-12"><a href="#cb52-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb52-13"><a href="#cb52-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="fu">computeValue</span>() {</span>
<span id="cb52-14"><a href="#cb52-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="kw">this</span><span class="op">.</span><span class="at">v</span> <span class="op">*</span> <span class="kw">this</span><span class="op">.</span><span class="fu">getFactor</span>()<span class="op">;</span></span>
<span id="cb52-15"><a href="#cb52-15" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb52-16"><a href="#cb52-16" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb52-17"><a href="#cb52-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb52-18"><a href="#cb52-18" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Double <span class="kw">extends</span> Base {</span>
<span id="cb52-19"><a href="#cb52-19" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Компилятор потребует реализацию абстрактного метода.</span></span>
<span id="cb52-20"><a href="#cb52-20" aria-hidden="true" tabindex="-1"></a>    <span class="kw">protected</span> <span class="fu">getFactor</span>()<span class="op">:</span> <span class="dt">number</span> {</span>
<span id="cb52-21"><a href="#cb52-21" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb52-22"><a href="#cb52-22" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb52-23"><a href="#cb52-23" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Изучите <a href="https://www.typescriptlang.org/play?#code/PTAEi4QQ+EEHhBH4QQOEENwgh5EEEIglACIKQvCCFYQUskg7CCBMIJIvKqIIIgxgLCCAMIKoDIgoAUCKILIg4RucKLA0CMINVQYG4VNkiBmEEgREDatQZsAhgCMAzgBcATuoDGu0EYA267dtAAhKwFNQAbzah3oAA76AlgDd1XSd9B3UAEwB7ADtzAE9QPwAuUCiAVwBbTQd9AG43DyNovX1Ukwj9AAoklIys-QBKF3yPDxAohwB3ADpddX0AcwdTEmpcWUYcfHttB2aW0F0ACx9tLr9QAF4EvJaAXzY5zloiRhImViIGWURAYRBACRBwG9AMXAYKS8AxEHhAORBJ0HFcMIbrhUNRkHNvBEgiYHGFQFpisZTINdAAxJHlCr1ZJpTLZPIQ1Kacw+IxmCLpTypIIANXU5lSDixTXmHhCulS+iiC2Wq3WACoeSsuij0WVKvUdh59vs2BYrDYACIRInmJwOAAeQSiYRs0ycrhanCgcCQaEwBEgAKBIOer3eDC+vxEYgkUhk8lA0BBkEYEP0UIcMLhooxEpxtWyLNZoHZnO5ACYpe4ZQcgA">код</a> в песочнице.</p>
<p>Классы в TypeScript логически находятся в двух контекстах:</p>
<ul>
<li>в области значений это <em>функции, снабжённые модификатором <code>new</code></em></li>
<li>в области типов это <em>описание свойств и методов</em>, участвующее в статическом анализе программы.</li>
</ul>
</section>
<section id="класс-реализует-интерфейс" class="level3" data-number="3.11.2">
<h3 data-number="3.11.2">Класс реализует интерфейс</h3>
<p>В TypeScript класс может реализовывать один или множество интерфейсов. Так достигается полиморфизм.</p>
<div class="sourceCode" id="cb53"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb53-1"><a href="#cb53-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Для правильной сериализации приватного</span></span>
<span id="cb53-2"><a href="#cb53-2" aria-hidden="true" tabindex="-1"></a><span class="co">// состояния класс может реализовать интерфейс.</span></span>
<span id="cb53-3"><a href="#cb53-3" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Serializable<span class="op">&lt;</span>T<span class="op">&gt;</span> {</span>
<span id="cb53-4"><a href="#cb53-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">toJSON</span>(key<span class="op">:</span> <span class="dt">string</span>)<span class="op">:</span> T<span class="op">;</span></span>
<span id="cb53-5"><a href="#cb53-5" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb53-6"><a href="#cb53-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb53-7"><a href="#cb53-7" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Model <span class="kw">implements</span> Serializable<span class="op">&lt;</span>{ id<span class="op">:</span> <span class="dt">number</span><span class="op">,</span> name<span class="op">:</span> <span class="dt">string</span> }<span class="op">&gt;</span>{</span>
<span id="cb53-8"><a href="#cb53-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="kw">readonly</span> id<span class="op">:</span> <span class="dt">number</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb53-9"><a href="#cb53-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="kw">readonly</span> name<span class="op">:</span> <span class="dt">string</span> <span class="op">=</span> <span class="st">&#39;&#39;</span><span class="op">;</span></span>
<span id="cb53-10"><a href="#cb53-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb53-11"><a href="#cb53-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">constructor</span>(id<span class="op">:</span> <span class="dt">number</span><span class="op">,</span> name<span class="op">:</span> <span class="dt">string</span>) {</span>
<span id="cb53-12"><a href="#cb53-12" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">.</span><span class="at">id</span> <span class="op">=</span> id<span class="op">;</span></span>
<span id="cb53-13"><a href="#cb53-13" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">.</span><span class="at">name</span> <span class="op">=</span> name<span class="op">;</span></span>
<span id="cb53-14"><a href="#cb53-14" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb53-15"><a href="#cb53-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb53-16"><a href="#cb53-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Использование метода интерфейса</span></span>
<span id="cb53-17"><a href="#cb53-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">// позволяет JSON.stringify узнать</span></span>
<span id="cb53-18"><a href="#cb53-18" aria-hidden="true" tabindex="-1"></a>    <span class="co">// внутреннюю кухню объекта.</span></span>
<span id="cb53-19"><a href="#cb53-19" aria-hidden="true" tabindex="-1"></a>    <span class="fu">toJSON</span>()<span class="op">:</span> { id<span class="op">:</span> <span class="dt">number</span><span class="op">;</span> name<span class="op">:</span> <span class="dt">string</span><span class="op">;</span> } {</span>
<span id="cb53-20"><a href="#cb53-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> { id<span class="op">:</span> <span class="kw">this</span><span class="op">.</span><span class="at">id</span><span class="op">,</span> name<span class="op">:</span> <span class="kw">this</span><span class="op">.</span><span class="at">name</span> }<span class="op">;</span></span>
<span id="cb53-21"><a href="#cb53-21" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb53-22"><a href="#cb53-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb53-23"><a href="#cb53-23" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">get</span> <span class="fu">title</span>() {</span>
<span id="cb53-24"><a href="#cb53-24" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="vs">`</span><span class="sc">${</span><span class="kw">this</span><span class="op">.</span><span class="at">id</span><span class="sc">}</span><span class="vs"> - </span><span class="sc">${</span><span class="kw">this</span><span class="op">.</span><span class="at">name</span><span class="sc">}</span><span class="vs">`</span><span class="op">;</span></span>
<span id="cb53-25"><a href="#cb53-25" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb53-26"><a href="#cb53-26" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb53-27"><a href="#cb53-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb53-28"><a href="#cb53-28" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> stream <span class="op">=</span> <span class="bu">JSON</span><span class="op">.</span><span class="fu">stringify</span>(<span class="kw">new</span> <span class="fu">Model</span>(<span class="dv">42</span><span class="op">,</span><span class="st">&#39;towel&#39;</span>))<span class="op">;</span></span>
<span id="cb53-29"><a href="#cb53-29" aria-hidden="true" tabindex="-1"></a><span class="co">// Проверьте вывов в консоли песочницы.</span></span>
<span id="cb53-30"><a href="#cb53-30" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(stream)<span class="op">;</span></span></code></pre></div>
<p><a href="https://www.typescriptlang.org/play?ssl=23&amp;ssc=21&amp;pln=1&amp;pc=1#code/JYOwLgpgTgZghgYwgAgMrWHANsAXnAIywgB4AVAPmQG8AoZB5MAewClUB5AOQAoBrCAE8AXMgDOYKKADmASlFkA3LQC+tWgixwxY5AFlmAEwhZkwALYAHYuYjhd6KdjyFiJamcOiQAV3MFoABpkEDhbUQkpEGlkFQo6RmRLKQA3OEhkKAg4Q2YQLEFPbz8AqGQAXmQABmVE5OA0jKycvIKQsIgIyRkK5AByPuV6RgQ8yJ8EFigeYC8QkqD28PFu6NkaYcSGMAALYDEAOlne2dqt7b3D0Nte64gzhjVElnZuHnkaIvn-aEUlzpWUWkfxUG3ODCyYB8UBAn1mol2+yOhmCdwRlwOd1iD1i6jqPiIwAQyGkEDATGAYGI7zB4Mh0NhAAMACTURGHWaggC0yFZ7MxHRUjJxajUGjG5Mi2XMvVeXAOkRkwBggh4IAgAHd9EYTDwACwAJkCfRYGpMfVksmUoxAYmYxAOWGY0h4UrCVqAA">Посмотреть в песочнице</a>.</p>
</section>
<section id="класс-в-качестве-интерфейса" class="level3" data-number="3.11.3">
<h3 data-number="3.11.3">Класс в качестве интерфейса</h3>
<p>Классы TypeScript присутствуют сразу в двух Вселенных. Во Вселенной значений класс представлен функцией. Во Вселенной типов он представлен своим публичным интерфейсом. Давайте разберёмся с интерфейсом класса из трёх полей.</p>
<div class="sourceCode" id="cb54"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb54-1"><a href="#cb54-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> AddressBookRecord {</span>
<span id="cb54-2"><a href="#cb54-2" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb54-3"><a href="#cb54-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">constructor</span>(</span>
<span id="cb54-4"><a href="#cb54-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">readonly</span> name<span class="op">:</span> <span class="dt">string</span><span class="op">,</span></span>
<span id="cb54-5"><a href="#cb54-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">readonly</span> address<span class="op">:</span> <span class="dt">string</span></span>
<span id="cb54-6"><a href="#cb54-6" aria-hidden="true" tabindex="-1"></a>    ) { }</span>
<span id="cb54-7"><a href="#cb54-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb54-8"><a href="#cb54-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">get</span> <span class="fu">display</span>() {</span>
<span id="cb54-9"><a href="#cb54-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="vs">`</span><span class="sc">${</span><span class="kw">this</span><span class="op">.</span><span class="at">name</span><span class="sc">}</span><span class="vs"> &lt;</span><span class="sc">${</span><span class="kw">this</span><span class="op">.</span><span class="at">address</span><span class="sc">}</span><span class="vs">&gt;`</span><span class="op">;</span></span>
<span id="cb54-10"><a href="#cb54-10" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb54-11"><a href="#cb54-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb54-12"><a href="#cb54-12" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Декларация <code>AddressBookRecord</code> в том числе определяет тип значений записей в адресной книге. Каждая запись имеет два строковых поля <code>name</code> и <code>address</code> и один метод — <code>display</code>.</p>
<p>TypeScript признаёт наличие в этом классе трёх полей, и редактор их показывает в контекстной подсказке:</p>
<p><img src="../media/file8.png" /></p>
<p>Во время модульного тестирования (или по другим причинам) перед разработчиком возникает задача: заменить реальные данные на временные. Временные (mock-овые) данные позволяют исследовать поведение части программы изолированным и предсказуемым образом. И здесь приходит на помощь TypeScript.</p>
<p>Поскольку TypeScript имеет структурную типизацию, мы можем определить тестовое значение, совпадающее по форме с интерфейсом нашего класса, не создавая реальный экземпляр этого класса.</p>
<p>В следующем отрывке мы используем название класса в качестве типа, мы не используем оператор <code>new</code>.</p>
<div class="sourceCode" id="cb55"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb55-1"><a href="#cb55-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> mockValue<span class="op">:</span> AddressBookRecord <span class="op">=</span> {</span>
<span id="cb55-2"><a href="#cb55-2" aria-hidden="true" tabindex="-1"></a>    address<span class="op">:</span> <span class="st">&#39;test value&#39;</span><span class="op">,</span></span>
<span id="cb55-3"><a href="#cb55-3" aria-hidden="true" tabindex="-1"></a>    display<span class="op">:</span> <span class="st">&#39;test value&#39;</span><span class="op">,</span></span>
<span id="cb55-4"><a href="#cb55-4" aria-hidden="true" tabindex="-1"></a>    name<span class="op">:</span> <span class="st">&#39;test value&#39;</span><span class="op">,</span></span>
<span id="cb55-5"><a href="#cb55-5" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>Если нужно изучить поведение функции <code>notify</code> из следующего отрывка, мы можем поставлять ей специально подготовленное значение <code>mockValue</code> типа <code>AddressBookRecord</code>:</p>
<div class="sourceCode" id="cb56"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb56-1"><a href="#cb56-1" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">const</span> notify<span class="op">:</span> (recipient<span class="op">:</span> AddressBookRecord) <span class="kw">=&gt;</span> <span class="dt">void</span><span class="op">;</span></span>
<span id="cb56-2"><a href="#cb56-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb56-3"><a href="#cb56-3" aria-hidden="true" tabindex="-1"></a><span class="fu">notify</span>(instanceValue)<span class="op">;</span></span>
<span id="cb56-4"><a href="#cb56-4" aria-hidden="true" tabindex="-1"></a><span class="fu">notify</span>(mockValue)</span></code></pre></div>
<p>Это позволит зафиксировать поведение функции <code>notify</code>, к примеру, до окончания разработки класса <code>AddressBookRecord</code>.</p>
<p>Однако есть различия между значениями <code>instanceValue</code> и <code>mockValue</code> с точки зрения JavaScript. <code>mockValue</code> не обладает всеми способностями экземпляра класса, и результаты оператора <code>instancof</code> будут различными.</p>
<div class="sourceCode" id="cb57"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb57-1"><a href="#cb57-1" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>({</span>
<span id="cb57-2"><a href="#cb57-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;instanceValue instanceof AddressBookRecord&#39;</span><span class="op">:</span> instanceValue <span class="kw">instanceof</span> AddressBookRecord<span class="op">,</span></span>
<span id="cb57-3"><a href="#cb57-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;mockValue instanceof AddressBookRecord&#39;</span><span class="op">:</span> mockValue <span class="kw">instanceof</span> AddressBookRecord<span class="op">,</span></span>
<span id="cb57-4"><a href="#cb57-4" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<p>Вы получите результат:</p>
<pre><code>[LOG]: {
  &quot;instanceValue instanceof AddressBookRecord&quot;: true,
  &quot;mockValue instanceof AddressBookRecord&quot;: false
} </code></pre>
</section>
</div>
</section>
<section id="поведение-определений-классов-в-typescript" class="level2" data-number="3.12">
<h2 data-number="3.12">3.10. Поведение определений классов в TypeScript</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Может ли класс TypeScript реализовывать несколько разных родительских интерфейсов?</strong></li>
</ol>
<ul>
<li>Да</li>
<li>Нет</li>
</ul>
<ol start="2" type="1">
<li><strong>Чем отличается определение пустого класса от определения пустого интерфейса?</strong></li>
</ol>
<div class="sourceCode" id="cb59"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb59-1"><a href="#cb59-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Empty {}</span>
<span id="cb59-2"><a href="#cb59-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> AnotherEmpty {}</span>
<span id="cb59-3"><a href="#cb59-3" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> EmptyInterface {}</span>
<span id="cb59-4"><a href="#cb59-4" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> AnotherEmptyInterface {}</span></code></pre></div>
<ul>
<li>TypeScript не допускает пустые классы. Определения, такие как Empty и AnotherEmpty, эквивалентны друг другу.</li>
<li>В TypeScript определения пустого класса и пустого интерфейса допускаются, но их рекомендуется избегать из-за принципа структурной типизации.</li>
<li>Empty и AnotherEmpty являются значениями.</li>
<li>EmptyInterface эквивалентен AnotherEmptyInterface.</li>
</ul>
<ol start="3" type="1">
<li><strong>Может ли интерфейс наследовать один или несколько классов?</strong></li>
</ol>
<p>В контексте приведённого определения класса и интерфейса укажите, какие ошибки обнаружит компилятор.</p>
<div class="sourceCode" id="cb60"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb60-1"><a href="#cb60-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Container {</span>
<span id="cb60-2"><a href="#cb60-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">constructor</span>(<span class="kw">private</span> <span class="kw">readonly</span> cache<span class="op">:</span> <span class="dt">number</span> <span class="op">=</span> <span class="dv">0</span>){}</span>
<span id="cb60-3"><a href="#cb60-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb60-4"><a href="#cb60-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb60-5"><a href="#cb60-5" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Entity <span class="kw">extends</span> Container {</span>
<span id="cb60-6"><a href="#cb60-6" aria-hidden="true" tabindex="-1"></a>    id<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb60-7"><a href="#cb60-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb60-8"><a href="#cb60-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb60-9"><a href="#cb60-9" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> x<span class="op">:</span>Entity <span class="op">=</span> {</span>
<span id="cb60-10"><a href="#cb60-10" aria-hidden="true" tabindex="-1"></a>    id<span class="op">:</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb60-11"><a href="#cb60-11" aria-hidden="true" tabindex="-1"></a>    cache<span class="op">:</span> <span class="dv">7</span><span class="op">,</span></span>
<span id="cb60-12"><a href="#cb60-12" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<ul>
<li>TypeScript не позволяет создавать значение x, поскольку в интерфейсе Entity отсутствует поле cache.</li>
<li>TypeScript не позволяет наследовать от классов, имеющих приватные поля.</li>
<li>TypeScript не позволяет создать литеральное значение по интерфейсу, имеющему поля с модификаторами доступа. Property ‘cache’ is private in type ‘Entity’ but not in type ‘{ id: number; cache: number; }’.(2322).</li>
</ul>
</div>
</section>
<section id="поведение-определений-классов-в-typescript-ответы" class="level2" data-number="3.13">
<h2 data-number="3.13">3.10. Поведение определений классов в TypeScript (Ответы)</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Может ли класс TypeScript реализовывать несколько разных родительских интерфейсов?</strong></li>
</ol>
<ul>
<li>Да</li>
</ul>
<ol start="2" type="1">
<li><strong>Чем отличается определение пустого класса от определения пустого интерфейса?</strong></li>
</ol>
<div class="sourceCode" id="cb61"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb61-1"><a href="#cb61-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Empty {}</span>
<span id="cb61-2"><a href="#cb61-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> AnotherEmpty {}</span>
<span id="cb61-3"><a href="#cb61-3" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> EmptyInterface {}</span>
<span id="cb61-4"><a href="#cb61-4" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> AnotherEmptyInterface {}</span></code></pre></div>
<ul>
<li>Empty и AnotherEmpty являются значениями.</li>
<li>EmptyInterface эквивалентен AnotherEmptyInterface.</li>
</ul>
<ol start="3" type="1">
<li><strong>Может ли интерфейс наследовать один или несколько классов?</strong></li>
</ol>
<p>В контексте приведённого определения класса и интерфейса укажите, какие ошибки обнаружит компилятор.</p>
<div class="sourceCode" id="cb62"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb62-1"><a href="#cb62-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Container {</span>
<span id="cb62-2"><a href="#cb62-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">constructor</span>(<span class="kw">private</span> <span class="kw">readonly</span> cache<span class="op">:</span> <span class="dt">number</span> <span class="op">=</span> <span class="dv">0</span>){}</span>
<span id="cb62-3"><a href="#cb62-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb62-4"><a href="#cb62-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb62-5"><a href="#cb62-5" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Entity <span class="kw">extends</span> Container {</span>
<span id="cb62-6"><a href="#cb62-6" aria-hidden="true" tabindex="-1"></a>    id<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb62-7"><a href="#cb62-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb62-8"><a href="#cb62-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb62-9"><a href="#cb62-9" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> x<span class="op">:</span>Entity <span class="op">=</span> {</span>
<span id="cb62-10"><a href="#cb62-10" aria-hidden="true" tabindex="-1"></a>    id<span class="op">:</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb62-11"><a href="#cb62-11" aria-hidden="true" tabindex="-1"></a>    cache<span class="op">:</span> <span class="dv">7</span><span class="op">,</span></span>
<span id="cb62-12"><a href="#cb62-12" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<ul>
<li>TypeScript не позволяет создать литеральное значение по интерфейсу, имеющему поля с модификаторами доступа. Property ‘cache’ is private in type ‘Entity’ but not in type ‘{ id: number; cache: number; }’.(2322).</li>
</ul>
</div>
</section>
<section id="объединение-типов" class="level2" data-number="3.14">
<h2 data-number="3.14">3.11. Объединение типов</h2>
<div class="text-container text-container--module">
<p>Во Вселенной типов TypeScript в отношении нескольких типов можно применить операцию объединения.</p>
<p><strong>Важно:</strong> мы говорим, что значение принадлежит объединению типов <strong>Ta</strong> | <strong>Tb</strong>, когда оно либо принадлежит типу <strong>Ta</strong>, либо принадлежит к типу <strong>Tb</strong>. Также обратим внимание, что тип <strong>Ta</strong> является более специализированным, чем его объединение с типом <strong>Tb</strong> (в терминах TypeScript <strong>Ta</strong><code>extends</code><strong>Ta</strong>|<strong>Tb</strong>).</p>
<p>В реальной жизни объединение типов встречается регулярно. Когда сервис может вернуть данные, сообщить об ошибке или потребовать авторизацию, мы говорим, что возможное значение принадлежит объединению типов.</p>
<p>Похожая ситуация наблюдается с обработкой сообщений redux. Комбинированный редуктор может обрабатывать действия разных типов, и типом его аргумента будет значение, принадлежащее объединению всех возможных типов действий.</p>
<section id="моделирование-объединённого-типа" class="level3" data-number="3.14.1">
<h3 data-number="3.14.1">Моделирование объединённого типа</h3>
<p>При успешном запросе удалённый сервис возвращает приложению список сообщений. Мы можем обозначить эту договорённость в виде типа:</p>
<div class="sourceCode" id="cb63"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb63-1"><a href="#cb63-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Messages{</span>
<span id="cb63-2"><a href="#cb63-2" aria-hidden="true" tabindex="-1"></a>    status<span class="op">:</span> <span class="st">&#39;success&#39;</span><span class="op">;</span></span>
<span id="cb63-3"><a href="#cb63-3" aria-hidden="true" tabindex="-1"></a>    items<span class="op">:</span> <span class="dt">string</span>[]<span class="op">;</span></span>
<span id="cb63-4"><a href="#cb63-4" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Удалённый сервис может обнаружить недопустимый запрос и сообщить об ошибке клиента:</p>
<div class="sourceCode" id="cb64"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb64-1"><a href="#cb64-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> ClientError{</span>
<span id="cb64-2"><a href="#cb64-2" aria-hidden="true" tabindex="-1"></a>    status<span class="op">:</span> <span class="st">&#39;client-error&#39;</span><span class="op">;</span></span>
<span id="cb64-3"><a href="#cb64-3" aria-hidden="true" tabindex="-1"></a>    message<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb64-4"><a href="#cb64-4" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Ошибка может произойти внутри самого сервера:</p>
<div class="sourceCode" id="cb65"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb65-1"><a href="#cb65-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> ServerError{</span>
<span id="cb65-2"><a href="#cb65-2" aria-hidden="true" tabindex="-1"></a>    status<span class="op">:</span> <span class="st">&#39;server-error&#39;</span><span class="op">;</span></span>
<span id="cb65-3"><a href="#cb65-3" aria-hidden="true" tabindex="-1"></a>    timeToOnline<span class="op">:</span> <span class="dt">string</span><span class="op">;</span>    </span>
<span id="cb65-4"><a href="#cb65-4" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Мы вправе ожидать от сервера значения такого объединённого типа:</p>
<div class="sourceCode" id="cb66"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb66-1"><a href="#cb66-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> ApiResponse <span class="op">=</span> Messages <span class="op">|</span> ClientError <span class="op">|</span> ServerError<span class="op">;</span></span></code></pre></div>
<p>После того, как данные от удалённого сервиса будут получены, в приложении нам следует принять решение об информировании пользователя. Методика определения специализированного типа из объединения, основанная на значении поля дискриминатора, называется дискриминацией объединения.</p>
<div class="sourceCode" id="cb67"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb67-1"><a href="#cb67-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> handleResponse <span class="op">=</span> (response<span class="op">:</span>ApiResponse)<span class="kw">=&gt;</span>{</span>
<span id="cb67-2"><a href="#cb67-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// В следующей строке TypeScript </span></span>
<span id="cb67-3"><a href="#cb67-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">// знает только одно поле — status.</span></span>
<span id="cb67-4"><a href="#cb67-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">switch</span>(response<span class="op">.</span><span class="at">status</span>){</span>
<span id="cb67-5"><a href="#cb67-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="st">&#39;client-error&#39;</span><span class="op">:</span>{</span>
<span id="cb67-6"><a href="#cb67-6" aria-hidden="true" tabindex="-1"></a>            <span class="co">// В следующей строке TypeScript</span></span>
<span id="cb67-7"><a href="#cb67-7" aria-hidden="true" tabindex="-1"></a>            <span class="co">// уже догадался, что в значении,</span></span>
<span id="cb67-8"><a href="#cb67-8" aria-hidden="true" tabindex="-1"></a>            <span class="co">// где status === &#39;client-error&#39;,</span></span>
<span id="cb67-9"><a href="#cb67-9" aria-hidden="true" tabindex="-1"></a>            <span class="co">// мы договорились иметь поле message.</span></span>
<span id="cb67-10"><a href="#cb67-10" aria-hidden="true" tabindex="-1"></a>            <span class="kw">const</span> {message} <span class="op">=</span> response<span class="op">;</span></span>
<span id="cb67-11"><a href="#cb67-11" aria-hidden="true" tabindex="-1"></a>            <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(message)<span class="op">;</span></span>
<span id="cb67-12"><a href="#cb67-12" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span><span class="op">;</span></span>
<span id="cb67-13"><a href="#cb67-13" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb67-14"><a href="#cb67-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="st">&#39;server-error&#39;</span><span class="op">:</span>{</span>
<span id="cb67-15"><a href="#cb67-15" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Когда status === &#39;server-error&#39;,</span></span>
<span id="cb67-16"><a href="#cb67-16" aria-hidden="true" tabindex="-1"></a>            <span class="co">// мы договорились получать ожидаемое время</span></span>
<span id="cb67-17"><a href="#cb67-17" aria-hidden="true" tabindex="-1"></a>            <span class="co">// до перезапуска.</span></span>
<span id="cb67-18"><a href="#cb67-18" aria-hidden="true" tabindex="-1"></a>            <span class="kw">const</span> {timeToOnline} <span class="op">=</span> response<span class="op">;</span></span>
<span id="cb67-19"><a href="#cb67-19" aria-hidden="true" tabindex="-1"></a>            <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="vs">`ожидают, что сервер снова оживет через </span><span class="sc">${</span>timeToOnline<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></span>
<span id="cb67-20"><a href="#cb67-20" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span><span class="op">;</span></span>
<span id="cb67-21"><a href="#cb67-21" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb67-22"><a href="#cb67-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="st">&#39;success&#39;</span><span class="op">:</span>{</span>
<span id="cb67-23"><a href="#cb67-23" aria-hidden="true" tabindex="-1"></a>            <span class="co">// В случае успеха</span></span>
<span id="cb67-24"><a href="#cb67-24" aria-hidden="true" tabindex="-1"></a>            <span class="co">// мы договорились иметь набор сообщений.           </span></span>
<span id="cb67-25"><a href="#cb67-25" aria-hidden="true" tabindex="-1"></a>            <span class="kw">const</span> {items} <span class="op">=</span> response<span class="op">;</span></span>
<span id="cb67-26"><a href="#cb67-26" aria-hidden="true" tabindex="-1"></a>            items<span class="op">.</span><span class="fu">forEach</span>((e)<span class="kw">=&gt;</span><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="vs">`получено сообщение: </span><span class="sc">${</span>e<span class="sc">}</span><span class="vs">`</span>))<span class="op">;</span></span>
<span id="cb67-27"><a href="#cb67-27" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb67-28"><a href="#cb67-28" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb67-29"><a href="#cb67-29" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Посмотрите <a href="https://www.typescriptlang.org/play?ssl=18&amp;ssc=1&amp;pln=46&amp;pc=2#code/JYOwLgpgTgZghgYwgAgLIQM4bgc0wbwChkTkMw4wBXDALmQHIMqEksGBuY04SAWzpkwUUDgDaAXS4BfQoVCRYiFAGEANsAjgAolCgB7KEVJDKNegwQatYALTQDUTtxJ9M2PPXIiQOGXIVoeCRkAGVoADdoXUdjUnIzQSZI6Hs9Q2cTMGA3ABV9AHkQDRAIL2FRDhNCWUIwAE8ABxQAQUbgACVMRv0QDBQAXjR3XExkAB9kdU0ddKgJsJSoGMMuQgRe8mQACzgQABM1CC6MHr7B5AAKKG7NsrbO2-OASgGAPjiSAHov5EAmEGQgEEQQDcIIBWEEALCCAYRBAHIggEkQUGAThAgYAhEEAAiCAPhBAFwggAYQZC5JoQUIIESNMDIFzIH7IQDsIIBeEGxoORyGR6OBgBkQTHo5Do8G0rmAfhBWaDkLZTNQMBSMAB3XgIbbXJ79AB0CXFz0+JmQCDg-UYVhmdgcGVoGs1pCpAJBEJh8KRgLRWOF+OaRJJYApZu+v0hgDYQYXg9GAZhBseDscDAYB5EAANMhAOIgLP+NPpsdBtMAHCBpj2eqmB8HC1U0ZADYt66zgNKOBhZs1UwA8IIBpEGQAcD6L+6NRaeBacBbOQadrjN7grByDcWFG1c1Gz6ZPwY48EGkReQN1Ody4nqnm30RyVan0OEu89Gzw3m9IACMbnAANZns2yTfa3XJKBRKAV42m7O-Tm53EFhgRYlq+76fk4k4mHWjbNq27adt2Q6spCsbYsivboj6aahqCtbosKfyorhEaQeavwBsg-KgkR1LYvykKAjipEkNOWz4NkeSFMUoCLsuq5nP097nqxO4QHuB6XAABph2HYtCyIxvGXKAtRfzUUCfJ-LiMlqUyKY0cgAAk7E5BA+RFCUi6SaezHIFeEC3kJJiPp6z4oEwLBsBgDAmrZFpAsCKEMsgDFUYAoiDYn5vwNk2QZwR2XY9n2A7ocg9KAIwg7ZAui6LpfC6ZIueJC2axs68BAAhLkM-HrrZ5UCEqMCGNoiDypcECvG8Im7vuh6ScOKGpspOV5amaagvQxlWc8Nmbi5JCyNIQA">в песочнице</a>, как редактор под руководством TypeScript подсказывает, какие значения могут быть в <code>case</code>, какие поля можно использовать в каждой из веток <code>switch</code>.</p>
</section>
</div>
</section>
<section id="специализация-функциональных-типов-ко--и-контра--вариативность" class="level2" data-number="3.15">
<h2 data-number="3.15">3.12. Специализация функциональных типов; ко- и контра- вариативность</h2>
<div class="text-container text-container--module">
<section id="шаг-1-8" class="level3" data-number="3.15.1">
<h3 data-number="3.15.1">Шаг №1</h3>
<p>Давайте понаблюдаем за функциями.</p>
<div class="sourceCode" id="cb68"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb68-1"><a href="#cb68-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> KnownLanguageName <span class="op">=</span> <span class="st">&#39;Sanskrit&#39;</span><span class="op">|</span><span class="st">&#39;Latin&#39;</span><span class="op">;</span></span>
<span id="cb68-2"><a href="#cb68-2" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">const</span> getWord<span class="op">:</span> (language<span class="op">:</span> KnownLanguageName)<span class="kw">=&gt;</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb68-3"><a href="#cb68-3" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">const</span> detectLanguage<span class="op">:</span> (word<span class="op">:</span> <span class="dt">string</span>)<span class="kw">=&gt;</span>KnownLanguageName<span class="op">;</span></span></code></pre></div>
<p>Функция <code>getWord</code> может вернуть в качестве значения слово, в том числе и слово Sanskrit и Latin. Но интереснее другое. Там, где мы можем использовать функцию <code>getWord</code>, скажем, в качестве колбэка, мы также можем использовать и функцию <code>detectLanguage</code>. Но не наоборот. Также заметьте, что параметру <code>word</code> можно присвоить любое значение, если его можно присвоить параметру <code>language</code>.</p>
<p>В TypeScript функции обладают этим интересным несимметричным свойством. Они «взаимозаменяемы» <strong>наоборот</strong> относительно взаимозаменяемости их параметров. Такое поведение системы типов называют <em>контра-вариацией</em>.</p>
<p>В отношении результата функции действует правило <em>ко-вариации</em>: если вместо одного типа функции можно использовать другой тип, то и результат ведёт себя так же. То есть вместо результата первого типа функции можно использовать результат второго типа функции.</p>
<p><img src="../media/file9.png" /></p>
<p>Как быть, если нам нужно получить из функции специализированный тип данных? Нужно использовать перегрузку функций. Однако есть нюанс: в JavaScript нет перегруженных функций.</p>
<p>В этой демонстрации мы рассмотрим «наилучшее» приближение к использованию перегруженных функций.</p>
<section id="задача" class="level4" data-number="3.15.1.1">
<h4 data-number="3.15.1.1">Задача</h4>
<p>Мы определяем функцию-посредника, middleware, которая будет добавлять имя CSS-класса к списку классов HTMLElement.</p>
</section>
<section id="проблема-в-интерфейсе-функции" class="level4" data-number="3.15.1.2">
<h4 data-number="3.15.1.2">Проблема в интерфейсе функции</h4>
<p>При использовании различных HTML-элементов мы можем использовать базовый тип — HTMLElement — и применить значению этого типа CSS-класс темы. Но тогда результат работы функции теряет специфичность. Мы не можем, например, использовать его в сцепке с другими методами.</p>
<div class="sourceCode" id="cb69"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb69-1"><a href="#cb69-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> ThemeMiddleware{</span>
<span id="cb69-2"><a href="#cb69-2" aria-hidden="true" tabindex="-1"></a>  (element<span class="op">:</span> <span class="bu">HTMLElement</span>)<span class="op">:</span> <span class="bu">HTMLElement</span></span>
<span id="cb69-3"><a href="#cb69-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
</section>
<section id="демонстрация-проблемы" class="level4" data-number="3.15.1.3">
<h4 data-number="3.15.1.3">Демонстрация проблемы</h4>
<p>В файле модульного теста видно, что TypeScript теряет информацию о специфичности элемента.</p>
<p>Особенность ситуации в том, что она существует только в TypeScript. Jest, исполняя результат JavaScript, проблемы не видит.</p>
<p>Попробуем сделать так, чтобы и TypeScript помогал нам на этапе разработки.</p>
</section>
</section>
<section id="шаг-2-8" class="level3" data-number="3.15.2">
<h3 data-number="3.15.2">Шаг №2</h3>
<p>В TypeScript перегрузка функций декларируется в том числе с помощью сигнатуры вызова:</p>
<div class="sourceCode" id="cb70"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb70-1"><a href="#cb70-1" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">interface</span> ThemeMiddleware {</span>
<span id="cb70-2"><a href="#cb70-2" aria-hidden="true" tabindex="-1"></a>  (element<span class="op">:</span> <span class="bu">HTMLButtonElement</span>)<span class="op">:</span> <span class="bu">HTMLButtonElement</span><span class="op">;</span></span>
<span id="cb70-3"><a href="#cb70-3" aria-hidden="true" tabindex="-1"></a>  (element<span class="op">:</span> <span class="bu">HTMLImageElement</span>)<span class="op">:</span> <span class="bu">HTMLImageElement</span><span class="op">;</span></span>
<span id="cb70-4"><a href="#cb70-4" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<section id="проблема-переехала" class="level4" data-number="3.15.2.1">
<h4 data-number="3.15.2.1">Проблема переехала</h4>
<p>Клиентский код — тот, что в модульном тесте — теперь «счастлив».</p>
<p><img src="../media/file10.png" /></p>
<p>Однако мы получили проблему реализации.</p>
<div class="sourceCode" id="cb71"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb71-1"><a href="#cb71-1" aria-hidden="true" tabindex="-1"></a>Type <span class="st">&#39;(element: HTMLButtonElement | HTMLImageElement) =&gt; HTMLButtonElement | HTMLImageElement&#39;</span> is not assignable to <span class="kw">type</span> <span class="st">&#39;ThemeMiddleware&#39;</span><span class="op">.</span></span>
<span id="cb71-2"><a href="#cb71-2" aria-hidden="true" tabindex="-1"></a>  Type <span class="st">&#39;HTMLButtonElement | HTMLImageElement&#39;</span> <span class="kw">is</span> not assignable to <span class="kw">type</span> <span class="st">&#39;HTMLButtonElement&#39;</span><span class="op">.</span></span>
<span id="cb71-3"><a href="#cb71-3" aria-hidden="true" tabindex="-1"></a>    Type <span class="st">&#39;HTMLImageElement&#39;</span> <span class="kw">is</span> missing the following properties <span class="im">from</span> <span class="kw">type</span> <span class="st">&#39;HTMLButtonElement&#39;</span><span class="op">:</span> disabled<span class="op">,</span> form<span class="op">,</span> formAction<span class="op">,</span> formEnctype<span class="op">,</span> and <span class="dv">12</span> more<span class="op">.</span><span class="fu">ts</span>(<span class="dv">2322</span>)</span></code></pre></div>
<p>Как с ней поступить? Придётся применить силу.</p>
</section>
</section>
<section id="шаг-3-8" class="level3" data-number="3.15.3">
<h3 data-number="3.15.3">Шаг №3</h3>
<p>TypeScript скрывает фактическую реализацию функции, если это реализация ряда перегруженных сигнатур. Поэтому у него нет другого выхода, ведь результатом компиляции будет JavaScript.</p>
<p>Мы воспользуемся этим для создания нетипизированной реализации.</p>
<p>В файле theme-middleware.ts мы реализуем функцию и будем возвращать результат, заставляя TypeScript «отойти в сторону» и не волноваться по поводу типа значения.</p>
<p>Мы не рекомендуем использовать тип <em>any</em>, вместо него будет применять тип <strong>never</strong>.</p>
<div class="sourceCode" id="cb72"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb72-1"><a href="#cb72-1" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> withTheme<span class="op">:</span> ThemeMiddleware <span class="op">=</span> (element) <span class="kw">=&gt;</span> {</span>
<span id="cb72-2"><a href="#cb72-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="kw">typeof</span> themeName <span class="op">===</span> <span class="st">&quot;string&quot;</span>) {</span>
<span id="cb72-3"><a href="#cb72-3" aria-hidden="true" tabindex="-1"></a>    element<span class="op">.</span><span class="at">classList</span><span class="op">.</span><span class="fu">add</span>(themeName)<span class="op">;</span></span>
<span id="cb72-4"><a href="#cb72-4" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb72-5"><a href="#cb72-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> element <span class="im">as</span> <span class="dt">never</span><span class="op">;</span></span>
<span id="cb72-6"><a href="#cb72-6" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<section id="исследуйте" class="level4" data-number="3.15.3.1">
<h4 data-number="3.15.3.1">Исследуйте</h4>
<p>Самостоятельно проверьте, что реализация совершенно не видна в клиентском коде TypeScript. В файле модульного теста редактор и TypeScript подсказывают, что существуют только две версии: для кнопки и картинки.</p>
<p>Теперь вы можете самостоятельно добавлять нужные реализации по мере необходимости.</p>
</section>
</section>
</div>
</section>
<section id="пересечение-типов-брендирование" class="level2" data-number="3.16">
<h2 data-number="3.16">3.13. Пересечение типов, брендирование</h2>
<div class="text-container text-container--module">
<p>В TypeScript определена операция пересечения типов.</p>
<p>Пересечением типов <strong>Ta</strong> и <strong>Tb</strong> называется тип, значения которого одновременно являются значениями <strong>Ta</strong> и <strong>Tb</strong> и обозначаются <code>Ta &amp; Tb</code>.</p>
<p>TypeScript остаётся верен идее эквивалентности типов с одинаковой структурой. В реальной жизни это означает, что число остаётся числом, какой бы синоним ему ни придумали.</p>
<p>С помощью пересечения типов можно требовать, чтобы аргумент функции был одновременно и значением типа <code>Person</code>, и значения типа <code>Serializable</code>. Когда нам требуется изготовить бирку для карточки товара с указанием скидки, нам нужны всё те же сведения, что и для обычной карточки, но при этом ещё и указание величины скидки.</p>
<div class="sourceCode" id="cb73"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb73-1"><a href="#cb73-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Для обычной карточки товара нам требуется</span></span>
<span id="cb73-2"><a href="#cb73-2" aria-hidden="true" tabindex="-1"></a><span class="co">// набор дочерних элементов.</span></span>
<span id="cb73-3"><a href="#cb73-3" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Container {</span>
<span id="cb73-4"><a href="#cb73-4" aria-hidden="true" tabindex="-1"></a>    children<span class="op">:</span> <span class="bu">HTMLElement</span>[]</span>
<span id="cb73-5"><a href="#cb73-5" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<div class="sourceCode" id="cb74"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb74-1"><a href="#cb74-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Моделируем значения о скидке </span></span>
<span id="cb74-2"><a href="#cb74-2" aria-hidden="true" tabindex="-1"></a><span class="co">// с помощью интерфейса DiscountTag.</span></span>
<span id="cb74-3"><a href="#cb74-3" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> DiscountTag {</span>
<span id="cb74-4"><a href="#cb74-4" aria-hidden="true" tabindex="-1"></a>    percent<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb74-5"><a href="#cb74-5" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<div class="sourceCode" id="cb75"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb75-1"><a href="#cb75-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Функция для создания нужного UI</span></span>
<span id="cb75-2"><a href="#cb75-2" aria-hidden="true" tabindex="-1"></a><span class="co">// должна получить значение, </span></span>
<span id="cb75-3"><a href="#cb75-3" aria-hidden="true" tabindex="-1"></a><span class="co">// обладающее одновременно признаками</span></span>
<span id="cb75-4"><a href="#cb75-4" aria-hidden="true" tabindex="-1"></a><span class="co">// и Container, и DiscountTag.</span></span>
<span id="cb75-5"><a href="#cb75-5" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> renderDiscountedCard <span class="op">=</span> (props<span class="op">:</span> DiscountTag <span class="op">&amp;</span> Container) <span class="kw">=&gt;</span> {</span>
<span id="cb75-6"><a href="#cb75-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb75-7"><a href="#cb75-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> {</span>
<span id="cb75-8"><a href="#cb75-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Эти сведения</span></span>
<span id="cb75-9"><a href="#cb75-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// нам доступны.</span></span>
<span id="cb75-10"><a href="#cb75-10" aria-hidden="true" tabindex="-1"></a>        children<span class="op">,</span></span>
<span id="cb75-11"><a href="#cb75-11" aria-hidden="true" tabindex="-1"></a>        <span class="co">// TypeScript и редактор</span></span>
<span id="cb75-12"><a href="#cb75-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">// позволяют нам</span></span>
<span id="cb75-13"><a href="#cb75-13" aria-hidden="true" tabindex="-1"></a>        <span class="co">// убедиться в этом.</span></span>
<span id="cb75-14"><a href="#cb75-14" aria-hidden="true" tabindex="-1"></a>        percent<span class="op">,</span></span>
<span id="cb75-15"><a href="#cb75-15" aria-hidden="true" tabindex="-1"></a>    } <span class="op">=</span> props<span class="op">;</span></span>
<span id="cb75-16"><a href="#cb75-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb75-17"><a href="#cb75-17" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> div <span class="op">=</span> <span class="fu">createDiv</span>()<span class="op">;</span></span>
<span id="cb75-18"><a href="#cb75-18" aria-hidden="true" tabindex="-1"></a>    div<span class="op">.</span><span class="fu">append</span>(<span class="fu">createSpan</span>(<span class="fu">formatPercent</span>(percent)))<span class="op">;</span></span>
<span id="cb75-19"><a href="#cb75-19" aria-hidden="true" tabindex="-1"></a>    children<span class="op">.</span><span class="fu">forEach</span>((item) <span class="kw">=&gt;</span> div<span class="op">.</span><span class="fu">append</span>(item))<span class="op">;</span></span>
<span id="cb75-20"><a href="#cb75-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> div<span class="op">;</span></span>
<span id="cb75-21"><a href="#cb75-21" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Посмотрите в <a href="https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgCLAM4IPYFdwAqcA5sgN4BQy1yADtEuAFzIi4C2ARtANwUC+FUJFiIUAYWzg4oaOSo0EAC2AAbACZQIIFgAkCAWQAyAUVUR22sAG0AugIrqICVXC3IcIDGA9a4kdAA3FgAKAEpkAF4APmR9YyCzCys+Jxc3FE9vXwh-CABlWjgdZBDIAA8wFm8oUGIImLjDI0LipMtwVOdXdyyfGGwodn8ABQYrUMC4VVwIFjYuaAbYmrq+Cj7kLRAnKHQsPHAIdXE3dSjS2ihsWgwWfZx8MCJSADJkSWlZKGX5BWpNpQaMCPCoNNsADT-EH0KCMMBQ4H8C5XG4YdbAzbqYCBC4IPwBHHhPjA7GBAB0cFo9B2IXxuUgrRAIQGQ1G43AIVh8LCvJJijBmm05NZJkQShCIWAkHYvzJlOp2nUUplfOhWjAuCgIGQZL4-CAA">песочнице</a>, что получаете полную поддержку со стороны TypeScript.</p>
<section id="брендирование-значений" class="level3" data-number="3.16.1">
<h3 data-number="3.16.1">Брендирование значений</h3>
<p>Во время работы сотрудники разных организаций придумывают различные системы нумерации договоров, приказов и прочих документов. Эти системы бывают настолько разработаны, что люди, ведущие документооборот, по одному только идентификатору могут сказать кто, когда и по какому поводу создал документ <code>20-Д-211/01</code>. Использование объединения типов позволяет нам смоделировать похожую систему нумерации.</p>
<p>В TypeScript такой подход называют брендированием.</p>
<div class="sourceCode" id="cb76"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb76-1"><a href="#cb76-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> StaffId <span class="op">=</span> <span class="dt">number</span> <span class="op">&amp;</span> { <span class="st">&#39;StaffId&#39;</span><span class="op">:</span> <span class="dt">void</span> }</span>
<span id="cb76-2"><a href="#cb76-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> OfficeId <span class="op">=</span> <span class="dt">number</span> <span class="op">&amp;</span> {<span class="st">&#39;OfficeId&#39;</span><span class="op">:</span> <span class="dt">void</span> }</span></code></pre></div>
<p>Функция бронирования переговорной требует теперь не просто два числа, а табельный номер сотрудника и инвентарный номер офиса. Мы как разработчики будем получать от TypeScript предупреждение, если попытаемся перепутать аргументы местами.</p>
<p>Сравните два примера TypeScript.</p>
<p>Сделаем псевдоним этому типу чисел для обозначения табельного номера сотрудника:</p>
<div class="sourceCode" id="cb77"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb77-1"><a href="#cb77-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> StaffNr <span class="op">=</span> <span class="dt">number</span><span class="op">;</span></span></code></pre></div>
<p>И сделаем другой псевдоним типу чисел для обозначения инвентарных номеров переговорных комнат:</p>
<div class="sourceCode" id="cb78"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb78-1"><a href="#cb78-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> OfficeNr <span class="op">=</span> <span class="dt">number</span><span class="op">;</span></span></code></pre></div>
<p>Создадим функцию резервирования переговорки:</p>
<div class="sourceCode" id="cb79"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb79-1"><a href="#cb79-1" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">const</span> reserveMeetingRoom<span class="op">:</span> (id1<span class="op">:</span> OfficeNr<span class="op">,</span> id2<span class="op">:</span> StaffNr) <span class="kw">=&gt;</span> <span class="dt">void</span><span class="op">;</span></span></code></pre></div>
<p>При создании резервирования мы легко можем перепутать, где здесь первый, а где второй аргумент.</p>
<div class="sourceCode" id="cb80"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb80-1"><a href="#cb80-1" aria-hidden="true" tabindex="-1"></a><span class="fu">reserveMeetingRoom</span>(<span class="dv">32</span><span class="op">,</span> <span class="dv">1024</span>)<span class="op">;</span></span></code></pre></div>
<p>Сделаем псевдоним для бренда чисел. Обратите внимание на слово void: мы так обозначаем, что во время исполнения программы никаких накладных расходов для чисел не будет добавлено.</p>
<div class="sourceCode" id="cb81"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb81-1"><a href="#cb81-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> StaffId <span class="op">=</span> <span class="dt">number</span> <span class="op">&amp;</span> { <span class="st">&#39;StaffId&#39;</span><span class="op">:</span> <span class="dt">void</span> }</span>
<span id="cb81-2"><a href="#cb81-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> OfficeId <span class="op">=</span> <span class="dt">number</span> <span class="op">&amp;</span> { <span class="st">&#39;OfficeId&#39;</span><span class="op">:</span> <span class="dt">void</span> }</span></code></pre></div>
<p>Определим функцию резервирования:</p>
<div class="sourceCode" id="cb82"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb82-1"><a href="#cb82-1" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">const</span> reserveMeetingRoomBranded<span class="op">:</span> (id1<span class="op">:</span> OfficeId<span class="op">,</span> id2<span class="op">:</span> StaffId) <span class="kw">=&gt;</span> <span class="dt">void</span><span class="op">;</span></span></code></pre></div>
<p>TypeScript заставит нас задуматься, откуда мы получили число.</p>
<div class="sourceCode" id="cb83"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb83-1"><a href="#cb83-1" aria-hidden="true" tabindex="-1"></a><span class="fu">reserveMeetingRoomBranded</span>(<span class="dv">32</span><span class="op">,</span> <span class="dv">1024</span>)<span class="op">;</span></span>
<span id="cb83-2"><a href="#cb83-2" aria-hidden="true" tabindex="-1"></a><span class="co">//                        ^^</span></span>
<span id="cb83-3"><a href="#cb83-3" aria-hidden="true" tabindex="-1"></a><span class="co">// Argument of type &#39;number&#39; is not assignable to parameter of type &#39;OfficeId&#39;.</span></span>
<span id="cb83-4"><a href="#cb83-4" aria-hidden="true" tabindex="-1"></a><span class="co">//  Type &#39;number&#39; is not assignable to type &#39;{ OfficeId: void; }&#39;.</span></span></code></pre></div>
<p>Добавим конструкторы во время выполнения TypeScript. Обе функции выглядят одинаково (value)=&gt;value и при наличии хвостовой оптимизации вообще исчезают из работающего кода.</p>
<div class="sourceCode" id="cb84"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb84-1"><a href="#cb84-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> makeStaffId <span class="op">=</span> (value<span class="op">:</span> <span class="dt">number</span>) <span class="kw">=&gt;</span> value <span class="im">as</span> StaffId<span class="op">;</span></span>
<span id="cb84-2"><a href="#cb84-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> makeOfficeId <span class="op">=</span> (value<span class="op">:</span> <span class="dt">number</span>) <span class="kw">=&gt;</span> value <span class="im">as</span> OfficeId<span class="op">;</span></span></code></pre></div>
<p>Для законченности примера определим функции для поиска:</p>
<div class="sourceCode" id="cb85"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb85-1"><a href="#cb85-1" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">const</span> findOfficer<span class="op">:</span> (name<span class="op">:</span> <span class="dt">string</span>) <span class="kw">=&gt;</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb85-2"><a href="#cb85-2" aria-hidden="true" tabindex="-1"></a><span class="kw">declare</span> <span class="kw">const</span> findOffice<span class="op">:</span> (color<span class="op">:</span> <span class="dt">string</span>) <span class="kw">=&gt;</span> <span class="dt">number</span><span class="op">;</span></span></code></pre></div>
<p>Получим и сконструируем идентификаторы:</p>
<div class="sourceCode" id="cb86"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb86-1"><a href="#cb86-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> officer <span class="op">=</span> <span class="fu">makeStaffId</span>(<span class="fu">findOfficer</span>(<span class="st">&#39;Штирлиц&#39;</span>))<span class="op">;</span></span>
<span id="cb86-2"><a href="#cb86-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> office <span class="op">=</span> <span class="fu">makeOfficeId</span>(<span class="fu">findOffice</span>(<span class="st">&#39;белый&#39;</span>))<span class="op">;</span></span></code></pre></div>
<p>Теперь мы не сможем перепутать порядок следования чисел.</p>
<div class="sourceCode" id="cb87"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb87-1"><a href="#cb87-1" aria-hidden="true" tabindex="-1"></a><span class="fu">reserveMeetingRoomBranded</span>(office<span class="op">,</span> officer)<span class="op">;</span></span></code></pre></div>
<p>Представленный код компилируется в JavaScript.</p>
<div class="sourceCode" id="cb88"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb88-1"><a href="#cb88-1" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;use strict&quot;</span><span class="op">;</span></span>
<span id="cb88-2"><a href="#cb88-2" aria-hidden="true" tabindex="-1"></a><span class="fu">reserveMeetingRoom</span>(<span class="dv">32</span><span class="op">,</span> <span class="dv">1024</span>)<span class="op">;</span></span>
<span id="cb88-3"><a href="#cb88-3" aria-hidden="true" tabindex="-1"></a><span class="fu">reserveMeetingRoomBranded</span>(<span class="dv">32</span><span class="op">,</span> <span class="dv">1024</span>)<span class="op">;</span></span>
<span id="cb88-4"><a href="#cb88-4" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> makeStaffId <span class="op">=</span> (value) <span class="kw">=&gt;</span> value<span class="op">;</span></span>
<span id="cb88-5"><a href="#cb88-5" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> makeOfficeId <span class="op">=</span> (value) <span class="kw">=&gt;</span> value<span class="op">;</span></span>
<span id="cb88-6"><a href="#cb88-6" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> officer <span class="op">=</span> <span class="fu">makeStaffId</span>(<span class="fu">findOfficer</span>(<span class="st">&#39;Штирлиц&#39;</span>))<span class="op">;</span></span>
<span id="cb88-7"><a href="#cb88-7" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> office <span class="op">=</span> <span class="fu">makeOfficeId</span>(<span class="fu">findOffice</span>(<span class="st">&#39;белый&#39;</span>))<span class="op">;</span></span>
<span id="cb88-8"><a href="#cb88-8" aria-hidden="true" tabindex="-1"></a><span class="fu">reserveMeetingRoomBranded</span>(office<span class="op">,</span> officer)<span class="op">;</span></span></code></pre></div>
<p>Вот код в <a href="https://www.typescriptlang.org/play?removeComments=true&amp;jsx=0#code/FAehAJEEQQWEEVhBG4QQDCC0Dwg5D8IJWgmEEHwg1BeEEA4QNQWRBAhEFxUGEQcco9WwcRAit5xQJp5B5EHF0CMILkDsIAURNYxPuUQCEgGRACuQMwgucEpSxAAiCJOUcluqEigLhBdAFwCeABwCm4AMrmAhgDNXAOQBO4ALzgAOwBXAFsAI1svAG49Iig4JFRwaENVQE4QDCxsaFxiNHpGcBY2PW4+QRExCSlwIgJsSRktAkBpEEBREHUqbVxsPXRtWFU8ZvbwEyoxcmArO3AAeXcASwBjW28-QNCI6OA9SBFoRBJwQBEQagITQDEQIkA5EHAtWGFtbCItHsQa-oeh3C0TImAABNbMsADbOLz2ZYAewCAGdzOBIXDIgA3WwAWVstnMiwCAHMAErQ6EhABc4AAFItAQBGCkLVwrNZeAA04BpACYKU43J4vABKPwAPnAqOhNJifS0cX2wkOxDiDyeWheb2wHyIfBQLT08EG43AKFwgDYQJJfWCMGTkeRjSh0ajkDDPFppPSIO1qbCUN4ZRBaZTUTQEKbItGY7G4gnE0mUgDMnPZtIADJyACwCqVgeIIZBoTA4fDHMrgARaUgEQ5FVgIDjZ9AyiRoQQ6ejkWDgbB5TUdsRQeA9NTiml6HXgCjHCqicR59lMe14TsPFB8WKQdC4eAESRajBvZQ6FBj4hmf4dPRiExIQijHSQNr4HrJXjVtjqDsCIywJ05ASIbD6ko0w2PYvLuAAkoCGzBOEkTgAAZOAADe4AAORga4kGoRSw5QQAvsBsyMsykHQVscGIShqHEasWE4RK+G7NmuANrACTHGcFzXHcyrPK87xSECILgpC4AwvCiJhl46JYjieJEiSIQAEJeM4ATAoCFLUnSDJLLRgLslyPIuBBgJCr4oq4VmEAACogQ4yxeIs1iIsIiCQDILxOmIkDgG50BBogNqQOU5AmEYujZmOG7wNQLDwHExQDuACbAFJMmRvJMbKap6m2IC8aJuAKbppmejgBVlVVdVNUVQAenVegAIJePioS2AEiLQq44AzPYqEwdsqEcnCgTQoizhwnCiz4gEzhhKC9jmNC4DWBCzghDicHdb1IFoTRthYQAdOVdmzAN5FeMNiyjQE43gJN02zfNi29StfVoShB2QfRkrgHhqEnZwAC0oNg+DEOQ6DpSCP+xzjAQHmGCYPotHWEDYEuqB8NgLQxduNRnbYDlOS5-ByKc5xXEQALZrjyi8NAPBOkWl6DlSqLOKCQS2AKFmc9ztixHucRiAlLBxG0eAeYOGQsfQKBEG51xxMDna4IIgCSIB2rASG5NxTNmSv3LIuAyDc2uqGM+C6OJCLgCEzgANbEyZmFQf4lICzzFKDZE5mWVzPMPaNGGQTEduIo7LvfR7HNB7YvuXQHYoJyH8x6YdgLWc+fBuQj1RKB5cQNiQ2genoLEPOxaCcdTcQlhurBmEJYIQlCsL20y6kHV4WlzZtFIIk5BIp37OzAm3omR+A3eAgdWkwqC0J9+Aw-yWPl0xGAfSbnFxyygjSPUPx1BJEQcAhkQJymEFvy6jP3VMqsPj+NHrt8pBlJz73lKoYAFCD0C0AlS4qEBRlUfpnDY79Y7fzxPPTOf85DwFdGAsqfRLTaFtMeDskBjRmnzAMK0QVbQbi0DwHIJh+xsQEruYoCA0q2BRNJCMcloyKRUmpDSlIn7MnZLwl+mYgA">песочнице</a>. Попробуйте поменять местами аргументы.</p>
</section>
</div>
</section>
<section id="типизация-через-брендирование-на-примере-умного-дома" class="level2" data-number="3.17">
<h2 data-number="3.17">3.14. Типизация через брендирование на примере умного дома</h2>
<div class="text-container text-container--module">
<section id="шаг-1-9" class="level3" data-number="3.17.1">
<h3 data-number="3.17.1">Шаг №1</h3>
<p>В JavaScript присутствует класс <code>Date</code> — разработчики часто сталкиваются со сложностями его использования. Часть своего жизненного цикла календарное значение проводит в виде строки ISO. Часть, возможно, в виде местного представления — нужно как-то различать строки, обозначающие даты, с учётом часового пояса, моментов перевода стрелок на летнее время и прочих нюансов.</p>
<p>Чтобы различать типы значений, TypeScript предлагает типы. Особенность в том, что для TypeScript строка — это строка, и неважно, по какому часовому поясу значение представляет время. То же относится и к числам: TypeScript считает числовым значение для измерения температуры по Цельсию. Числом он считает и результат измерения насыщения крови кислородом.</p>
<p>В данной демонстрации мы рассмотрим вариант брендирования типов, который часто применяют, чтобы переложить на TypeScript обязанность по слежке за своевременным переводом значений между разными системами единиц.</p>
<p>Рассмотрим умный дом.</p>
<section id="температура-в-комнате" class="level4" data-number="3.17.1.1">
<h4 data-number="3.17.1.1">Температура в комнате</h4>
<p>Система умного дома получает сигнал о возвращении хозяина с работы и уточняет, насколько горячий кофе нужно приготовить. Всё бы ничего. Но если хозяин уехал в отпуск по обмену, а в его дом приезжает гость из США, то для нового жильца горячий кофе — напиток с температурой 200 градусов. Упс! И умный дом сгорел.</p>
</section>
</section>
<section id="шаг-2-9" class="level3" data-number="3.17.2">
<h3 data-number="3.17.2">Шаг №2</h3>
<p>Вспомним, что для TypeScript пересечение двух типов означает множество значений, которые обладают одновременно свойствами и всех пересекаемых типов. Также вспомним, что TypeScript предлагает нам такой специальный тип, что ни одно значение никогда не принадлежит этому типу — <code>never</code>. Давайте составим следующее пересечение:</p>
<div class="sourceCode" id="cb89"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb89-1"><a href="#cb89-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Celsius <span class="op">=</span> <span class="dt">number</span> <span class="op">&amp;</span> {celsius<span class="op">:</span> <span class="dt">never</span>}<span class="op">;</span></span></code></pre></div>
<p>Смотрим i-face-brand-c.ts.</p>
<p>Всё, что можно сделать с числовыми значениями, можно сделать и со значением типа <code>Celsius</code>, но не наоборот. Воспользуемся этим.</p>
<section id="панель-управления-умным-домом" class="level4" data-number="3.17.2.1">
<h4 data-number="3.17.2.1">Панель управления умным домом</h4>
<p>Среди оборудования умного дома есть кипятильник. Он имеет программный интерфейс (смотрим файл i-face-smart-kettle.ts.</p>
<p>Сокращённая панель управления умным домом описывается интерфейсом в файле i-face-control-panel.ts.</p>
</section>
</section>
<section id="шаг-3-9" class="level3" data-number="3.17.3">
<h3 data-number="3.17.3">Шаг №3</h3>
<p>Поместим умный дом в файл smart-house.ts. Обратите внимание, что нам приходится использовать функцию-конструктор <code>makeCelsius</code> для создания значений типа <code>Celsius</code>.</p>
<p>В файле smart-house.test.ts зафиксируем поведение умного дома. В частности то, что он использует систему СИ.</p>
<p><em>Дополнительный вопрос</em>: почему при сравнении температуры воды и эталонной температуры кипения мы не используем равенство значений, а проверяем попадание модуля разницы в малый диапазон?</p>
<p>Хорошо, а как же наши заокеанские партнёры, использующие галлоны и градусы Фаренгейта? Для них мы реализуем адаптер.</p>
</section>
<section id="шаг-4-8" class="level3" data-number="3.17.4">
<h3 data-number="3.17.4">Шаг №4</h3>
<p>Нам потребуется ещё один бренд-тип.</p>
<div class="sourceCode" id="cb90"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb90-1"><a href="#cb90-1" aria-hidden="true" tabindex="-1"></a><span class="im">export type</span> Fahrenheit <span class="op">=</span> number <span class="op">&amp;</span> { fahrenheit<span class="op">:</span> <span class="dt">void</span> }<span class="op">;</span></span></code></pre></div>
<blockquote>
<p>Вы можете создавать значения в градусах Цельсия и Фаренгейта и присваивать переменные одного типа переменным другого типа. Наслаждайтесь «общением» с компилятором TypeScript, вернее, с сервисами редактора!</p>
</blockquote>
<p>Описание типа и функцию-конструктор мы поместили в i-face-brand-f.ts.</p>
<p>Адаптер для преобразования шкал — <a href="https://en.wikipedia.org/wiki/Fahrenheit#Conversion_(specific_temperature_point)">линейная функция</a>. Мы поместили её в файл adapter.ts.</p>
<section id="поведение-брендированных-типов" class="level4" data-number="3.17.4.1">
<h4 data-number="3.17.4.1">Поведение брендированных типов</h4>
<p>Для демонстрации концепции брендированных типов в действии мы добавили модульный тест.</p>
</section>
<section id="использование-бренд-типов" class="level4" data-number="3.17.4.2">
<h4 data-number="3.17.4.2">Использование бренд-типов</h4>
<p>Если ваша программа имеет дело с большим количеством разнородных по смыслу значений, выраженных одними и теми же типами JavaScript, вы можете воспользоваться такой методикой и переложить «на плечи» TypeScript обязанности по контролю за сравнимостью типов в ваших функциях.</p>
</section>
</section>
</div>
</section>
<section id="фабрика-ui-компонентов" class="level2" data-number="3.18">
<h2 data-number="3.18">3.15. Фабрика UI-компонентов</h2>
<div class="text-container text-container--module">
<p>Создайте и реализуйте две публичные функции:</p>
<ul>
<li><code>getControl</code>,</li>
<li><code>init</code>.</li>
</ul>
<p>Эти функции позволят вам и вашим коллегам быстро переключать feel&amp; look UI-интерфейса.</p>
<section id="init" class="level3" data-number="3.18.1">
<h3 data-number="3.18.1">init</h3>
<p>Функция <code>init</code> получает один параметр, значения которого ограничены множеством известных вариантов интерфейса. Мы ограничимся одним значением <strong>html</strong>. Если системы создания компонентов будут работать правильно, расширение разрешённых значений станет тривиальным занятием.</p>
<p>Функция <code>init</code> производит необходимые действия и подготавливает плацдарм для работы функции getControl.</p>
</section>
<section id="getcontrol" class="level3" data-number="3.18.2">
<h3 data-number="3.18.2">getControl</h3>
<p>Функция <code>getControl</code> получает строку — одну из разрешённого множества контролов. Мы продемонстрируем идею на примере трёх контролов:</p>
<ul>
<li><code>Button</code> — позволяет создать на форме кнопку;</li>
<li><code>Customer</code> — позволяет создать на форме сложный UI для поиска и выбора одного конкретного заказчика из списка известных в CRM;</li>
<li><code>Product</code> — позволяет выбрать из каталога нужный товар.</li>
</ul>
<p>Заготовка этой библиотеки будет расширяться и дополняться для создания CRM.</p>
</section>
<section id="интерфейсы" class="level3" data-number="3.18.3">
<h3 data-number="3.18.3">Интерфейсы</h3>
<p>После обсуждения с коллегами вы зафиксировали интерфейсы для контролов.</p>
<ul>
<li>i-face-control.ts — все контролы корпоративной библиотеки имеют эти свойства;</li>
<li>i-face-button.ts — описывает дополнительные свойства кнопки;</li>
<li>i-face-customer.ts — описывает дополнительные свойства компонента выбора заказчика;</li>
<li>i-face-product.ts — описывает дополнительные свойства компонента для поиска товара по каталогу.</li>
</ul>
</section>
<section id="реализация" class="level3" data-number="3.18.4">
<h3 data-number="3.18.4">Реализация</h3>
<p>Это задание требует создания системы типов и метода доступа к компонентам, но реализовывать сами компоненты не нужно.</p>
<p>Мы создали заглушки за вас, в директории <strong>html</strong> вы найдёте эти реализации:</p>
<ul>
<li>button.ts,</li>
<li>customer.ts,</li>
<li>product.ts.</li>
</ul>
</section>
<section id="идея-реализации" class="level3" data-number="3.18.5">
<h3 data-number="3.18.5">Идея реализации</h3>
<p>Это не подсказка. Так всегда бывает: после обсуждения с коллегами в голове складывается идея наиболее оптимальной реализации.</p>
<p>Мы считаем, что подход с Abstract Factory может быть в данной ситуации продуктивным.</p>
</section>
</div>
</section>
<section id="создание-фабрики-ui-компонентов" class="level2" data-number="3.19">
<h2 data-number="3.19">3.16. Создание фабрики UI-компонентов</h2>
<div class="text-container text-container--module">
<section id="шаг-1-10" class="level3" data-number="3.19.1">
<h3 data-number="3.19.1">Шаг №1</h3>
<p>Интерфейс фабрики может быть описан таким образом.</p>
<div class="sourceCode" id="cb91"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb91-1"><a href="#cb91-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> UiFactory {</span>
<span id="cb91-2"><a href="#cb91-2" aria-hidden="true" tabindex="-1"></a>  button<span class="op">:</span> () <span class="kw">=&gt;</span> Button<span class="op">;</span></span>
<span id="cb91-3"><a href="#cb91-3" aria-hidden="true" tabindex="-1"></a>  customer<span class="op">:</span> () <span class="kw">=&gt;</span> CustomerSelect<span class="op">;</span></span>
<span id="cb91-4"><a href="#cb91-4" aria-hidden="true" tabindex="-1"></a>  product<span class="op">:</span> () <span class="kw">=&gt;</span> ProductSelect<span class="op">;</span></span>
<span id="cb91-5"><a href="#cb91-5" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Предлагаем вам изучить два следующих отрывка. Они демонстрируют идею создания абстрактной фабрики в TypeScript.</p>
<p>Обратите внимание на сокращённую запись <code>private buttonCtor: new () =&gt; Button,</code>. Ключевое слово <strong>private</strong> предлагает компилятору одновременно с описанием параметра конструктора создать приватное поле класса. Обозначение типа <strong>new ()=&gt;Button</strong> требует от компилятора проверить, что в качестве параметра передаётся не просто функция, а именно класс.</p>
<div class="sourceCode" id="cb92"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb92-1"><a href="#cb92-1" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">class</span> Factory <span class="kw">implements</span> UiFactory {</span>
<span id="cb92-2"><a href="#cb92-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">constructor</span>(</span>
<span id="cb92-3"><a href="#cb92-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> buttonCtor<span class="op">:</span> <span class="kw">new</span> () <span class="kw">=&gt;</span> Button<span class="op">,</span></span>
<span id="cb92-4"><a href="#cb92-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> customerCtor<span class="op">:</span> <span class="kw">new</span> () <span class="kw">=&gt;</span> CustomerSelect<span class="op">,</span></span>
<span id="cb92-5"><a href="#cb92-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> productCtor<span class="op">:</span> <span class="kw">new</span> () <span class="kw">=&gt;</span> ProductSelect</span>
<span id="cb92-6"><a href="#cb92-6" aria-hidden="true" tabindex="-1"></a>  ) {}</span>
<span id="cb92-7"><a href="#cb92-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb92-8"><a href="#cb92-8" aria-hidden="true" tabindex="-1"></a>  button <span class="op">=</span> () <span class="kw">=&gt;</span> <span class="kw">new</span> <span class="kw">this</span><span class="op">.</span><span class="fu">buttonCtor</span>()<span class="op">;</span></span>
<span id="cb92-9"><a href="#cb92-9" aria-hidden="true" tabindex="-1"></a>  customer <span class="op">=</span> () <span class="kw">=&gt;</span> <span class="kw">new</span> <span class="kw">this</span><span class="op">.</span><span class="fu">customerCtor</span>()<span class="op">;</span></span>
<span id="cb92-10"><a href="#cb92-10" aria-hidden="true" tabindex="-1"></a>  product <span class="op">=</span> () <span class="kw">=&gt;</span> <span class="kw">new</span> <span class="kw">this</span><span class="op">.</span><span class="fu">productCtor</span>()<span class="op">;</span></span>
<span id="cb92-11"><a href="#cb92-11" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Поскольку у нас уже есть «реализации» HTML-контролов, мы можем создать конкретную фабрику.</p>
<p>В случае TypeScript мы создаём экземпляр фабрики, оснащённый нужными конструкторами.</p>
</section>
<section id="шаг-2-10" class="level3" data-number="3.19.2">
<h3 data-number="3.19.2">Шаг №2</h3>
<p>Мы подготовили необходимый материал, чтобы реализовать функцию <code>init</code> таким образом:</p>
<div class="sourceCode" id="cb93"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb93-1"><a href="#cb93-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> factory<span class="op">:</span> Factory <span class="op">|</span> <span class="dt">null</span> <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></span>
<span id="cb93-2"><a href="#cb93-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb93-3"><a href="#cb93-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> variants <span class="op">=</span> {</span>
<span id="cb93-4"><a href="#cb93-4" aria-hidden="true" tabindex="-1"></a>  html<span class="op">:</span> getHtmlFactory</span>
<span id="cb93-5"><a href="#cb93-5" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span>
<span id="cb93-6"><a href="#cb93-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb93-7"><a href="#cb93-7" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> init <span class="op">=</span> (variant<span class="op">:</span> <span class="kw">keyof</span> <span class="kw">typeof</span> variants)<span class="op">:</span> <span class="dt">void</span> <span class="kw">=&gt;</span> {</span>
<span id="cb93-8"><a href="#cb93-8" aria-hidden="true" tabindex="-1"></a>  factory <span class="op">=</span> variants[variant]()<span class="op">;</span></span>
<span id="cb93-9"><a href="#cb93-9" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>Сейчас переменная <code>factory</code> ещё не используется. Но обратите внимание на конструкцию <code>variant: keyof typeof variants</code>. Она поручает TypeScript самостоятельно определить пересечение строковых специализированных литеральных типов, так сказать, по месту.</p>
<p><img src="../media/file11.png" /></p>
<p>TypeScript изучает список ключей типа, извлечённого из константы, и использует этот тип.</p>
</section>
<section id="шаг-3-10" class="level3" data-number="3.19.3">
<h3 data-number="3.19.3">Шаг №3</h3>
<p>Для реализации функции <code>getControl</code> нам потребуется описание интерфейса. Дело в том, что мы хотим создать функцию, возвращающую различные типы в зависимости от значения аргумента.</p>
<div class="sourceCode" id="cb94"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb94-1"><a href="#cb94-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> ControlProvider <span class="op">=</span> <span class="op">&lt;</span>T <span class="kw">extends</span> <span class="kw">keyof</span> UiFactory<span class="op">&gt;</span>(type<span class="op">:</span>T)<span class="kw">=&gt;</span><span class="bu">ReturnType</span><span class="op">&lt;</span>UiFactory[T]<span class="op">&gt;</span></span></code></pre></div>
<p>Поскольку в JavaScript нет перегруженных функций, нам требуется это определение, чтобы объяснить компилятору наши намерения.</p>
<p>Теперь мы можем добавить определение провайдера, опирающегося на настройки init.</p>
<div class="sourceCode" id="cb95"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb95-1"><a href="#cb95-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> getControl<span class="op">:</span> ControlProvider <span class="op">=</span> (<span class="kw">type</span>) <span class="kw">=&gt;</span> {</span>
<span id="cb95-2"><a href="#cb95-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (factory <span class="op">===</span> <span class="kw">null</span>) {</span>
<span id="cb95-3"><a href="#cb95-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">Error</span>(<span class="st">&quot;not initialized&quot;</span>)<span class="op">;</span></span>
<span id="cb95-4"><a href="#cb95-4" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb95-5"><a href="#cb95-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> factory[<span class="kw">type</span>]() <span class="im">as</span> <span class="dt">never</span><span class="op">;</span></span>
<span id="cb95-6"><a href="#cb95-6" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
</section>
<section id="шаг-4-9" class="level3" data-number="3.19.4">
<h3 data-number="3.19.4">Шаг №4</h3>
<p>Задание и демонстрация делают акцент на том, как в TypeScript можно решать вопросы типов в стиле ООП. Одновременно показывают некоторые полезные сокращения для удобства работы с типами, которые компилятор может выяснить самостоятельно.</p>
</section>
</div>
</section>
<section id="система-типов-для-unit-тестирования" class="level2" data-number="3.20">
<h2 data-number="3.20">3.17. Система типов для unit-тестирования</h2>
<div class="text-container text-container--module">
<p>TypeScript даёт разработчику возможность использовать методики ООП без каких-либо компромиссов. Вы можете использовать инкапсуляцию и отметить некоторые поля ваших классов ключевыми словами <code>private</code> и <code>protected</code>, и компилятор проследит за тем, как вы используете эти поля. Компилятор предупредит вас о том, что нарушать договорённости и осуществлять доступ к закрытым полям класса — не хорошо.</p>
<p>В файле settings-manager.ts вам дан код класса — менеджера настроек. В файле back-up-path.ts предложена функция, использующая этот менеджер. В файле back-up-path.test.ts находится заготовка модульного теста.</p>
<section id="задание-1" class="level3" data-number="3.20.1">
<h3 data-number="3.20.1">Задание</h3>
<p>Создайте реализацию модульного теста, чтобы не использовать действительную реализацию класса <code>SettingsManager</code>.</p>
</section>
</div>
</section>
<section id="создание-системы-типов-для-модульного-тестирования" class="level2" data-number="3.21">
<h2 data-number="3.21">3.18. Создание системы типов для модульного тестирования</h2>
<div class="text-container text-container--module">
<section id="шаг-1-11" class="level3" data-number="3.21.1">
<h3 data-number="3.21.1">Шаг №1</h3>
<p>Казалось бы, реализация функции <code>getMockSettingsManager</code> может быть выполнена с опорой на структурную типизацию.</p>
<p>Мы знаем, что у <code>SettingsManager</code> есть два публичных метода. И мы хотим этим знание воспользоваться, но у нас ничего не получается.</p>
<pre><code>Type &#39;{ name: string; path: string; }&#39; is missing the following properties from type &#39;SettingsManager&#39;: profileName, baseFolder

ts(2739)</code></pre>
<p>Как? Это же та пара свойств, которая доступна публично, <code>profileName</code> — это же приватное поле!</p>
<p>Так хочет компилятор? Добавим?</p>
</section>
<section id="шаг-2-11" class="level3" data-number="3.21.2">
<h3 data-number="3.21.2">Шаг №2</h3>
<p>Если компилятору не хватает пары полей, добавим их. Однако это нас не спасает.</p>
<pre><code>Type &#39;{ name: string; path: string; baseFolder: string; profileName: string; }&#39; is not assignable to type &#39;SettingsManager&#39;.
  Property &#39;profileName&#39; is private in type &#39;SettingsManager&#39; but not in type &#39;{ name: string; path: string; baseFolder: string; profileName: string; }&#39;.ts(2322)</code></pre>
<p>Дело в том, что классы делают вклад в две Вселенные TypeScript одновременно. Они создают тип во Вселенной типов, но оставляют после себя значение во Вселенной значений.</p>
<p>Если типы не имеют отражения во время работы программы (читай в JavaScript), то значения — есть значения. Они доступны во время исполнения. В этом случае значения полей в JavaScript <code>profileName</code> и <code>baseFolder</code> — обычные значения.</p>
<p>Один из вариантов — разделить публичный интерфейс и реализацию класса.</p>
</section>
<section id="шаг-3-11" class="level3" data-number="3.21.3">
<h3 data-number="3.21.3">Шаг №3</h3>
<p>Добавим определение публичного интерфейса <code>SettingsManager</code> в файл i-face-settings-manager.ts.</p>
<pre><code>export interface SettingsManager {
  name: string;
  readonly path: string;
}</code></pre>
<p>Реализацию самого класса обозначим как специализацию этого интерфейса.</p>
<div class="sourceCode" id="cb99"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb99-1"><a href="#cb99-1" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">class</span> SettingsManagerImp <span class="kw">implements</span> SettingsManager {</span>
<span id="cb99-2"><a href="#cb99-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">private</span> profileName<span class="op">:</span> <span class="dt">string</span> <span class="op">=</span> DEFAULT_PROFILE<span class="op">;</span></span>
<span id="cb99-3"><a href="#cb99-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb99-4"><a href="#cb99-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">constructor</span>(<span class="kw">private</span> <span class="kw">readonly</span> baseFolder<span class="op">:</span> <span class="dt">string</span>) {}</span>
<span id="cb99-5"><a href="#cb99-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb99-6"><a href="#cb99-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">get</span> <span class="fu">name</span>() {</span>
<span id="cb99-7"><a href="#cb99-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="kw">this</span><span class="op">.</span><span class="at">profileName</span><span class="op">;</span></span>
<span id="cb99-8"><a href="#cb99-8" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb99-9"><a href="#cb99-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">set</span> <span class="fu">name</span>(value<span class="op">:</span> <span class="dt">string</span>) {</span>
<span id="cb99-10"><a href="#cb99-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">this</span><span class="op">.</span><span class="at">profileName</span> <span class="op">=</span> value<span class="op">;</span></span>
<span id="cb99-11"><a href="#cb99-11" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb99-12"><a href="#cb99-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb99-13"><a href="#cb99-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">get</span> <span class="fu">path</span>() {</span>
<span id="cb99-14"><a href="#cb99-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="vs">`</span><span class="sc">${</span><span class="kw">this</span><span class="op">.</span><span class="at">baseFolder</span><span class="sc">}</span><span class="vs">/</span><span class="sc">${</span><span class="kw">this</span><span class="op">.</span><span class="at">profileName</span><span class="sc">}</span><span class="vs">`</span><span class="op">;</span></span>
<span id="cb99-15"><a href="#cb99-15" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb99-16"><a href="#cb99-16" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>После такого «ремонта» наш код готов к модульному тестированию.</p>
<section id="интерфейсы-1" class="level4" data-number="3.21.3.1">
<h4 data-number="3.21.3.1">Интерфейсы</h4>
<p>Программирование с явным выделением описания (определения) интерфейсов — полезная практика. Эта методика позволяет вам и вашим коллегам договариваться, заключать контракт о порядке взаимодействия. TypeScript здесь на вашей стороне.</p>
</section>
</section>
</div>
</section>
</section>
</body>
</html>
